<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://its-radio.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://its-radio.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-02-17T01:09:47+00:00</updated><id>https://its-radio.github.io/feed.xml</id><title type="html">Edmund’s Infosec Blog</title><subtitle>A blog about threat detection &amp; intelligence, CTFs &amp; education, and other information security topics </subtitle><entry><title type="html">HTB Write-Up | Sherlock | Compromised</title><link href="https://its-radio.github.io/blog/2024/Compromised-Write-Up/" rel="alternate" type="text/html" title="HTB Write-Up | Sherlock | Compromised"/><published>2024-12-09T00:00:00+00:00</published><updated>2024-12-09T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2024/Compromised-Write-Up</id><content type="html" xml:base="https://its-radio.github.io/blog/2024/Compromised-Write-Up/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>This is a writeup for Hack The Box’s new Sherlock challenge, <strong>Compromised</strong>. This Sherlock is rated as <strong>Easy</strong>, so I’ll tailor this write-up to be beginner friendly and approachable. I’ll try to cover my methods thoroughly and explain the reasoning for each decision that I make.</p> <p>For this demo I’m using Fedora 40 as my OS, but everything I do should be easy to repeat on any Linux-based OS</p> <h2 id="starting-out">Starting Out</h2> <p>Let’s read the description and see what information we can glean.</p> <p>“Our SOC team detected suspicious activity in Network Traffic, the machine has been compromised and company information that should not have been there has now been stolen – it’s up to you to figure out what has happened and what data has been taken.”</p> <h3 id="big-takeaways-from-the-description">Big takeaways from the description</h3> <ol> <li>Suspicious network traffic detected</li> <li>At least one machine has been compromised</li> <li>The compromised machine contained sensitive company data that was supposed to be better protected (presumably it was a breach of policy to have this data on the machine to begin with)</li> <li>The sensitive data was exfiltrated</li> </ol> <h2 id="getting-ahold-of-the-data">Getting ahold of the data</h2> <p>Next, let’s take a look at the file that was provided with the challenge and see what we are working with.</p> <h2 id="downloading-compromisedzip-and-unzipping-it">Downloading compromised.zip and unzipping it</h2> <p>Here I used <code class="language-plaintext highlighter-rouge">7z</code> to decompress the archive after the standard <code class="language-plaintext highlighter-rouge">unzip</code> command failed. I think that’s fairly standard across the Sherlock challenges. Other compression tools might work, but 7z is a popular and easy choice. Keep in mind that you’ll need to enter a password in order to decompress the archive. You can get the password on HTB as shown in the image below.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/1.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Decompress the archive as shown and take a look at what’s inside.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/2.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The file inside is <code class="language-plaintext highlighter-rouge">capture.pcap</code>. Files with the extension <code class="language-plaintext highlighter-rouge">.pcap</code> are packet captures, containing the raw packets sent over a network. There are many tools built for analyzing packet captures, but today we will use one of the most popular–-Wireshark. Now that we know what evidence we are working with, let’s dive into Task 1.</p> <h2 id="task-1-what-is-the-ip-address-used-for-initial-access">Task 1: What is the IP address used for initial access?</h2> <p>Okay, we are required to find out what is the malicious IP used by the attackers for initial access to the compromised machine. Let’s start with assessing all the IPs that are included in capture.pcap. Open it in Wireshark.</p> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-4"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/3.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/3.png" class="img-fluid rounded z-depth-1 small-img" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>And then take a look at <strong>statistics &gt; conversations</strong></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/4.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This is a handy feature of Wireshark that summarizes all the conversations (i.e. unique combinations of source and destination IP address) that exist in a pcap.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/5.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The conversations analysis shows that some IP addresses have exchanged significantly more data than others. While this is interesting, and should be noted for later, it doesn’t let us know exactly which IP was used for initial access. Lets try something else.</p> <p>The outlying data transfers are large enough that its likely they could have transferred files over then network. Lets check if any of those files were transferred without encryption and in a way that we can extract them. Wireshark allows us to export objects that were transferred in the pcap we are looking at. Use <strong>File &gt; Export Objects &gt; HTTP</strong>. I’m starting with HTTP just because that’s a common protocol and likely to give us results.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/6.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Looking at the exportable objects, we see that there are quite a few.</p> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/7.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>However, one stands out as being much larger than the others, as well as being categorized as an image. Let’s take a look at that and see what we can find out about it. Also, we can see the IP that the file came from, which could come in handy in case this turns out to be a malicious payload (spoiler: it’s going to be important). Click the save button and select a folder to save the file to. The file will be called <strong>6ctf5JL</strong> with no extension.</p> <p>Next, we’ll use the <code class="language-plaintext highlighter-rouge">file</code> command in the terminal as a starting point to investigate the file.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/8.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Here we can see that the <code class="language-plaintext highlighter-rouge">file</code> command reports that the downloaded file is a <strong>PE32 executable (DLL)</strong>. This indicates that the file is a DLL, or a dynamic linked library. This type of file is commonly used to carry malware meant to infect Windows systems. Especially given the strange name and lack of extension, we should consider this a malicious file until proven otherwise. It’s probable that <strong>6ctf5JL</strong> had to do with the initial access. Trying that IP address we associated with the file earlier, we can see that it is indeed the correct answer for task 1.</p> <h2 id="task-2-what-is-the-sha256-hash-of-the-malware">Task 2: What is the SHA256 hash of the malware?</h2> <p>Since we have already downloaded what appears to be a malicious file, let’s assume that’s the malware they are referring to. Simply hash it with the sha256sum command and enter the hash as the answer.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/9.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/9.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="task-3-what-is-the-family-label-of-the-malware">Task 3: What is the Family label of the malware?</h2> <p>Similar malware is often said to be in the same “family” and classified under a single family name. If this malware is well known, it’s probable that this type of information could be available on VirusTotal. Upload the file to virustotal.com or search the SHA256 and take a look at the results.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/10.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>There are a few family labels, one of which is the answer to this question. You can also get to the same result by just Googling the SHA256 hash (though the answer is less obvious with that method).</p> <h2 id="task-4-when-was-the-malware-first-seen-in-the-wild-utc">Task 4: When was the malware first seen in the wild (UTC)</h2> <p>This sounds like another job for VirusTotal. Poke around in the information you can find about the malware on VirusTotal and you should be able to find the answer.</p> <h2 id="task-5-the-malware-used-https-traffic-with-a-self-signed-certificate-what-are-the-ports-from-smallest-to-largest">Task 5: The malware used HTTPS traffic with a self-signed certificate. What are the ports, from smallest to largest?</h2> <p>For this, we’ll need to head back to Wireshark. To isolate HTTPS traffic in wireshark, we need to apply a filter in the filter bar. Specifically, we need to filter for TLS traffic. Type <code class="language-plaintext highlighter-rouge">tls</code> in the filter bar, and press enter.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/11.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>We can see that this filter returns only packets using the TLS protocol. TLS stands for Transport Layer Security and is the protocol that secures and encrypts HTTPS traffic. Typically an HTTPS server uses port 443, but in the conversations above, we can see that a few non-standard ports are being used. If we select a packet that contains “Certificate, Server Key Exchange, Server Hello Done” in the Info field and expand the TLS information included in the packet (shown below; lower left of the image), we can get some more information about whether or not this is one of the self-signed HTTPS certificates mentioned in the question.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/12.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>A certificate is self-signed when the issuer is the same as the subject. As we can tell from examining the certificate information, each piece of information about the issuer of this certificate matches the corresponding piece of information about the subject, meaning that this certificate is indeed self-signed.</p> <p>So, we know that one of the ports we are looking for is 2078, but there are two more. You can find them using a similar method to the one we have just reviewed.</p> <p>If you’re having trouble finding other ports being used with self-signed certificates, try sorting the packets by <strong>destination port</strong> to identify suspicious ports, then filter by that port in the filter bar to isolate the conversation and identify the packet containing the certificate information.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/13.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Then filter:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/14.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="task-6-what-is-the-id-at-localityname-of-the-self-signed-certificate-associated-with-the-first-malicious-ip">Task 6: What is the id-at-localityName of the self-signed certificate associated with the first malicious IP?</h2> <p><strong>id-at-localityName</strong> is a piece of information contained in the certificate. So, selecting the same packet that we did for the last question, we can examine the cert information to find <strong>id-at-localityName</strong>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/15.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/15.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="task-7-what-is-the-notbefore-timeutc-for-this-self-signed-certificate">Task 7: What is the notBefore time(UTC) for this self-signed certificate?</h2> <p>Again, this information can be found by examining the certificate information. This time, it is under the <strong>validity</strong> information. If you’ve come this far, it should be quite easy to find.</p> <h2 id="task-8-what-was-the-domain-used-for-tunneling">Task 8: What was the domain used for tunneling?</h2> <p>Tunneling is a technique that attackers use to send information over protocols that are commonly used but not usually used to send large amounts of data. To get an idea of what to look for, we should get a high level view of what protocols were used in this pcap. Luckily, Wireshark has just the tool for this job. As we did at the beginning of this Sherlock, we’ll be using Wireshark’s Statistics menu again. This time, select <strong>Statistics &gt; Protocol Hierarchy</strong> (make sure to clear other filters you may have applied before doing this).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/16.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Immediately one of the protocols stands out.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/17.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/17.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>DNS accounts for 76% of the packets and 37% of the bytes sent in this pcap. That is very abnormal as DNS is meant to resolve domain names, not transfer data. However, since DNS is whitelisted in almost every network, it is a popular choice for tunneling. It is likely the the tunneling occurred over dns, but what domain was used for the tunneling? To find out, lets apply a filter for ‘dns’ and check out the results.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/2025-02-14/18.png" sizes="95vw"/> <img src="/assets/img/2025-02-14/18.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>What we see in the screenshot above is repeated DNS queries for the same TLD (top level domain), but to different subdomains. The exfiltrated data is split up and encoded as these subdomain queries. The data will then reassembled on the other side by the attackers. This is another indicator of DNS tunneling, so we can be pretty confident that the TLD that these queries are for is the one they are looking for in the answer.</p> <p>Thanks for reading! If you have any questions or comments, feel free to reach out or follow <a href="https://x.com/its_rad_io">me on X</a></p>]]></content><author><name></name></author><category term="Write-Ups"/><category term="forensics"/><category term="pcap"/><category term="HackTheBox"/><summary type="html"><![CDATA[A beginner-friendly write-up for Hack The Box's forensics challange 'Compromised']]></summary></entry><entry><title type="html">How Chinese Spies Hacked U.S. State Department Emails, Threat Modeling for APTs, and APTaaS</title><link href="https://its-radio.github.io/blog/2024/storm-0558-APT/" rel="alternate" type="text/html" title="How Chinese Spies Hacked U.S. State Department Emails, Threat Modeling for APTs, and APTaaS"/><published>2024-07-12T00:00:00+00:00</published><updated>2024-07-12T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2024/storm-0558-APT</id><content type="html" xml:base="https://its-radio.github.io/blog/2024/storm-0558-APT/"><![CDATA[<p><strong>Note:</strong> <em>I refer to a threat group as “Storm-0558” throughout this article, but since the time of writing Microsoft has begun tracking this group under the name “Antique Typhoon”</em></p> <h2 id="how-chinese-spies-hacked-us-state-department-emails">How Chinese Spies Hacked U.S. State Department Emails</h2> <p>An intrusion by an APT (Advanced Persistent Threat) that I recently researched for a class stood out from other APT attacks I have heard of. It caught my eye due to its complexity and the ingenuity it must have taken to pull off successfully. The attack was discovered in the summer of 2023, first by the US State Department, and then more thoroughly investigated by Microsoft. I wrote <a href="/blog/2024/storm-0558-laws/">another blog post</a> about this attack and the U.S. laws that were broken by both the threat actors and by Microsoft. Microsoft was tipped off that Outlook email accounts belonging to US State Department employees and contractors were being accessed by unknown parties. Microsoft investigated and found that the patterns of activity displayed by the group were consistent with an APT conducting espionage from China. This group’s activities were distinct from previously known Chinese government APTs, so Microsoft classified the group as a developing APT and named it Storm-0558.</p> <p>Storm-0558’s patterns of activity fit neatly with many of those outlined in Hejase et al.’s 2020 review of APTs. Hejase et al. suggest that APTs may be able to successfully target and penetrate even well-resourced and well-defended organizations <a class="citation" href="#hejase_advanced_2020">(Hejase et al., 2020)</a>. Indeed, Storm-0558 penetrated Microsoft’s flagship email product <em>Outlook</em> as well as Microsoft’s corporate network. Furthermore, the attack was aimed at a razor thin set of targets–the US State Department and companies closely related to it. The attackers were highly skilled, remaining undetected in Microsoft’s systems for at least a month but possibly as long as a year or more. They achieved this by abusing an unknown flaw–a 0-day–but not a standard one. It required a special cryptographic key that had to be stolen from Microsoft. Not only that, but Microsoft didn’t even know they, themselves, had the key or that it could be stolen. It was not ever supposed to be stored on their servers, but was accidentally saved (because of a bug) as part of a crash-dump after the crash of a system that was used to generate MSA signing keys. The attackers had to know that they needed the key, know how to look for the key, compromise a Microsoft employee account, know the key would be in the crash-dump, find the crash-dump, exfiltrate it, find the key, and then use it as part of a 0-day exploit for the attack, all without detection. This is all to say that this attack took tremendous skill, time, and dedication to pull off and aligns with Hejase et al.’s descriptions of APT attacks <a class="citation" href="#hejase_advanced_2020">(Hejase et al., 2020)</a>.</p> <h2 id="using-threat-modeling-to-defend-against-apts">Using Threat Modeling To Defend Against APTs</h2> <p>A single section of blog post is much too small to cover how to defend against APTs but I will touch on some important points that I came across during my research. Given the resources and manpower at their disposal, defense against APTs can be extremely challenging. There will never be a perfect defense strategy. In their article on using Game-Theory to identify defense strategies for use against APTs, Khalid et al. echo this sentiment, writing that in the future we will continue to see attackers’ behavior evolve to avoid detection and bypass security measures <a class="citation" href="#khalid_recent_2023">(Khalid et al., 2023)</a>. This may seem like an obvious statement but it is especially poignant when it comes to APTs. APTs, especially large government APTs, are often on the cutting-edge of technological progress. In some cases, like the case of Microsoft and Storm-0558, they will penetrate even very well-resourced organizations.</p> <p>To defend against attackers who use novel and advanced tactics, we must try to anticipate these novel tactics before they are used by thinking about how an advanced attacker <em>might try</em> to breach our defenses. This is where Threat Modeling can help. Tatam et al. highlight eight key aspects of a threat modeling exercise <a class="citation" href="#tatam_review_2021">(Tatam et al., 2021)</a>:</p> <p><em>1. Use correlated and actionable threat intelligence from multiple internal and external sources.</em> <em>2. Identify organizational specific threat agents, their motives and capability.</em> <em>3. Identify critical assets and controls.</em> <em>4. Find all relevant threats whose likelihood and business impact level are above the organization’s risk appetite.</em> <em>5. Include as many stakeholders as possible from all areas and levels of an organization.</em> <em>6. Identify boundaries of environments within the scope of the system.</em> <em>7. Identify Authentication and authorisation aspects.</em> <em>8. Choose a consistent approach and methodology that best fits requirements, maturity level, audience and environment.</em></p> <p>Applying these principles can help identify possible vectors of attack, likely targets for attack, and so on. In the case of Microsoft and Storm-0558, while I’m sure Microsoft applies many of these principles, Microsoft failed to model a threat like Storm-0558. They failed to identify the crash-dump as a critical asset (since it contained critical information). They failed to detect that the crash-dump contained a cryptographic key, leading to the failure to protect it. Their failure to detect and protect the key led to the eventual breach by Storm-0558. If their threat modeling had included thorough searches for MSA keys in places they shouldn’t be, its possible they would be been able to prevent the breach. This example illustrates two realities: That threat modeling, if applied properly, can help increase security at any organization, even very large ones. And that APTs may still find methods of exploitation that have not occurred to defenders, even when threat modeling has been done well.</p> <h2 id="inexperienced-nation-states-playing-catch-up">Inexperienced Nation-States Playing Catch-Up</h2> <p>APT status, at least at the highest tier, is generally reserved for governments or other organizations with a long history of signals intelligence like the U.S., China, India, U.K., etc. These countries have been pouring resources into cyber espionage for years and have used that time and experience to develop many advanced capabilities. While money can be a great catalyst for the development of espionage capabilities, the key components are really time and experience. Organizations like the NSA have spent decades trying, succeeding, failing, and iterating their technologies. There is simply no way for another country to buy that experience. In the past, this has acted as a barrier to entry for countries trying to enter the playing field. However, that paradigm is unquestionably shifting.</p> <p>Increasingly since the mid 2010s, nation-states have been able to buy their way to higher and higher tiers of the APT class. It all started with a U.S. company called Zorodium, founded in 2015. Zorodium acted as a broker for exploits, buying them from hackers and selling them to governments, their contractors, or other private companies. Since 2015, many other such brokers have popped up, funneling exploits from hackers around the world into the hands of the highest bidders. This phenomenon also gave rise to a similar, but distinct business model: APTaaS or APT as a Service. These companies offer a full service hacking suite to governments in exchange for a heft payout. Israel’s NSO Group is perhaps the most famous (and infamous) of these organizations.</p> <p>Companies like NSO develop advanced hacking tools and frameworks and then sell them to governments or other organizations that do not have the experience or ability to develop such tools on their own. It used to take years or decades to stand-up an organization competent enough to pose a significant threat as a nation-state, but thanks to APTaaS, the timeline is now much shorter. What this means is that there has been a recent proliferation of advanced cyber-weapons to many governments across the world, vastly expanding the breadth of the potential threat posed by APTs as a whole. The United States and China, among many others, have long been guilty of (ab)using their cyber-might for their own gain, often at the expense of others. With advanced cyber weapons in the hands of more nation states than ever before, these threats are multiplied many fold. While it used to be rare to be the target of an APT, it is becoming more and more common. The idea “it won’t happen to me,” which was outdated as soon as it was uttered, is especially egregious in the age of APTaaS. Today all organizations, and really all privacy-minded individuals, must assume that they could be the victim of a long-term, targeted, and advanced attack.</p>]]></content><author><name></name></author><category term="Opinion"/><category term="breach"/><category term="opinion"/><category term="china"/><category term="storm0558"/><category term="antiquetyphoon"/><category term="apt"/><summary type="html"><![CDATA[An informal discussion of Antique Typhoon's attack on Microsoft systems and email accounts associated with U.S Government personnel. A brief discussion of threat modelling and APTaaS]]></summary></entry><entry><title type="html">The Legal Implications of Antique Typhoon’s Intrustion Into Microsoft &amp;amp; The U.S. State Department</title><link href="https://its-radio.github.io/blog/2024/storm-0558-laws/" rel="alternate" type="text/html" title="The Legal Implications of Antique Typhoon’s Intrustion Into Microsoft &amp;amp; The U.S. State Department"/><published>2024-06-21T00:00:00+00:00</published><updated>2024-06-21T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2024/storm-0558-laws</id><content type="html" xml:base="https://its-radio.github.io/blog/2024/storm-0558-laws/"><![CDATA[<p><strong>Disclaimer:</strong> <em>While I discuss U.S. laws in this article, I am not a lawyer and anything I write about law (or anything else for that matter) should be taken as my opinion and speculation, not as a statement of legal fact. Certainly nothing I write should be taken as legal advice.</em></p> <p><strong>Note:</strong> <em>I refer to a threat group as “Storm-0558” throughout this article, but since the time of writing Microsoft has begun tracking this group under the name “Antique Typhoon”</em></p> <h2 id="the-attack-and-initial-fallout">The attack and initial fallout</h2> <p>On July 11th, 2023, the Microsoft Security Response Center (MSRC) published a blog post announcing that they had mitigated an attack targeting Microsoft Cloud email accounts at 25 organizations across the world <a class="citation" href="#msrc_microsoft_2023a">(MSRC, 2023)</a>. Specifically, the attackers had seemed quite interested in U.S. government activity, targeting U.S. government agencies and adjacent organizations. Among the accounts hacked were those of U.S. Commerce Secretary Gina Raimondo, Assistant Secretary of State for East Asia Daniel Kritenbrink, and U.S. Envoy to China Nicholas Burns <a class="citation" href="#freed_chinese_2023">(Freed et al., 2023)</a>.</p> <p>Microsoft Threat Intelligence has said that the attacking group is based in China and assessed that its methods, OpSec, tradecraft, and objectives seem consistent with state-sponsored espionage <a class="citation" href="#mti_analysis_2023">(Intelligence, 2023)</a>. They have dubbed the group <em>Storm-0558</em> and differentiated it from previously identified Chinese state-sponsored hacking groups like APT31, APT41, APT10, and Salt Typhoon. Storm-0558 gained access to accounts by forging authentication tokens and using them via the Outlook Web Access web application <a class="citation" href="#msrc_microsoft_2023a">(MSRC, 2023)</a>. The precise details are a little murky even in Microsoft’s own posts about the attack, but the exploit used by the attackers required use of a Microsoft account (MSA) key that they had obtained by compromising a Microsoft employee’s account in a phishing campaign. The MSA key in question was never supposed to be saved by Microsoft but was accidentally included in a crash-dump log back in 2021 <a class="citation" href="#msrc_results_2023b">(MSRC, 2023)</a>. The stolen MSA key was then somehow accessed by the attackers and used to cryptographically sign Azure Active Directory authentication tokens that allowed access to enterprise email accounts. The attackers accessed select accounts for more than a month in 2023 and exfiltrated over 60,000 emails during that time. U.S. sources say that none of the emails contained classified or even sensitive information.</p> <p><strong>Update:</strong> <em>If you’d like to know more about the actual attack, I hace since written another <a href="/blog/2024/storm-0558-APT/">post on the topic</a>. I’d also highly recommend reading the detailed reports from MSRC, which you can find in my references.</em></p> <p>As of today, no official criminal proceedings have been brought as a result of this attack. Given the international nature of the attack and the fact that the attackers were probably working for Chinese intelligence, it is unlikely that any of the hackers will serve time or face consequences for this breach. However, these types of hurdles have not stopped the U.S. Department of Justice (DOJ) from issuing indictments against state-sponsored hackers in the past.</p> <h2 id="which-laws-were-broken-by-storm-0558">Which Laws Were Broken By Storm-0558?</h2> <p>It is obvious that it is illegal to hack into a large corporation and then leverage that access to read State Department employee’s emails, but it is less obvious exactly which laws make those actions are illegal. To get an idea of which laws could apply to this case, I researched some idictments issued for similar cases.</p> <p>One similar case, in 2017, the DOJ released indictments for four Russian nationals associated with the FSB (the domestic wing of Russian Intelligence) for allegedly hacking Yahoo email accounts <a class="citation" href="#doj_office_2017">(DOJ, 2017)</a>. The 2017 case differs in many ways from Storm-0558’s 2023 attack, but some of the charges in the indictment seem like they could be applied to the members of Storm-0558. For example, it seems likely that the members of Storm-0558 violated <em>18 USC §1030. Fraud and related activity in connection with computers</em> which contains many specific criteria for violation, but in essence prohibits unauthorized access to any protected computers, including those containing information from any department of the United States <a class="citation" href="#18_usc_1030_1986">(18 USC §1030, 1986)</a>. They also probably violated <em>18 USC §1028. Fraud and related activity in connection with identification documents, authentication features, and information</em> <a class="citation" href="#18_usc_1028_1998">(18 USC §1028, 1998)</a>, <em>18 USC §1028A. Aggravated identity theft</em> <a class="citation" href="#18_usc_1028A_2004">(18 USC §1028A, 2004)</a>, and <em>18 USC §1029. Fraud and related activity in connection with access devices</em> <a class="citation" href="#18_usc_1029_1984">(18 USC §1029, 1984)</a>. The reasons that I believe they violated these laws are, respectively, because they forged authentication tokens to impersonate another person, they committed a felony while impersonating another person, and they created, possessed, and used “counterfeit” authentication tokens, i.e. access devices.</p> <h2 id="could-microsoft-be-under-legal-threat-too">Could Microsoft Be Under Legal Threat Too?</h2> <p>U.S. Senator Ron Wyden <a class="citation" href="#wyden_letter_2023">(Wyden, 2023)</a> wrote a letter to Jen Easterly, Director of CISA, Lina Khan, Chairwoman of the FTC, and Merrick Garland, U.S. Attorney General asking them to investigate Microsoft in relation to the email breach. He specifically asks Garland to determine if Microsoft broke federal contract laws, Khan to investigate privacy laws, and points out that by being negligent in this case Microsoft may have broken a court order from 2002 regarding a different security incident. Wyden doesn’t specify laws that he thinks Microsoft has broken, but I think some contenders are <em>The Federal Trade Commission Act</em> <a class="citation" href="#15_usc_41-58_1914">(15 USC §41-58, 1914)</a>, <em>The Children’s Online Privacy Protection Act</em> <a class="citation" href="#15_usc_6501-6505_1998">(15 USC §6501-6505, 1998)</a>, and <em>The Electronic Communications Privacy Act</em> <a class="citation" href="#18_usc_2510-2523_1986">(18 USC §2510-2523, 1986)</a>.</p> <p>To make matters worse for Microsoft, they weren’t even the ones who discovered the attack, instead they were notified by the U.S. State Department’s cybersecurity team <a class="citation" href="#goswami_microsoft_2023">(Goswami, 2023)</a>. Furthermore, Microsoft was charging a premium fee for access to the types of logs that allowed the State Department’s team to notice the attack. Customers who paid for the cloud email services, but not for the premium logging, had absolutely no way to know they were under attack. After looking through logs of one of the victim organizations that did not pay Microsoft for premium logs, Incident responder Steven Adair said in an interview “you couldn’t convince me anything in here is out of the ordinary and I would never suspect a breach and I’m looking for one” <a class="citation" href="#temple-raston_what_2023">(Temple-Raston &amp; Jarvis, 2023)</a>. All this is to say, Microsoft may be in some legal trouble after this incident. Between leaking the MSA key, not being able to detect the breach themselves, and charging a premium for access to the logs that contained evidence of the breach, they are already appearing pretty weak, at least in the court of public opinion</p>]]></content><author><name></name></author><category term="Opinion"/><category term="law"/><category term="cyberlaw"/><category term="opinion"/><category term="china"/><category term="storm0558"/><category term="antiquetyphoon"/><category term="apt"/><summary type="html"><![CDATA[An informal discussion of Antique Typhoon's attack on Microsoft systems and email accounts associated with U.S State Department employees as well as the laws that were likely broken along the way.]]></summary></entry><entry><title type="html">Why All The Cybersecurity Laws? Why Now?</title><link href="https://its-radio.github.io/blog/2024/importance-of-cyberlaw/" rel="alternate" type="text/html" title="Why All The Cybersecurity Laws? Why Now?"/><published>2024-05-15T00:00:00+00:00</published><updated>2024-05-15T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2024/importance-of-cyberlaw</id><content type="html" xml:base="https://its-radio.github.io/blog/2024/importance-of-cyberlaw/"><![CDATA[<p>Cyberlaw has become increasingly important since the advent of the internet. As Duggal <a class="citation" href="#duggal_future_2016">(Duggal, 2016)</a> aptly points out, at the beginning, the internet was like the Wild West–no laws, no limits, and no sheriff in town to keep bandits at bay. However, in the early days of internet-like entities in the 1960s and 1970s, there really wasn’t much interesting or valuable on the internet to steal. So it was like the wild west, but without trains to commandeer, stage coaches to hold up, or banks to rob. There were no laws, no law enforcement, but not much need for either.</p> <p>Over the years, the proverbial trains, stage coaches, and banks arrived on the internet. As nefarious activities began to become a problem, governments tried to address the issues with legislation, but they were already lagging behind. There have been many attempts to create and enforce laws to govern activities that occur online or on a computer. In the fairly early days, the US passed The Computer Fraud and Abuse Act of 1986 <a class="citation" href="#hughes_hr4718_1986">(Hughes, 1986)</a> and The Computer Security Act of 1987 <a class="citation" href="#glickman_hr145_1988">(Glickman, 1988)</a>. Other countries followed suit with the UK passing The Computer Misuse Act of 1990 <a class="citation" href="#townsend_brief_2019">(Townsend, 2019)</a> and India enacting The Information Technology Act of 2000 <a class="citation" href="#nagpal_7_2007">(Nagpal, 2007)</a>. As is true with all laws, these only applied to the countries in which they were passed. The result is a disparate smattering of laws across the globe, each one only governing a small geographic area while attempting to govern a global network.</p> <p>By 2016, attackers were maturing. Nation states had begun to seriously employ hacking to further their political goals and intelligence objectives. Criminals were becoming more skilled and more organized. Governments and law enforcement agencies made some attempts to curb cybercrime by working with the governments of other countries. Many countries began engaging others in bilateral cyber-arrangements <a class="citation" href="#duggal_future_2016">(Duggal, 2016)</a>–kind of agreeing with each other, “I won’t hack you if you don’t hack me.” Other countries, though, decided not to participate in these types of agreements. Famously, Russia’s refusal to prosecute organized criminal groups that targeted citizens of western countries has led to an unprecedented explosion of cybercrime. Without fear of prosecution, criminal cyber-gangs were able to essentially operate as legal businesses in Russia which resulted in a streamlining and professionalization of their criminal activities.</p> <p>Now, in 2024, the trend has continued. Threat actors are at the most mature and dangerous we’ve yet seen them, legal frameworks remain two steps behind, and the “west” remains pretty wild. However, progress is being made. Beyond writing legislation that creates consequences for those actively engaged in cyber crime, lawmakers have increasingly instated requirements for companies that store sensitive data. By legally requiring companies to follow certain cybersecurity practices, lawmakers aim to lower the criminals’ rates of success. At the end of 2023, for example, the Securities and Exchange Commission implemented a new rule that forces registrants to disclose serious cybersecurity incidents within 4 days <a class="citation" href="#zukis_companies_nodate">(Zukis, 2024)</a> (Zukis, 2024). Shafer and Vecci <a class="citation" href="#shafer_cybersecurity_2023">(Shafer &amp; Vecci, 2023)</a> tell an interesting story about a ransomware incident that highlights both the importance and a shortcoming of such a requirement. In the incident, a company was being extorted by a ransomware gang. The company failed to disclose the breach to the SEC. The gang, being aware of the SEC’s requirements, then threatened that they would report the company’s failure to disclose to the SEC. The company put itself in a terrible strategic position by not reporting the breach, but it’s also true that the SEC’s rule inadvertently supplied the ransomware gang with extra leverage.</p> <p>Personally, I think that reporting rules are good. I think most compliance requirements are good. I think that most companies do far too little to protect themselves from cyberattacks, and compliance requirements can help motivate them to do more. Our lives are more online than ever before, companies store more of our personal information than ever before, and cybercrime continues to become more professional and profitable. These factors combine to mean that now is perhaps the most important moment in history for cyber law. That being said, it’s not all doom and gloom. For the past couple of years, the UN has been drafting and negotiating an international treaty on cybercrime <a class="citation" href="#wilkinson_what_2023">(Wilkinson, 2023)</a>. With some luck maybe this treaty will help governments work together to reduce cybercrime rates in a concerted effort across the globe. Maybe. Until that far-off future comes, the internet will remain what it has been since the beginning: The Wild West.</p>]]></content><author><name></name></author><category term="Opinion"/><category term="law"/><category term="cyberlaw"/><category term="opinion"/><summary type="html"><![CDATA[A short piece I wrote for a Cyberlaw class on the importance of cybersecurity laws in the modern day.]]></summary></entry></feed>